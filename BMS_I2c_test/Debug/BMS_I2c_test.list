
BMS_I2c_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c60  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08007df0  08007df0  00017df0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008204  08008204  00020208  2**0
                  CONTENTS
  4 .ARM          00000000  08008204  08008204  00020208  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008204  08008204  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008204  08008204  00018204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008208  08008208  00018208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800820c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020208  2**0
                  CONTENTS
 10 .bss          00000344  20000208  20000208  00020208  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000054c  2000054c  00020208  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 14 .debug_info   00011c5d  00000000  00000000  0002027b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000024af  00000000  00000000  00031ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001030  00000000  00000000  00034388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000cbe  00000000  00000000  000353b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000309f  00000000  00000000  00036076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014a5e  00000000  00000000  00039115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a79d2  00000000  00000000  0004db73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005638  00000000  00000000  000f5548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000043  00000000  00000000  000fab80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007dd8 	.word	0x08007dd8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	08007dd8 	.word	0x08007dd8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <HAL_TIM_PeriodElapsedCallback>:
	// LED_ON;
	 HAL_UART_Transmit_DMA(&huart2, str, sizeof(str));

}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
        if(htim->Instance == TIM17) //check if the interrupt comes from TIM1
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a4b      	ldr	r2, [pc, #300]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	f040 8090 	bne.w	8000d7c <HAL_TIM_PeriodElapsedCallback+0x134>
        {
           if(bit==false){
 8000c5c:	4b4a      	ldr	r3, [pc, #296]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	f083 0301 	eor.w	r3, r3, #1
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d030      	beq.n	8000ccc <HAL_TIM_PeriodElapsedCallback+0x84>

             LED_OFF;
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2108      	movs	r1, #8
 8000c6e:	4847      	ldr	r0, [pc, #284]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000c70:	f001 fa34 	bl	80020dc <HAL_GPIO_WritePin>
        	if((transmit[tr_bit])==3){TIM17->ARR=9000;}
 8000c74:	4b46      	ldr	r3, [pc, #280]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b46      	ldr	r3, [pc, #280]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000c7c:	5c9b      	ldrb	r3, [r3, r2]
 8000c7e:	2b03      	cmp	r3, #3
 8000c80:	d103      	bne.n	8000c8a <HAL_TIM_PeriodElapsedCallback+0x42>
 8000c82:	4b40      	ldr	r3, [pc, #256]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000c84:	f242 3228 	movw	r2, #9000	; 0x2328
 8000c88:	62da      	str	r2, [r3, #44]	; 0x2c
        	if((transmit[tr_bit])==2){TIM17->ARR=2280;}
 8000c8a:	4b41      	ldr	r3, [pc, #260]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	461a      	mov	r2, r3
 8000c90:	4b40      	ldr	r3, [pc, #256]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000c92:	5c9b      	ldrb	r3, [r3, r2]
 8000c94:	2b02      	cmp	r3, #2
 8000c96:	d103      	bne.n	8000ca0 <HAL_TIM_PeriodElapsedCallback+0x58>
 8000c98:	4b3a      	ldr	r3, [pc, #232]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000c9a:	f640 02e8 	movw	r2, #2280	; 0x8e8
 8000c9e:	62da      	str	r2, [r3, #44]	; 0x2c
        	if((transmit[tr_bit])==1){TIM17->ARR=760;}
 8000ca0:	4b3b      	ldr	r3, [pc, #236]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4b3b      	ldr	r3, [pc, #236]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000ca8:	5c9b      	ldrb	r3, [r3, r2]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d103      	bne.n	8000cb6 <HAL_TIM_PeriodElapsedCallback+0x6e>
 8000cae:	4b35      	ldr	r3, [pc, #212]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000cb0:	f44f 723e 	mov.w	r2, #760	; 0x2f8
 8000cb4:	62da      	str	r2, [r3, #44]	; 0x2c
        	if((transmit[tr_bit])==0){TIM17->ARR=1520;}
 8000cb6:	4b36      	ldr	r3, [pc, #216]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	4b35      	ldr	r3, [pc, #212]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000cbe:	5c9b      	ldrb	r3, [r3, r2]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d103      	bne.n	8000ccc <HAL_TIM_PeriodElapsedCallback+0x84>
 8000cc4:	4b2f      	ldr	r3, [pc, #188]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000cc6:	f44f 62be 	mov.w	r2, #1520	; 0x5f0
 8000cca:	62da      	str	r2, [r3, #44]	; 0x2c
               // TIM17->CCR1=0;
           }


           if(bit==true){
 8000ccc:	4b2e      	ldr	r3, [pc, #184]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d044      	beq.n	8000d5e <HAL_TIM_PeriodElapsedCallback+0x116>
          LED_ON;
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2108      	movs	r1, #8
 8000cd8:	482c      	ldr	r0, [pc, #176]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000cda:	f001 f9ff 	bl	80020dc <HAL_GPIO_WritePin>
            if((transmit[tr_bit])==3){TIM17->ARR=9000;LED_OFF;}
 8000cde:	4b2c      	ldr	r3, [pc, #176]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	4b2b      	ldr	r3, [pc, #172]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000ce6:	5c9b      	ldrb	r3, [r3, r2]
 8000ce8:	2b03      	cmp	r3, #3
 8000cea:	d108      	bne.n	8000cfe <HAL_TIM_PeriodElapsedCallback+0xb6>
 8000cec:	4b25      	ldr	r3, [pc, #148]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000cee:	f242 3228 	movw	r2, #9000	; 0x2328
 8000cf2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2108      	movs	r1, #8
 8000cf8:	4824      	ldr	r0, [pc, #144]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000cfa:	f001 f9ef 	bl	80020dc <HAL_GPIO_WritePin>
           if((transmit[tr_bit])==2){TIM17->ARR=2280;}
 8000cfe:	4b24      	ldr	r3, [pc, #144]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	461a      	mov	r2, r3
 8000d04:	4b23      	ldr	r3, [pc, #140]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000d06:	5c9b      	ldrb	r3, [r3, r2]
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d103      	bne.n	8000d14 <HAL_TIM_PeriodElapsedCallback+0xcc>
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000d0e:	f640 02e8 	movw	r2, #2280	; 0x8e8
 8000d12:	62da      	str	r2, [r3, #44]	; 0x2c
            if((transmit[tr_bit])==1){TIM17->ARR=1520;}
 8000d14:	4b1e      	ldr	r3, [pc, #120]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b1e      	ldr	r3, [pc, #120]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000d1c:	5c9b      	ldrb	r3, [r3, r2]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d103      	bne.n	8000d2a <HAL_TIM_PeriodElapsedCallback+0xe2>
 8000d22:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000d24:	f44f 62be 	mov.w	r2, #1520	; 0x5f0
 8000d28:	62da      	str	r2, [r3, #44]	; 0x2c
            if((transmit[tr_bit])==0){TIM17->ARR  =760;}
 8000d2a:	4b19      	ldr	r3, [pc, #100]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	4b18      	ldr	r3, [pc, #96]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000d32:	5c9b      	ldrb	r3, [r3, r2]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d103      	bne.n	8000d40 <HAL_TIM_PeriodElapsedCallback+0xf8>
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000d3a:	f44f 723e 	mov.w	r2, #760	; 0x2f8
 8000d3e:	62da      	str	r2, [r3, #44]	; 0x2c
           // TIM17->CCR1=0;
            tr_bit++;
 8000d40:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	3301      	adds	r3, #1
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000d4a:	701a      	strb	r2, [r3, #0]
            if(tr_bit==(transmit_lenght)){tr_bit=0;}
 8000d4c:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000d4e:	781a      	ldrb	r2, [r3, #0]
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d102      	bne.n	8000d5e <HAL_TIM_PeriodElapsedCallback+0x116>
 8000d58:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]

                      }
          bit=!bit;
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	bf14      	ite	ne
 8000d66:	2301      	movne	r3, #1
 8000d68:	2300      	moveq	r3, #0
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	f083 0301 	eor.w	r3, r3, #1
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	4b03      	ldr	r3, [pc, #12]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000d7a:	701a      	strb	r2, [r3, #0]
                //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
        }
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40014800 	.word	0x40014800
 8000d88:	20000391 	.word	0x20000391
 8000d8c:	48000400 	.word	0x48000400
 8000d90:	20000390 	.word	0x20000390
 8000d94:	20000000 	.word	0x20000000
 8000d98:	20000030 	.word	0x20000030
 8000d9c:	00000000 	.word	0x00000000

08000da0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000da4:	b088      	sub	sp, #32
 8000da6:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000da8:	f000 fd80 	bl	80018ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dac:	f000 f9f4 	bl	8001198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000db0:	f000 fafe 	bl	80013b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000db4:	f000 fade 	bl	8001374 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000db8:	f000 faac 	bl	8001314 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000dbc:	f000 fa44 	bl	8001248 <MX_I2C1_Init>
  MX_TIM17_Init();
 8000dc0:	f000 fa82 	bl	80012c8 <MX_TIM17_Init>
    pADS = ADS1115_init(&hi2c1, ADS1115_ADR, configReg);
    ADS1115_updateConfig(pADS, configReg);
    ADS1115_setConversionReadyPin(pADS);

*/
  LED_ON;
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	2108      	movs	r1, #8
 8000dc8:	4814      	ldr	r0, [pc, #80]	; (8000e1c <main+0x7c>)
 8000dca:	f001 f987 	bl	80020dc <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim17);
 8000dce:	4814      	ldr	r0, [pc, #80]	; (8000e20 <main+0x80>)
 8000dd0:	f003 fb32 	bl	8004438 <HAL_TIM_Base_Start_IT>
  while (1)
  {



	  for(int i=0; i< 4; i++){
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	e078      	b.n	8000ecc <main+0x12c>
	  			ADSwrite[0] = 0x01;
 8000dda:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <main+0x84>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	701a      	strb	r2, [r3, #0]
	  			ADSwrite[1] = 0x00;
 8000de0:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <main+0x84>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	705a      	strb	r2, [r3, #1]
	  			switch(i){
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2b03      	cmp	r3, #3
 8000dea:	d821      	bhi.n	8000e30 <main+0x90>
 8000dec:	a201      	add	r2, pc, #4	; (adr r2, 8000df4 <main+0x54>)
 8000dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000df2:	bf00      	nop
 8000df4:	08000e05 	.word	0x08000e05
 8000df8:	08000e0d 	.word	0x08000e0d
 8000dfc:	08000e15 	.word	0x08000e15
 8000e00:	08000e29 	.word	0x08000e29
	  				case(0):
	  					ADSwrite[1] = 0xC1; //11000001
 8000e04:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <main+0x84>)
 8000e06:	22c1      	movs	r2, #193	; 0xc1
 8000e08:	705a      	strb	r2, [r3, #1]
	  				break;
 8000e0a:	e011      	b.n	8000e30 <main+0x90>
	  				case(1):
	  					ADSwrite[1] = 0xD1; //11010001
 8000e0c:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <main+0x84>)
 8000e0e:	22d1      	movs	r2, #209	; 0xd1
 8000e10:	705a      	strb	r2, [r3, #1]
	  				break;
 8000e12:	e00d      	b.n	8000e30 <main+0x90>
	  				case(2):
	  					ADSwrite[1] = 0xE1;
 8000e14:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <main+0x84>)
 8000e16:	22e1      	movs	r2, #225	; 0xe1
 8000e18:	705a      	strb	r2, [r3, #1]
	  				break;
 8000e1a:	e009      	b.n	8000e30 <main+0x90>
 8000e1c:	48000400 	.word	0x48000400
 8000e20:	20000278 	.word	0x20000278
 8000e24:	200003e0 	.word	0x200003e0
	  				case(3):
	  					ADSwrite[1] = 0xF1;
 8000e28:	4bbb      	ldr	r3, [pc, #748]	; (8001118 <main+0x378>)
 8000e2a:	22f1      	movs	r2, #241	; 0xf1
 8000e2c:	705a      	strb	r2, [r3, #1]
	  				break;
 8000e2e:	bf00      	nop
	  			}
	  		//	LED_ON;
	  			ADSwrite[2] = 0x83; //10000011 LSB
 8000e30:	4bb9      	ldr	r3, [pc, #740]	; (8001118 <main+0x378>)
 8000e32:	2283      	movs	r2, #131	; 0x83
 8000e34:	709a      	strb	r2, [r3, #2]

	  			HAL_I2C_Master_Transmit(&hi2c1, ADS1115_ADDRESS << 1, ADSwrite, 3, 100);
 8000e36:	2364      	movs	r3, #100	; 0x64
 8000e38:	9300      	str	r3, [sp, #0]
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	4ab6      	ldr	r2, [pc, #728]	; (8001118 <main+0x378>)
 8000e3e:	2190      	movs	r1, #144	; 0x90
 8000e40:	48b6      	ldr	r0, [pc, #728]	; (800111c <main+0x37c>)
 8000e42:	f001 f9f3 	bl	800222c <HAL_I2C_Master_Transmit>
	  			ADSwrite[0] = 0x00;
 8000e46:	4bb4      	ldr	r3, [pc, #720]	; (8001118 <main+0x378>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	701a      	strb	r2, [r3, #0]
	  			HAL_I2C_Master_Transmit(&hi2c1, ADS1115_ADDRESS << 1 , ADSwrite, 1 ,100);
 8000e4c:	2364      	movs	r3, #100	; 0x64
 8000e4e:	9300      	str	r3, [sp, #0]
 8000e50:	2301      	movs	r3, #1
 8000e52:	4ab1      	ldr	r2, [pc, #708]	; (8001118 <main+0x378>)
 8000e54:	2190      	movs	r1, #144	; 0x90
 8000e56:	48b1      	ldr	r0, [pc, #708]	; (800111c <main+0x37c>)
 8000e58:	f001 f9e8 	bl	800222c <HAL_I2C_Master_Transmit>
	  			HAL_Delay(20);
 8000e5c:	2014      	movs	r0, #20
 8000e5e:	f000 fd8b 	bl	8001978 <HAL_Delay>

	  			HAL_I2C_Master_Receive(&hi2c1, ADS1115_ADDRESS <<1, ADSwrite, 2, 100);
 8000e62:	2364      	movs	r3, #100	; 0x64
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	2302      	movs	r3, #2
 8000e68:	4aab      	ldr	r2, [pc, #684]	; (8001118 <main+0x378>)
 8000e6a:	2190      	movs	r1, #144	; 0x90
 8000e6c:	48ab      	ldr	r0, [pc, #684]	; (800111c <main+0x37c>)
 8000e6e:	f001 fad1 	bl	8002414 <HAL_I2C_Master_Receive>
	  			reading = (ADSwrite[0] << 8 | ADSwrite[1] );
 8000e72:	4ba9      	ldr	r3, [pc, #676]	; (8001118 <main+0x378>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	021b      	lsls	r3, r3, #8
 8000e78:	b21a      	sxth	r2, r3
 8000e7a:	4ba7      	ldr	r3, [pc, #668]	; (8001118 <main+0x378>)
 8000e7c:	785b      	ldrb	r3, [r3, #1]
 8000e7e:	b21b      	sxth	r3, r3
 8000e80:	4313      	orrs	r3, r2
 8000e82:	b21a      	sxth	r2, r3
 8000e84:	4ba6      	ldr	r3, [pc, #664]	; (8001120 <main+0x380>)
 8000e86:	801a      	strh	r2, [r3, #0]
	  			if(reading < 0) {
 8000e88:	4ba5      	ldr	r3, [pc, #660]	; (8001120 <main+0x380>)
 8000e8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	da02      	bge.n	8000e98 <main+0xf8>
	  				reading = 0;
 8000e92:	4ba3      	ldr	r3, [pc, #652]	; (8001120 <main+0x380>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	801a      	strh	r2, [r3, #0]
	  			}
	  			ADSwrite[0] = 0x00;
 8000e98:	4b9f      	ldr	r3, [pc, #636]	; (8001118 <main+0x378>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	701a      	strb	r2, [r3, #0]
	  			ADSwrite[1] = 0x00;
 8000e9e:	4b9e      	ldr	r3, [pc, #632]	; (8001118 <main+0x378>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	705a      	strb	r2, [r3, #1]
	  			voltage[i] = reading * voltageConv;
 8000ea4:	4b9e      	ldr	r3, [pc, #632]	; (8001120 <main+0x380>)
 8000ea6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eaa:	ee07 3a90 	vmov	s15, r3
 8000eae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eb2:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8001124 <main+0x384>
 8000eb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000eba:	4a9b      	ldr	r2, [pc, #620]	; (8001128 <main+0x388>)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	4413      	add	r3, r2
 8000ec2:	edc3 7a00 	vstr	s15, [r3]
	  for(int i=0; i< 4; i++){
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2b03      	cmp	r3, #3
 8000ed0:	dd83      	ble.n	8000dda <main+0x3a>

	  		}
	  sprintf(str, "\n\r Inp_1-%.3f,Inp_2-%.3f,Inp_3-%.3f,Inp_4-%.3f \n\r",voltage[0],voltage[1],voltage[2],voltage[3]);
 8000ed2:	4b95      	ldr	r3, [pc, #596]	; (8001128 <main+0x388>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff fb36 	bl	8000548 <__aeabi_f2d>
 8000edc:	4682      	mov	sl, r0
 8000ede:	468b      	mov	fp, r1
 8000ee0:	4b91      	ldr	r3, [pc, #580]	; (8001128 <main+0x388>)
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fb2f 	bl	8000548 <__aeabi_f2d>
 8000eea:	4604      	mov	r4, r0
 8000eec:	460d      	mov	r5, r1
 8000eee:	4b8e      	ldr	r3, [pc, #568]	; (8001128 <main+0x388>)
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff fb28 	bl	8000548 <__aeabi_f2d>
 8000ef8:	4680      	mov	r8, r0
 8000efa:	4689      	mov	r9, r1
 8000efc:	4b8a      	ldr	r3, [pc, #552]	; (8001128 <main+0x388>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fb21 	bl	8000548 <__aeabi_f2d>
 8000f06:	4602      	mov	r2, r0
 8000f08:	460b      	mov	r3, r1
 8000f0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000f0e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8000f12:	e9cd 4500 	strd	r4, r5, [sp]
 8000f16:	4652      	mov	r2, sl
 8000f18:	465b      	mov	r3, fp
 8000f1a:	4984      	ldr	r1, [pc, #528]	; (800112c <main+0x38c>)
 8000f1c:	4884      	ldr	r0, [pc, #528]	; (8001130 <main+0x390>)
 8000f1e:	f004 feb3 	bl	8005c88 <siprintf>

	  	 //HAL_UART_Transmit_DMA(&huart2, str,54);
	  	 HAL_UART_Transmit(&huart2, str, 53, 100);
 8000f22:	2364      	movs	r3, #100	; 0x64
 8000f24:	2235      	movs	r2, #53	; 0x35
 8000f26:	4982      	ldr	r1, [pc, #520]	; (8001130 <main+0x390>)
 8000f28:	4882      	ldr	r0, [pc, #520]	; (8001134 <main+0x394>)
 8000f2a:	f003 fd0d 	bl	8004948 <HAL_UART_Transmit>

	  	v_1=(voltage[2])*2.042;
 8000f2e:	4b7e      	ldr	r3, [pc, #504]	; (8001128 <main+0x388>)
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff fb08 	bl	8000548 <__aeabi_f2d>
 8000f38:	a36d      	add	r3, pc, #436	; (adr r3, 80010f0 <main+0x350>)
 8000f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3e:	f7ff fb5b 	bl	80005f8 <__aeabi_dmul>
 8000f42:	4602      	mov	r2, r0
 8000f44:	460b      	mov	r3, r1
 8000f46:	4610      	mov	r0, r2
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f7ff fe2d 	bl	8000ba8 <__aeabi_d2f>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	4a79      	ldr	r2, [pc, #484]	; (8001138 <main+0x398>)
 8000f52:	6013      	str	r3, [r2, #0]
	  	v_2=(voltage[1]*3.2)-v_1;
 8000f54:	4b74      	ldr	r3, [pc, #464]	; (8001128 <main+0x388>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff faf5 	bl	8000548 <__aeabi_f2d>
 8000f5e:	a366      	add	r3, pc, #408	; (adr r3, 80010f8 <main+0x358>)
 8000f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f64:	f7ff fb48 	bl	80005f8 <__aeabi_dmul>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	4614      	mov	r4, r2
 8000f6e:	461d      	mov	r5, r3
 8000f70:	4b71      	ldr	r3, [pc, #452]	; (8001138 <main+0x398>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fae7 	bl	8000548 <__aeabi_f2d>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	4620      	mov	r0, r4
 8000f80:	4629      	mov	r1, r5
 8000f82:	f7ff f981 	bl	8000288 <__aeabi_dsub>
 8000f86:	4602      	mov	r2, r0
 8000f88:	460b      	mov	r3, r1
 8000f8a:	4610      	mov	r0, r2
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f7ff fe0b 	bl	8000ba8 <__aeabi_d2f>
 8000f92:	4603      	mov	r3, r0
 8000f94:	4a69      	ldr	r2, [pc, #420]	; (800113c <main+0x39c>)
 8000f96:	6013      	str	r3, [r2, #0]
	  	v_3=(voltage[0]*5.38)-v_1-v_2;
 8000f98:	4b63      	ldr	r3, [pc, #396]	; (8001128 <main+0x388>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fad3 	bl	8000548 <__aeabi_f2d>
 8000fa2:	a357      	add	r3, pc, #348	; (adr r3, 8001100 <main+0x360>)
 8000fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa8:	f7ff fb26 	bl	80005f8 <__aeabi_dmul>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	4614      	mov	r4, r2
 8000fb2:	461d      	mov	r5, r3
 8000fb4:	4b60      	ldr	r3, [pc, #384]	; (8001138 <main+0x398>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff fac5 	bl	8000548 <__aeabi_f2d>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	4620      	mov	r0, r4
 8000fc4:	4629      	mov	r1, r5
 8000fc6:	f7ff f95f 	bl	8000288 <__aeabi_dsub>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	460b      	mov	r3, r1
 8000fce:	4614      	mov	r4, r2
 8000fd0:	461d      	mov	r5, r3
 8000fd2:	4b5a      	ldr	r3, [pc, #360]	; (800113c <main+0x39c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff fab6 	bl	8000548 <__aeabi_f2d>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	4620      	mov	r0, r4
 8000fe2:	4629      	mov	r1, r5
 8000fe4:	f7ff f950 	bl	8000288 <__aeabi_dsub>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	460b      	mov	r3, r1
 8000fec:	4610      	mov	r0, r2
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f7ff fdda 	bl	8000ba8 <__aeabi_d2f>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	4a52      	ldr	r2, [pc, #328]	; (8001140 <main+0x3a0>)
 8000ff8:	6013      	str	r3, [r2, #0]
	  	if(voltage[3]>2.444){current=(voltage[3]-2.444)/0.185;}
 8000ffa:	4b4b      	ldr	r3, [pc, #300]	; (8001128 <main+0x388>)
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff faa2 	bl	8000548 <__aeabi_f2d>
 8001004:	a340      	add	r3, pc, #256	; (adr r3, 8001108 <main+0x368>)
 8001006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100a:	f7ff fd85 	bl	8000b18 <__aeabi_dcmpgt>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d01b      	beq.n	800104c <main+0x2ac>
 8001014:	4b44      	ldr	r3, [pc, #272]	; (8001128 <main+0x388>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fa95 	bl	8000548 <__aeabi_f2d>
 800101e:	a33a      	add	r3, pc, #232	; (adr r3, 8001108 <main+0x368>)
 8001020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001024:	f7ff f930 	bl	8000288 <__aeabi_dsub>
 8001028:	4602      	mov	r2, r0
 800102a:	460b      	mov	r3, r1
 800102c:	4610      	mov	r0, r2
 800102e:	4619      	mov	r1, r3
 8001030:	a337      	add	r3, pc, #220	; (adr r3, 8001110 <main+0x370>)
 8001032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001036:	f7ff fc09 	bl	800084c <__aeabi_ddiv>
 800103a:	4602      	mov	r2, r0
 800103c:	460b      	mov	r3, r1
 800103e:	4610      	mov	r0, r2
 8001040:	4619      	mov	r1, r3
 8001042:	f7ff fdb1 	bl	8000ba8 <__aeabi_d2f>
 8001046:	4603      	mov	r3, r0
 8001048:	4a3e      	ldr	r2, [pc, #248]	; (8001144 <main+0x3a4>)
 800104a:	6013      	str	r3, [r2, #0]
	  	if(voltage[3]<2.444){current=(2.444-voltage[3])/0.185;}
 800104c:	4b36      	ldr	r3, [pc, #216]	; (8001128 <main+0x388>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fa79 	bl	8000548 <__aeabi_f2d>
 8001056:	a32c      	add	r3, pc, #176	; (adr r3, 8001108 <main+0x368>)
 8001058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105c:	f7ff fd3e 	bl	8000adc <__aeabi_dcmplt>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d01d      	beq.n	80010a2 <main+0x302>
 8001066:	4b30      	ldr	r3, [pc, #192]	; (8001128 <main+0x388>)
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fa6c 	bl	8000548 <__aeabi_f2d>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	a124      	add	r1, pc, #144	; (adr r1, 8001108 <main+0x368>)
 8001076:	e9d1 0100 	ldrd	r0, r1, [r1]
 800107a:	f7ff f905 	bl	8000288 <__aeabi_dsub>
 800107e:	4602      	mov	r2, r0
 8001080:	460b      	mov	r3, r1
 8001082:	4610      	mov	r0, r2
 8001084:	4619      	mov	r1, r3
 8001086:	a322      	add	r3, pc, #136	; (adr r3, 8001110 <main+0x370>)
 8001088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108c:	f7ff fbde 	bl	800084c <__aeabi_ddiv>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	4610      	mov	r0, r2
 8001096:	4619      	mov	r1, r3
 8001098:	f7ff fd86 	bl	8000ba8 <__aeabi_d2f>
 800109c:	4603      	mov	r3, r0
 800109e:	4a29      	ldr	r2, [pc, #164]	; (8001144 <main+0x3a4>)
 80010a0:	6013      	str	r3, [r2, #0]


	  	  sprintf(str, "\n\r Bat_1-%.3f,Bat_2-%.3f,Bat_3-%.3f,Curr-%.3f \n\r",v_1,v_2,v_3,current);
 80010a2:	4b25      	ldr	r3, [pc, #148]	; (8001138 <main+0x398>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fa4e 	bl	8000548 <__aeabi_f2d>
 80010ac:	4682      	mov	sl, r0
 80010ae:	468b      	mov	fp, r1
 80010b0:	4b22      	ldr	r3, [pc, #136]	; (800113c <main+0x39c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff fa47 	bl	8000548 <__aeabi_f2d>
 80010ba:	4604      	mov	r4, r0
 80010bc:	460d      	mov	r5, r1
 80010be:	4b20      	ldr	r3, [pc, #128]	; (8001140 <main+0x3a0>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fa40 	bl	8000548 <__aeabi_f2d>
 80010c8:	4680      	mov	r8, r0
 80010ca:	4689      	mov	r9, r1
 80010cc:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <main+0x3a4>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff fa39 	bl	8000548 <__aeabi_f2d>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80010de:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80010e2:	e9cd 4500 	strd	r4, r5, [sp]
 80010e6:	4652      	mov	r2, sl
 80010e8:	e02e      	b.n	8001148 <main+0x3a8>
 80010ea:	bf00      	nop
 80010ec:	f3af 8000 	nop.w
 80010f0:	189374bc 	.word	0x189374bc
 80010f4:	40005604 	.word	0x40005604
 80010f8:	9999999a 	.word	0x9999999a
 80010fc:	40099999 	.word	0x40099999
 8001100:	b851eb85 	.word	0xb851eb85
 8001104:	4015851e 	.word	0x4015851e
 8001108:	df3b645a 	.word	0xdf3b645a
 800110c:	40038d4f 	.word	0x40038d4f
 8001110:	7ae147ae 	.word	0x7ae147ae
 8001114:	3fc7ae14 	.word	0x3fc7ae14
 8001118:	200003e0 	.word	0x200003e0
 800111c:	20000224 	.word	0x20000224
 8001120:	200003e6 	.word	0x200003e6
 8001124:	3943a5e3 	.word	0x3943a5e3
 8001128:	200003e8 	.word	0x200003e8
 800112c:	08007df0 	.word	0x08007df0
 8001130:	20000394 	.word	0x20000394
 8001134:	200002c4 	.word	0x200002c4
 8001138:	200003d0 	.word	0x200003d0
 800113c:	200003d4 	.word	0x200003d4
 8001140:	200003d8 	.word	0x200003d8
 8001144:	200003dc 	.word	0x200003dc
 8001148:	465b      	mov	r3, fp
 800114a:	490f      	ldr	r1, [pc, #60]	; (8001188 <main+0x3e8>)
 800114c:	480f      	ldr	r0, [pc, #60]	; (800118c <main+0x3ec>)
 800114e:	f004 fd9b 	bl	8005c88 <siprintf>
	  	HAL_UART_Transmit(&huart2, str, 53, 100);
 8001152:	2364      	movs	r3, #100	; 0x64
 8001154:	2235      	movs	r2, #53	; 0x35
 8001156:	490d      	ldr	r1, [pc, #52]	; (800118c <main+0x3ec>)
 8001158:	480d      	ldr	r0, [pc, #52]	; (8001190 <main+0x3f0>)
 800115a:	f003 fbf5 	bl	8004948 <HAL_UART_Transmit>

	  //	LED_OFF;
	  	voltage[0]=0;
 800115e:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <main+0x3f4>)
 8001160:	f04f 0200 	mov.w	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
	  	voltage[1]=0;
 8001166:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <main+0x3f4>)
 8001168:	f04f 0200 	mov.w	r2, #0
 800116c:	605a      	str	r2, [r3, #4]
	  	voltage[2]=0;
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <main+0x3f4>)
 8001170:	f04f 0200 	mov.w	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
	  	voltage[3]=0;
 8001176:	4b07      	ldr	r3, [pc, #28]	; (8001194 <main+0x3f4>)
 8001178:	f04f 0200 	mov.w	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
	  	HAL_Delay(500);
 800117e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001182:	f000 fbf9 	bl	8001978 <HAL_Delay>
	  for(int i=0; i< 4; i++){
 8001186:	e625      	b.n	8000dd4 <main+0x34>
 8001188:	08007e24 	.word	0x08007e24
 800118c:	20000394 	.word	0x20000394
 8001190:	200002c4 	.word	0x200002c4
 8001194:	200003e8 	.word	0x200003e8

08001198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b096      	sub	sp, #88	; 0x58
 800119c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011a2:	2228      	movs	r2, #40	; 0x28
 80011a4:	2100      	movs	r1, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f004 fdd1 	bl	8005d4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
 80011c8:	611a      	str	r2, [r3, #16]
 80011ca:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011cc:	2302      	movs	r3, #2
 80011ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011d0:	2301      	movs	r3, #1
 80011d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011d4:	2310      	movs	r3, #16
 80011d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d8:	2302      	movs	r3, #2
 80011da:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011dc:	2300      	movs	r3, #0
 80011de:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80011e0:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80011e4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011ea:	4618      	mov	r0, r3
 80011ec:	f001 fd32 	bl	8002c54 <HAL_RCC_OscConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <SystemClock_Config+0x62>
  {
    Error_Handler();
 80011f6:	f000 f919 	bl	800142c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fa:	230f      	movs	r3, #15
 80011fc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011fe:	2302      	movs	r3, #2
 8001200:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001202:	2300      	movs	r3, #0
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001206:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800120a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800120c:	2300      	movs	r3, #0
 800120e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001210:	f107 031c 	add.w	r3, r7, #28
 8001214:	2102      	movs	r1, #2
 8001216:	4618      	mov	r0, r3
 8001218:	f002 fd5a 	bl	8003cd0 <HAL_RCC_ClockConfig>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001222:	f000 f903 	bl	800142c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001226:	2320      	movs	r3, #32
 8001228:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800122a:	2300      	movs	r3, #0
 800122c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	4618      	mov	r0, r3
 8001232:	f002 ff83 	bl	800413c <HAL_RCCEx_PeriphCLKConfig>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800123c:	f000 f8f6 	bl	800142c <Error_Handler>
  }
}
 8001240:	bf00      	nop
 8001242:	3758      	adds	r7, #88	; 0x58
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800124c:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <MX_I2C1_Init+0x74>)
 800124e:	4a1c      	ldr	r2, [pc, #112]	; (80012c0 <MX_I2C1_Init+0x78>)
 8001250:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001252:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <MX_I2C1_Init+0x74>)
 8001254:	4a1b      	ldr	r2, [pc, #108]	; (80012c4 <MX_I2C1_Init+0x7c>)
 8001256:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001258:	4b18      	ldr	r3, [pc, #96]	; (80012bc <MX_I2C1_Init+0x74>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800125e:	4b17      	ldr	r3, [pc, #92]	; (80012bc <MX_I2C1_Init+0x74>)
 8001260:	2201      	movs	r2, #1
 8001262:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001264:	4b15      	ldr	r3, [pc, #84]	; (80012bc <MX_I2C1_Init+0x74>)
 8001266:	2200      	movs	r2, #0
 8001268:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800126a:	4b14      	ldr	r3, [pc, #80]	; (80012bc <MX_I2C1_Init+0x74>)
 800126c:	2200      	movs	r2, #0
 800126e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <MX_I2C1_Init+0x74>)
 8001272:	2200      	movs	r2, #0
 8001274:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001276:	4b11      	ldr	r3, [pc, #68]	; (80012bc <MX_I2C1_Init+0x74>)
 8001278:	2200      	movs	r2, #0
 800127a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800127c:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <MX_I2C1_Init+0x74>)
 800127e:	2200      	movs	r2, #0
 8001280:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001282:	480e      	ldr	r0, [pc, #56]	; (80012bc <MX_I2C1_Init+0x74>)
 8001284:	f000 ff42 	bl	800210c <HAL_I2C_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800128e:	f000 f8cd 	bl	800142c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001292:	2100      	movs	r1, #0
 8001294:	4809      	ldr	r0, [pc, #36]	; (80012bc <MX_I2C1_Init+0x74>)
 8001296:	f001 fc45 	bl	8002b24 <HAL_I2CEx_ConfigAnalogFilter>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012a0:	f000 f8c4 	bl	800142c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012a4:	2100      	movs	r1, #0
 80012a6:	4805      	ldr	r0, [pc, #20]	; (80012bc <MX_I2C1_Init+0x74>)
 80012a8:	f001 fc87 	bl	8002bba <HAL_I2CEx_ConfigDigitalFilter>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012b2:	f000 f8bb 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000224 	.word	0x20000224
 80012c0:	40005400 	.word	0x40005400
 80012c4:	2000090e 	.word	0x2000090e

080012c8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80012cc:	4b0f      	ldr	r3, [pc, #60]	; (800130c <MX_TIM17_Init+0x44>)
 80012ce:	4a10      	ldr	r2, [pc, #64]	; (8001310 <MX_TIM17_Init+0x48>)
 80012d0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 99;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <MX_TIM17_Init+0x44>)
 80012d4:	2263      	movs	r2, #99	; 0x63
 80012d6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <MX_TIM17_Init+0x44>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 40000;
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <MX_TIM17_Init+0x44>)
 80012e0:	f649 4240 	movw	r2, #40000	; 0x9c40
 80012e4:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e6:	4b09      	ldr	r3, [pc, #36]	; (800130c <MX_TIM17_Init+0x44>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80012ec:	4b07      	ldr	r3, [pc, #28]	; (800130c <MX_TIM17_Init+0x44>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <MX_TIM17_Init+0x44>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80012f8:	4804      	ldr	r0, [pc, #16]	; (800130c <MX_TIM17_Init+0x44>)
 80012fa:	f003 f845 	bl	8004388 <HAL_TIM_Base_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8001304:	f000 f892 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000278 	.word	0x20000278
 8001310:	40014800 	.word	0x40014800

08001314 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001318:	4b14      	ldr	r3, [pc, #80]	; (800136c <MX_USART2_UART_Init+0x58>)
 800131a:	4a15      	ldr	r2, [pc, #84]	; (8001370 <MX_USART2_UART_Init+0x5c>)
 800131c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800131e:	4b13      	ldr	r3, [pc, #76]	; (800136c <MX_USART2_UART_Init+0x58>)
 8001320:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001324:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001326:	4b11      	ldr	r3, [pc, #68]	; (800136c <MX_USART2_UART_Init+0x58>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800132c:	4b0f      	ldr	r3, [pc, #60]	; (800136c <MX_USART2_UART_Init+0x58>)
 800132e:	2200      	movs	r2, #0
 8001330:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <MX_USART2_UART_Init+0x58>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <MX_USART2_UART_Init+0x58>)
 800133a:	220c      	movs	r2, #12
 800133c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <MX_USART2_UART_Init+0x58>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001344:	4b09      	ldr	r3, [pc, #36]	; (800136c <MX_USART2_UART_Init+0x58>)
 8001346:	2200      	movs	r2, #0
 8001348:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800134a:	4b08      	ldr	r3, [pc, #32]	; (800136c <MX_USART2_UART_Init+0x58>)
 800134c:	2200      	movs	r2, #0
 800134e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <MX_USART2_UART_Init+0x58>)
 8001352:	2200      	movs	r2, #0
 8001354:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001356:	4805      	ldr	r0, [pc, #20]	; (800136c <MX_USART2_UART_Init+0x58>)
 8001358:	f003 faa8 	bl	80048ac <HAL_UART_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001362:	f000 f863 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200002c4 	.word	0x200002c4
 8001370:	40004400 	.word	0x40004400

08001374 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800137a:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <MX_DMA_Init+0x38>)
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	4a0b      	ldr	r2, [pc, #44]	; (80013ac <MX_DMA_Init+0x38>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6153      	str	r3, [r2, #20]
 8001386:	4b09      	ldr	r3, [pc, #36]	; (80013ac <MX_DMA_Init+0x38>)
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001392:	2200      	movs	r2, #0
 8001394:	2100      	movs	r1, #0
 8001396:	2011      	movs	r0, #17
 8001398:	f000 fbed 	bl	8001b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800139c:	2011      	movs	r0, #17
 800139e:	f000 fc06 	bl	8001bae <HAL_NVIC_EnableIRQ>

}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40021000 	.word	0x40021000

080013b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b6:	f107 030c 	add.w	r3, r7, #12
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
 80013c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c6:	4b17      	ldr	r3, [pc, #92]	; (8001424 <MX_GPIO_Init+0x74>)
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	4a16      	ldr	r2, [pc, #88]	; (8001424 <MX_GPIO_Init+0x74>)
 80013cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d0:	6153      	str	r3, [r2, #20]
 80013d2:	4b14      	ldr	r3, [pc, #80]	; (8001424 <MX_GPIO_Init+0x74>)
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013de:	4b11      	ldr	r3, [pc, #68]	; (8001424 <MX_GPIO_Init+0x74>)
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	4a10      	ldr	r2, [pc, #64]	; (8001424 <MX_GPIO_Init+0x74>)
 80013e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013e8:	6153      	str	r3, [r2, #20]
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <MX_GPIO_Init+0x74>)
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2108      	movs	r1, #8
 80013fa:	480b      	ldr	r0, [pc, #44]	; (8001428 <MX_GPIO_Init+0x78>)
 80013fc:	f000 fe6e 	bl	80020dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001400:	2308      	movs	r3, #8
 8001402:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001404:	2301      	movs	r3, #1
 8001406:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140c:	2300      	movs	r3, #0
 800140e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001410:	f107 030c 	add.w	r3, r7, #12
 8001414:	4619      	mov	r1, r3
 8001416:	4804      	ldr	r0, [pc, #16]	; (8001428 <MX_GPIO_Init+0x78>)
 8001418:	f000 fcee 	bl	8001df8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800141c:	bf00      	nop
 800141e:	3720      	adds	r7, #32
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40021000 	.word	0x40021000
 8001428:	48000400 	.word	0x48000400

0800142c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001430:	b672      	cpsid	i
}
 8001432:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001434:	e7fe      	b.n	8001434 <Error_Handler+0x8>
	...

08001438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143e:	4b0f      	ldr	r3, [pc, #60]	; (800147c <HAL_MspInit+0x44>)
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	4a0e      	ldr	r2, [pc, #56]	; (800147c <HAL_MspInit+0x44>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	6193      	str	r3, [r2, #24]
 800144a:	4b0c      	ldr	r3, [pc, #48]	; (800147c <HAL_MspInit+0x44>)
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <HAL_MspInit+0x44>)
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	4a08      	ldr	r2, [pc, #32]	; (800147c <HAL_MspInit+0x44>)
 800145c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001460:	61d3      	str	r3, [r2, #28]
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_MspInit+0x44>)
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146a:	603b      	str	r3, [r7, #0]
 800146c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	40021000 	.word	0x40021000

08001480 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08a      	sub	sp, #40	; 0x28
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a17      	ldr	r2, [pc, #92]	; (80014fc <HAL_I2C_MspInit+0x7c>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d127      	bne.n	80014f2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a2:	4b17      	ldr	r3, [pc, #92]	; (8001500 <HAL_I2C_MspInit+0x80>)
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	4a16      	ldr	r2, [pc, #88]	; (8001500 <HAL_I2C_MspInit+0x80>)
 80014a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014ac:	6153      	str	r3, [r2, #20]
 80014ae:	4b14      	ldr	r3, [pc, #80]	; (8001500 <HAL_I2C_MspInit+0x80>)
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014ba:	23c0      	movs	r3, #192	; 0xc0
 80014bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014be:	2312      	movs	r3, #18
 80014c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014c6:	2303      	movs	r3, #3
 80014c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014ca:	2304      	movs	r3, #4
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	4619      	mov	r1, r3
 80014d4:	480b      	ldr	r0, [pc, #44]	; (8001504 <HAL_I2C_MspInit+0x84>)
 80014d6:	f000 fc8f 	bl	8001df8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <HAL_I2C_MspInit+0x80>)
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	4a08      	ldr	r2, [pc, #32]	; (8001500 <HAL_I2C_MspInit+0x80>)
 80014e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014e4:	61d3      	str	r3, [r2, #28]
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <HAL_I2C_MspInit+0x80>)
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014f2:	bf00      	nop
 80014f4:	3728      	adds	r7, #40	; 0x28
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40005400 	.word	0x40005400
 8001500:	40021000 	.word	0x40021000
 8001504:	48000400 	.word	0x48000400

08001508 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a0d      	ldr	r2, [pc, #52]	; (800154c <HAL_TIM_Base_MspInit+0x44>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d113      	bne.n	8001542 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 800151a:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <HAL_TIM_Base_MspInit+0x48>)
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	4a0c      	ldr	r2, [pc, #48]	; (8001550 <HAL_TIM_Base_MspInit+0x48>)
 8001520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001524:	6193      	str	r3, [r2, #24]
 8001526:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <HAL_TIM_Base_MspInit+0x48>)
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	2100      	movs	r1, #0
 8001536:	201a      	movs	r0, #26
 8001538:	f000 fb1d 	bl	8001b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800153c:	201a      	movs	r0, #26
 800153e:	f000 fb36 	bl	8001bae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001542:	bf00      	nop
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40014800 	.word	0x40014800
 8001550:	40021000 	.word	0x40021000

08001554 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	; 0x28
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a2a      	ldr	r2, [pc, #168]	; (800161c <HAL_UART_MspInit+0xc8>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d14e      	bne.n	8001614 <HAL_UART_MspInit+0xc0>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001576:	4b2a      	ldr	r3, [pc, #168]	; (8001620 <HAL_UART_MspInit+0xcc>)
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	4a29      	ldr	r2, [pc, #164]	; (8001620 <HAL_UART_MspInit+0xcc>)
 800157c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001580:	61d3      	str	r3, [r2, #28]
 8001582:	4b27      	ldr	r3, [pc, #156]	; (8001620 <HAL_UART_MspInit+0xcc>)
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158e:	4b24      	ldr	r3, [pc, #144]	; (8001620 <HAL_UART_MspInit+0xcc>)
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	4a23      	ldr	r2, [pc, #140]	; (8001620 <HAL_UART_MspInit+0xcc>)
 8001594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001598:	6153      	str	r3, [r2, #20]
 800159a:	4b21      	ldr	r3, [pc, #132]	; (8001620 <HAL_UART_MspInit+0xcc>)
 800159c:	695b      	ldr	r3, [r3, #20]
 800159e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80015a6:	230c      	movs	r3, #12
 80015a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015aa:	2302      	movs	r3, #2
 80015ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015b2:	2303      	movs	r3, #3
 80015b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015b6:	2307      	movs	r3, #7
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	4619      	mov	r1, r3
 80015c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015c4:	f000 fc18 	bl	8001df8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80015c8:	4b16      	ldr	r3, [pc, #88]	; (8001624 <HAL_UART_MspInit+0xd0>)
 80015ca:	4a17      	ldr	r2, [pc, #92]	; (8001628 <HAL_UART_MspInit+0xd4>)
 80015cc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015ce:	4b15      	ldr	r3, [pc, #84]	; (8001624 <HAL_UART_MspInit+0xd0>)
 80015d0:	2210      	movs	r2, #16
 80015d2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015d4:	4b13      	ldr	r3, [pc, #76]	; (8001624 <HAL_UART_MspInit+0xd0>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015da:	4b12      	ldr	r3, [pc, #72]	; (8001624 <HAL_UART_MspInit+0xd0>)
 80015dc:	2280      	movs	r2, #128	; 0x80
 80015de:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015e0:	4b10      	ldr	r3, [pc, #64]	; (8001624 <HAL_UART_MspInit+0xd0>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015e6:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <HAL_UART_MspInit+0xd0>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80015ec:	4b0d      	ldr	r3, [pc, #52]	; (8001624 <HAL_UART_MspInit+0xd0>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015f2:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <HAL_UART_MspInit+0xd0>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80015f8:	480a      	ldr	r0, [pc, #40]	; (8001624 <HAL_UART_MspInit+0xd0>)
 80015fa:	f000 faf2 	bl	8001be2 <HAL_DMA_Init>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8001604:	f7ff ff12 	bl	800142c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a06      	ldr	r2, [pc, #24]	; (8001624 <HAL_UART_MspInit+0xd0>)
 800160c:	671a      	str	r2, [r3, #112]	; 0x70
 800160e:	4a05      	ldr	r2, [pc, #20]	; (8001624 <HAL_UART_MspInit+0xd0>)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001614:	bf00      	nop
 8001616:	3728      	adds	r7, #40	; 0x28
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40004400 	.word	0x40004400
 8001620:	40021000 	.word	0x40021000
 8001624:	2000034c 	.word	0x2000034c
 8001628:	40020080 	.word	0x40020080

0800162c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001630:	e7fe      	b.n	8001630 <NMI_Handler+0x4>

08001632 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001636:	e7fe      	b.n	8001636 <HardFault_Handler+0x4>

08001638 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800163c:	e7fe      	b.n	800163c <MemManage_Handler+0x4>

0800163e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001642:	e7fe      	b.n	8001642 <BusFault_Handler+0x4>

08001644 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001648:	e7fe      	b.n	8001648 <UsageFault_Handler+0x4>

0800164a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001678:	f000 f95e 	bl	8001938 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}

08001680 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001684:	4802      	ldr	r0, [pc, #8]	; (8001690 <DMA1_Channel7_IRQHandler+0x10>)
 8001686:	f000 faf3 	bl	8001c70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	2000034c 	.word	0x2000034c

08001694 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001698:	4802      	ldr	r0, [pc, #8]	; (80016a4 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800169a:	f002 ff29 	bl	80044f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000278 	.word	0x20000278

080016a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return 1;
 80016ac:	2301      	movs	r3, #1
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <_kill>:

int _kill(int pid, int sig)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016c2:	f004 fba7 	bl	8005e14 <__errno>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2216      	movs	r2, #22
 80016ca:	601a      	str	r2, [r3, #0]
  return -1;
 80016cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <_exit>:

void _exit (int status)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016e0:	f04f 31ff 	mov.w	r1, #4294967295
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff ffe7 	bl	80016b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016ea:	e7fe      	b.n	80016ea <_exit+0x12>

080016ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
 80016fc:	e00a      	b.n	8001714 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016fe:	f3af 8000 	nop.w
 8001702:	4601      	mov	r1, r0
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	1c5a      	adds	r2, r3, #1
 8001708:	60ba      	str	r2, [r7, #8]
 800170a:	b2ca      	uxtb	r2, r1
 800170c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	3301      	adds	r3, #1
 8001712:	617b      	str	r3, [r7, #20]
 8001714:	697a      	ldr	r2, [r7, #20]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	429a      	cmp	r2, r3
 800171a:	dbf0      	blt.n	80016fe <_read+0x12>
  }

  return len;
 800171c:	687b      	ldr	r3, [r7, #4]
}
 800171e:	4618      	mov	r0, r3
 8001720:	3718      	adds	r7, #24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b086      	sub	sp, #24
 800172a:	af00      	add	r7, sp, #0
 800172c:	60f8      	str	r0, [r7, #12]
 800172e:	60b9      	str	r1, [r7, #8]
 8001730:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
 8001736:	e009      	b.n	800174c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	1c5a      	adds	r2, r3, #1
 800173c:	60ba      	str	r2, [r7, #8]
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	3301      	adds	r3, #1
 800174a:	617b      	str	r3, [r7, #20]
 800174c:	697a      	ldr	r2, [r7, #20]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	429a      	cmp	r2, r3
 8001752:	dbf1      	blt.n	8001738 <_write+0x12>
  }
  return len;
 8001754:	687b      	ldr	r3, [r7, #4]
}
 8001756:	4618      	mov	r0, r3
 8001758:	3718      	adds	r7, #24
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <_close>:

int _close(int file)
{
 800175e:	b480      	push	{r7}
 8001760:	b083      	sub	sp, #12
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001766:	f04f 33ff 	mov.w	r3, #4294967295
}
 800176a:	4618      	mov	r0, r3
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
 800177e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001786:	605a      	str	r2, [r3, #4]
  return 0;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <_isatty>:

int _isatty(int file)
{
 8001796:	b480      	push	{r7}
 8001798:	b083      	sub	sp, #12
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800179e:	2301      	movs	r3, #1
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3714      	adds	r7, #20
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
	...

080017c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017d0:	4a14      	ldr	r2, [pc, #80]	; (8001824 <_sbrk+0x5c>)
 80017d2:	4b15      	ldr	r3, [pc, #84]	; (8001828 <_sbrk+0x60>)
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017dc:	4b13      	ldr	r3, [pc, #76]	; (800182c <_sbrk+0x64>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d102      	bne.n	80017ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017e4:	4b11      	ldr	r3, [pc, #68]	; (800182c <_sbrk+0x64>)
 80017e6:	4a12      	ldr	r2, [pc, #72]	; (8001830 <_sbrk+0x68>)
 80017e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ea:	4b10      	ldr	r3, [pc, #64]	; (800182c <_sbrk+0x64>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d207      	bcs.n	8001808 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017f8:	f004 fb0c 	bl	8005e14 <__errno>
 80017fc:	4603      	mov	r3, r0
 80017fe:	220c      	movs	r2, #12
 8001800:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001802:	f04f 33ff 	mov.w	r3, #4294967295
 8001806:	e009      	b.n	800181c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001808:	4b08      	ldr	r3, [pc, #32]	; (800182c <_sbrk+0x64>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800180e:	4b07      	ldr	r3, [pc, #28]	; (800182c <_sbrk+0x64>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4413      	add	r3, r2
 8001816:	4a05      	ldr	r2, [pc, #20]	; (800182c <_sbrk+0x64>)
 8001818:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800181a:	68fb      	ldr	r3, [r7, #12]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20003000 	.word	0x20003000
 8001828:	00000400 	.word	0x00000400
 800182c:	200003f8 	.word	0x200003f8
 8001830:	20000550 	.word	0x20000550

08001834 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <SystemInit+0x20>)
 800183a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800183e:	4a05      	ldr	r2, [pc, #20]	; (8001854 <SystemInit+0x20>)
 8001840:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001844:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001858:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001890 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800185c:	f7ff ffea 	bl	8001834 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001860:	480c      	ldr	r0, [pc, #48]	; (8001894 <LoopForever+0x6>)
  ldr r1, =_edata
 8001862:	490d      	ldr	r1, [pc, #52]	; (8001898 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001864:	4a0d      	ldr	r2, [pc, #52]	; (800189c <LoopForever+0xe>)
  movs r3, #0
 8001866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001868:	e002      	b.n	8001870 <LoopCopyDataInit>

0800186a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800186a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800186c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800186e:	3304      	adds	r3, #4

08001870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001874:	d3f9      	bcc.n	800186a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001876:	4a0a      	ldr	r2, [pc, #40]	; (80018a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001878:	4c0a      	ldr	r4, [pc, #40]	; (80018a4 <LoopForever+0x16>)
  movs r3, #0
 800187a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800187c:	e001      	b.n	8001882 <LoopFillZerobss>

0800187e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800187e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001880:	3204      	adds	r2, #4

08001882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001884:	d3fb      	bcc.n	800187e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001886:	f004 facb 	bl	8005e20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800188a:	f7ff fa89 	bl	8000da0 <main>

0800188e <LoopForever>:

LoopForever:
    b LoopForever
 800188e:	e7fe      	b.n	800188e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001890:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001894:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001898:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 800189c:	0800820c 	.word	0x0800820c
  ldr r2, =_sbss
 80018a0:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 80018a4:	2000054c 	.word	0x2000054c

080018a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018a8:	e7fe      	b.n	80018a8 <ADC1_2_IRQHandler>
	...

080018ac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <HAL_Init+0x28>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a07      	ldr	r2, [pc, #28]	; (80018d4 <HAL_Init+0x28>)
 80018b6:	f043 0310 	orr.w	r3, r3, #16
 80018ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018bc:	2003      	movs	r0, #3
 80018be:	f000 f94f 	bl	8001b60 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018c2:	2000      	movs	r0, #0
 80018c4:	f000 f808 	bl	80018d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018c8:	f7ff fdb6 	bl	8001438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40022000 	.word	0x40022000

080018d8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <HAL_InitTick+0x54>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_InitTick+0x58>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	4619      	mov	r1, r3
 80018ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80018f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f6:	4618      	mov	r0, r3
 80018f8:	f000 f967 	bl	8001bca <HAL_SYSTICK_Config>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e00e      	b.n	8001924 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b0f      	cmp	r3, #15
 800190a:	d80a      	bhi.n	8001922 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800190c:	2200      	movs	r2, #0
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	f04f 30ff 	mov.w	r0, #4294967295
 8001914:	f000 f92f 	bl	8001b76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001918:	4a06      	ldr	r2, [pc, #24]	; (8001934 <HAL_InitTick+0x5c>)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800191e:	2300      	movs	r3, #0
 8001920:	e000      	b.n	8001924 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
}
 8001924:	4618      	mov	r0, r3
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20000034 	.word	0x20000034
 8001930:	2000003c 	.word	0x2000003c
 8001934:	20000038 	.word	0x20000038

08001938 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <HAL_IncTick+0x20>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	461a      	mov	r2, r3
 8001942:	4b06      	ldr	r3, [pc, #24]	; (800195c <HAL_IncTick+0x24>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4413      	add	r3, r2
 8001948:	4a04      	ldr	r2, [pc, #16]	; (800195c <HAL_IncTick+0x24>)
 800194a:	6013      	str	r3, [r2, #0]
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	2000003c 	.word	0x2000003c
 800195c:	200003fc 	.word	0x200003fc

08001960 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return uwTick;  
 8001964:	4b03      	ldr	r3, [pc, #12]	; (8001974 <HAL_GetTick+0x14>)
 8001966:	681b      	ldr	r3, [r3, #0]
}
 8001968:	4618      	mov	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	200003fc 	.word	0x200003fc

08001978 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001980:	f7ff ffee 	bl	8001960 <HAL_GetTick>
 8001984:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001990:	d005      	beq.n	800199e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001992:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <HAL_Delay+0x44>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	461a      	mov	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4413      	add	r3, r2
 800199c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800199e:	bf00      	nop
 80019a0:	f7ff ffde 	bl	8001960 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d8f7      	bhi.n	80019a0 <HAL_Delay+0x28>
  {
  }
}
 80019b0:	bf00      	nop
 80019b2:	bf00      	nop
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	2000003c 	.word	0x2000003c

080019c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <__NVIC_SetPriorityGrouping+0x44>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019dc:	4013      	ands	r3, r2
 80019de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019f2:	4a04      	ldr	r2, [pc, #16]	; (8001a04 <__NVIC_SetPriorityGrouping+0x44>)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	60d3      	str	r3, [r2, #12]
}
 80019f8:	bf00      	nop
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a0c:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <__NVIC_GetPriorityGrouping+0x18>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	0a1b      	lsrs	r3, r3, #8
 8001a12:	f003 0307 	and.w	r3, r3, #7
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	db0b      	blt.n	8001a4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	f003 021f 	and.w	r2, r3, #31
 8001a3c:	4907      	ldr	r1, [pc, #28]	; (8001a5c <__NVIC_EnableIRQ+0x38>)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	095b      	lsrs	r3, r3, #5
 8001a44:	2001      	movs	r0, #1
 8001a46:	fa00 f202 	lsl.w	r2, r0, r2
 8001a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e000e100 	.word	0xe000e100

08001a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	6039      	str	r1, [r7, #0]
 8001a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	db0a      	blt.n	8001a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	490c      	ldr	r1, [pc, #48]	; (8001aac <__NVIC_SetPriority+0x4c>)
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	0112      	lsls	r2, r2, #4
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	440b      	add	r3, r1
 8001a84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a88:	e00a      	b.n	8001aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	4908      	ldr	r1, [pc, #32]	; (8001ab0 <__NVIC_SetPriority+0x50>)
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	3b04      	subs	r3, #4
 8001a98:	0112      	lsls	r2, r2, #4
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	761a      	strb	r2, [r3, #24]
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000e100 	.word	0xe000e100
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b089      	sub	sp, #36	; 0x24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f1c3 0307 	rsb	r3, r3, #7
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	bf28      	it	cs
 8001ad2:	2304      	movcs	r3, #4
 8001ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	2b06      	cmp	r3, #6
 8001adc:	d902      	bls.n	8001ae4 <NVIC_EncodePriority+0x30>
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3b03      	subs	r3, #3
 8001ae2:	e000      	b.n	8001ae6 <NVIC_EncodePriority+0x32>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43da      	mvns	r2, r3
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	401a      	ands	r2, r3
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001afc:	f04f 31ff 	mov.w	r1, #4294967295
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	fa01 f303 	lsl.w	r3, r1, r3
 8001b06:	43d9      	mvns	r1, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b0c:	4313      	orrs	r3, r2
         );
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3724      	adds	r7, #36	; 0x24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
	...

08001b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b2c:	d301      	bcc.n	8001b32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e00f      	b.n	8001b52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b32:	4a0a      	ldr	r2, [pc, #40]	; (8001b5c <SysTick_Config+0x40>)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b3a:	210f      	movs	r1, #15
 8001b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b40:	f7ff ff8e 	bl	8001a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b44:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <SysTick_Config+0x40>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b4a:	4b04      	ldr	r3, [pc, #16]	; (8001b5c <SysTick_Config+0x40>)
 8001b4c:	2207      	movs	r2, #7
 8001b4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	e000e010 	.word	0xe000e010

08001b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff ff29 	bl	80019c0 <__NVIC_SetPriorityGrouping>
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b086      	sub	sp, #24
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	60b9      	str	r1, [r7, #8]
 8001b80:	607a      	str	r2, [r7, #4]
 8001b82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b88:	f7ff ff3e 	bl	8001a08 <__NVIC_GetPriorityGrouping>
 8001b8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	68b9      	ldr	r1, [r7, #8]
 8001b92:	6978      	ldr	r0, [r7, #20]
 8001b94:	f7ff ff8e 	bl	8001ab4 <NVIC_EncodePriority>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff ff5d 	bl	8001a60 <__NVIC_SetPriority>
}
 8001ba6:	bf00      	nop
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ff31 	bl	8001a24 <__NVIC_EnableIRQ>
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff ffa2 	bl	8001b1c <SysTick_Config>
 8001bd8:	4603      	mov	r3, r0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b084      	sub	sp, #16
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e037      	b.n	8001c68 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c0e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001c12:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001c1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f8b4 	bl	8001db8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
}  
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3710      	adds	r7, #16
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8c:	2204      	movs	r2, #4
 8001c8e:	409a      	lsls	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d024      	beq.n	8001ce2 <HAL_DMA_IRQHandler+0x72>
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d01f      	beq.n	8001ce2 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0320 	and.w	r3, r3, #32
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d107      	bne.n	8001cc0 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0204 	bic.w	r2, r2, #4
 8001cbe:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc8:	2104      	movs	r1, #4
 8001cca:	fa01 f202 	lsl.w	r2, r1, r2
 8001cce:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d06a      	beq.n	8001dae <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001ce0:	e065      	b.n	8001dae <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	409a      	lsls	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	4013      	ands	r3, r2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d02c      	beq.n	8001d4c <HAL_DMA_IRQHandler+0xdc>
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d027      	beq.n	8001d4c <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0320 	and.w	r3, r3, #32
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10b      	bne.n	8001d22 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 020a 	bic.w	r2, r2, #10
 8001d18:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d2a:	2102      	movs	r1, #2
 8001d2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d30:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d035      	beq.n	8001dae <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001d4a:	e030      	b.n	8001dae <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d50:	2208      	movs	r2, #8
 8001d52:	409a      	lsls	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4013      	ands	r3, r2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d028      	beq.n	8001dae <HAL_DMA_IRQHandler+0x13e>
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d023      	beq.n	8001dae <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 020e 	bic.w	r2, r2, #14
 8001d74:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d7e:	2101      	movs	r1, #1
 8001d80:	fa01 f202 	lsl.w	r2, r1, r2
 8001d84:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d004      	beq.n	8001dae <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	4798      	blx	r3
    }
  }
}  
 8001dac:	e7ff      	b.n	8001dae <HAL_DMA_IRQHandler+0x13e>
 8001dae:	bf00      	nop
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	4b09      	ldr	r3, [pc, #36]	; (8001dec <DMA_CalcBaseAndBitshift+0x34>)
 8001dc8:	4413      	add	r3, r2
 8001dca:	4a09      	ldr	r2, [pc, #36]	; (8001df0 <DMA_CalcBaseAndBitshift+0x38>)
 8001dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd0:	091b      	lsrs	r3, r3, #4
 8001dd2:	009a      	lsls	r2, r3, #2
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a06      	ldr	r2, [pc, #24]	; (8001df4 <DMA_CalcBaseAndBitshift+0x3c>)
 8001ddc:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	bffdfff8 	.word	0xbffdfff8
 8001df0:	cccccccd 	.word	0xcccccccd
 8001df4:	40020000 	.word	0x40020000

08001df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b087      	sub	sp, #28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e02:	2300      	movs	r3, #0
 8001e04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e06:	e14e      	b.n	80020a6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	fa01 f303 	lsl.w	r3, r1, r3
 8001e14:	4013      	ands	r3, r2
 8001e16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 8140 	beq.w	80020a0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d005      	beq.n	8001e38 <HAL_GPIO_Init+0x40>
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 0303 	and.w	r3, r3, #3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d130      	bne.n	8001e9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	2203      	movs	r2, #3
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	68da      	ldr	r2, [r3, #12]
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e6e:	2201      	movs	r2, #1
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43db      	mvns	r3, r3
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	091b      	lsrs	r3, r3, #4
 8001e84:	f003 0201 	and.w	r2, r3, #1
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	2b03      	cmp	r3, #3
 8001ea4:	d017      	beq.n	8001ed6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	2203      	movs	r2, #3
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	689a      	ldr	r2, [r3, #8]
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 0303 	and.w	r3, r3, #3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d123      	bne.n	8001f2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	08da      	lsrs	r2, r3, #3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	3208      	adds	r2, #8
 8001eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	220f      	movs	r2, #15
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43db      	mvns	r3, r3
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4013      	ands	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	691a      	ldr	r2, [r3, #16]
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	08da      	lsrs	r2, r3, #3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3208      	adds	r2, #8
 8001f24:	6939      	ldr	r1, [r7, #16]
 8001f26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	2203      	movs	r2, #3
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 0203 	and.w	r2, r3, #3
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 809a 	beq.w	80020a0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f6c:	4b55      	ldr	r3, [pc, #340]	; (80020c4 <HAL_GPIO_Init+0x2cc>)
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	4a54      	ldr	r2, [pc, #336]	; (80020c4 <HAL_GPIO_Init+0x2cc>)
 8001f72:	f043 0301 	orr.w	r3, r3, #1
 8001f76:	6193      	str	r3, [r2, #24]
 8001f78:	4b52      	ldr	r3, [pc, #328]	; (80020c4 <HAL_GPIO_Init+0x2cc>)
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f84:	4a50      	ldr	r2, [pc, #320]	; (80020c8 <HAL_GPIO_Init+0x2d0>)
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	089b      	lsrs	r3, r3, #2
 8001f8a:	3302      	adds	r3, #2
 8001f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f003 0303 	and.w	r3, r3, #3
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	220f      	movs	r2, #15
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fae:	d013      	beq.n	8001fd8 <HAL_GPIO_Init+0x1e0>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a46      	ldr	r2, [pc, #280]	; (80020cc <HAL_GPIO_Init+0x2d4>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d00d      	beq.n	8001fd4 <HAL_GPIO_Init+0x1dc>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a45      	ldr	r2, [pc, #276]	; (80020d0 <HAL_GPIO_Init+0x2d8>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d007      	beq.n	8001fd0 <HAL_GPIO_Init+0x1d8>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a44      	ldr	r2, [pc, #272]	; (80020d4 <HAL_GPIO_Init+0x2dc>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d101      	bne.n	8001fcc <HAL_GPIO_Init+0x1d4>
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e006      	b.n	8001fda <HAL_GPIO_Init+0x1e2>
 8001fcc:	2305      	movs	r3, #5
 8001fce:	e004      	b.n	8001fda <HAL_GPIO_Init+0x1e2>
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	e002      	b.n	8001fda <HAL_GPIO_Init+0x1e2>
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e000      	b.n	8001fda <HAL_GPIO_Init+0x1e2>
 8001fd8:	2300      	movs	r3, #0
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	f002 0203 	and.w	r2, r2, #3
 8001fe0:	0092      	lsls	r2, r2, #2
 8001fe2:	4093      	lsls	r3, r2
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fea:	4937      	ldr	r1, [pc, #220]	; (80020c8 <HAL_GPIO_Init+0x2d0>)
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	089b      	lsrs	r3, r3, #2
 8001ff0:	3302      	adds	r3, #2
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ff8:	4b37      	ldr	r3, [pc, #220]	; (80020d8 <HAL_GPIO_Init+0x2e0>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	43db      	mvns	r3, r3
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4013      	ands	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d003      	beq.n	800201c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4313      	orrs	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800201c:	4a2e      	ldr	r2, [pc, #184]	; (80020d8 <HAL_GPIO_Init+0x2e0>)
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002022:	4b2d      	ldr	r3, [pc, #180]	; (80020d8 <HAL_GPIO_Init+0x2e0>)
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	43db      	mvns	r3, r3
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	4013      	ands	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4313      	orrs	r3, r2
 8002044:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002046:	4a24      	ldr	r2, [pc, #144]	; (80020d8 <HAL_GPIO_Init+0x2e0>)
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800204c:	4b22      	ldr	r3, [pc, #136]	; (80020d8 <HAL_GPIO_Init+0x2e0>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	43db      	mvns	r3, r3
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	4013      	ands	r3, r2
 800205a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d003      	beq.n	8002070 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	4313      	orrs	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002070:	4a19      	ldr	r2, [pc, #100]	; (80020d8 <HAL_GPIO_Init+0x2e0>)
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002076:	4b18      	ldr	r3, [pc, #96]	; (80020d8 <HAL_GPIO_Init+0x2e0>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	43db      	mvns	r3, r3
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	4013      	ands	r3, r2
 8002084:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4313      	orrs	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800209a:	4a0f      	ldr	r2, [pc, #60]	; (80020d8 <HAL_GPIO_Init+0x2e0>)
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	3301      	adds	r3, #1
 80020a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	fa22 f303 	lsr.w	r3, r2, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f47f aea9 	bne.w	8001e08 <HAL_GPIO_Init+0x10>
  }
}
 80020b6:	bf00      	nop
 80020b8:	bf00      	nop
 80020ba:	371c      	adds	r7, #28
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	40021000 	.word	0x40021000
 80020c8:	40010000 	.word	0x40010000
 80020cc:	48000400 	.word	0x48000400
 80020d0:	48000800 	.word	0x48000800
 80020d4:	48000c00 	.word	0x48000c00
 80020d8:	40010400 	.word	0x40010400

080020dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	807b      	strh	r3, [r7, #2]
 80020e8:	4613      	mov	r3, r2
 80020ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020ec:	787b      	ldrb	r3, [r7, #1]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020f2:	887a      	ldrh	r2, [r7, #2]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020f8:	e002      	b.n	8002100 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020fa:	887a      	ldrh	r2, [r7, #2]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e081      	b.n	8002222 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d106      	bne.n	8002138 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff f9a4 	bl	8001480 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2224      	movs	r2, #36	; 0x24
 800213c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0201 	bic.w	r2, r2, #1
 800214e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800215c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800216c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d107      	bne.n	8002186 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	e006      	b.n	8002194 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689a      	ldr	r2, [r3, #8]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002192:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	2b02      	cmp	r3, #2
 800219a:	d104      	bne.n	80021a6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6812      	ldr	r2, [r2, #0]
 80021b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68da      	ldr	r2, [r3, #12]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	691a      	ldr	r2, [r3, #16]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	69d9      	ldr	r1, [r3, #28]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a1a      	ldr	r2, [r3, #32]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f042 0201 	orr.w	r2, r2, #1
 8002202:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2220      	movs	r2, #32
 800220e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
	...

0800222c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b088      	sub	sp, #32
 8002230:	af02      	add	r7, sp, #8
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	607a      	str	r2, [r7, #4]
 8002236:	461a      	mov	r2, r3
 8002238:	460b      	mov	r3, r1
 800223a:	817b      	strh	r3, [r7, #10]
 800223c:	4613      	mov	r3, r2
 800223e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002246:	b2db      	uxtb	r3, r3
 8002248:	2b20      	cmp	r3, #32
 800224a:	f040 80da 	bne.w	8002402 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002254:	2b01      	cmp	r3, #1
 8002256:	d101      	bne.n	800225c <HAL_I2C_Master_Transmit+0x30>
 8002258:	2302      	movs	r3, #2
 800225a:	e0d3      	b.n	8002404 <HAL_I2C_Master_Transmit+0x1d8>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002264:	f7ff fb7c 	bl	8001960 <HAL_GetTick>
 8002268:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	2319      	movs	r3, #25
 8002270:	2201      	movs	r2, #1
 8002272:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f000 f9e6 	bl	8002648 <I2C_WaitOnFlagUntilTimeout>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e0be      	b.n	8002404 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2221      	movs	r2, #33	; 0x21
 800228a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2210      	movs	r2, #16
 8002292:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	893a      	ldrh	r2, [r7, #8]
 80022a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	2bff      	cmp	r3, #255	; 0xff
 80022b6:	d90e      	bls.n	80022d6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	22ff      	movs	r2, #255	; 0xff
 80022bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	8979      	ldrh	r1, [r7, #10]
 80022c6:	4b51      	ldr	r3, [pc, #324]	; (800240c <HAL_I2C_Master_Transmit+0x1e0>)
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f000 fbf6 	bl	8002ac0 <I2C_TransferConfig>
 80022d4:	e06c      	b.n	80023b0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022da:	b29a      	uxth	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	8979      	ldrh	r1, [r7, #10]
 80022e8:	4b48      	ldr	r3, [pc, #288]	; (800240c <HAL_I2C_Master_Transmit+0x1e0>)
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 fbe5 	bl	8002ac0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80022f6:	e05b      	b.n	80023b0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	6a39      	ldr	r1, [r7, #32]
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f000 f9f2 	bl	80026e6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e07b      	b.n	8002404 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002310:	781a      	ldrb	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	1c5a      	adds	r2, r3, #1
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002326:	b29b      	uxth	r3, r3
 8002328:	3b01      	subs	r3, #1
 800232a:	b29a      	uxth	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002334:	3b01      	subs	r3, #1
 8002336:	b29a      	uxth	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002340:	b29b      	uxth	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d034      	beq.n	80023b0 <HAL_I2C_Master_Transmit+0x184>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234a:	2b00      	cmp	r3, #0
 800234c:	d130      	bne.n	80023b0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	6a3b      	ldr	r3, [r7, #32]
 8002354:	2200      	movs	r2, #0
 8002356:	2180      	movs	r1, #128	; 0x80
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 f975 	bl	8002648 <I2C_WaitOnFlagUntilTimeout>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e04d      	b.n	8002404 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800236c:	b29b      	uxth	r3, r3
 800236e:	2bff      	cmp	r3, #255	; 0xff
 8002370:	d90e      	bls.n	8002390 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	22ff      	movs	r2, #255	; 0xff
 8002376:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237c:	b2da      	uxtb	r2, r3
 800237e:	8979      	ldrh	r1, [r7, #10]
 8002380:	2300      	movs	r3, #0
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	f000 fb99 	bl	8002ac0 <I2C_TransferConfig>
 800238e:	e00f      	b.n	80023b0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002394:	b29a      	uxth	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	8979      	ldrh	r1, [r7, #10]
 80023a2:	2300      	movs	r3, #0
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f000 fb88 	bl	8002ac0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d19e      	bne.n	80022f8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	6a39      	ldr	r1, [r7, #32]
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f000 f9d8 	bl	8002774 <I2C_WaitOnSTOPFlagUntilTimeout>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e01a      	b.n	8002404 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2220      	movs	r2, #32
 80023d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6859      	ldr	r1, [r3, #4]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <HAL_I2C_Master_Transmit+0x1e4>)
 80023e2:	400b      	ands	r3, r1
 80023e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2220      	movs	r2, #32
 80023ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023fe:	2300      	movs	r3, #0
 8002400:	e000      	b.n	8002404 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002402:	2302      	movs	r3, #2
  }
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	80002000 	.word	0x80002000
 8002410:	fe00e800 	.word	0xfe00e800

08002414 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af02      	add	r7, sp, #8
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	607a      	str	r2, [r7, #4]
 800241e:	461a      	mov	r2, r3
 8002420:	460b      	mov	r3, r1
 8002422:	817b      	strh	r3, [r7, #10]
 8002424:	4613      	mov	r3, r2
 8002426:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b20      	cmp	r3, #32
 8002432:	f040 80db 	bne.w	80025ec <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800243c:	2b01      	cmp	r3, #1
 800243e:	d101      	bne.n	8002444 <HAL_I2C_Master_Receive+0x30>
 8002440:	2302      	movs	r3, #2
 8002442:	e0d4      	b.n	80025ee <HAL_I2C_Master_Receive+0x1da>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800244c:	f7ff fa88 	bl	8001960 <HAL_GetTick>
 8002450:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	2319      	movs	r3, #25
 8002458:	2201      	movs	r2, #1
 800245a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f000 f8f2 	bl	8002648 <I2C_WaitOnFlagUntilTimeout>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e0bf      	b.n	80025ee <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2222      	movs	r2, #34	; 0x22
 8002472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2210      	movs	r2, #16
 800247a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	893a      	ldrh	r2, [r7, #8]
 800248e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249a:	b29b      	uxth	r3, r3
 800249c:	2bff      	cmp	r3, #255	; 0xff
 800249e:	d90e      	bls.n	80024be <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	22ff      	movs	r2, #255	; 0xff
 80024a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	8979      	ldrh	r1, [r7, #10]
 80024ae:	4b52      	ldr	r3, [pc, #328]	; (80025f8 <HAL_I2C_Master_Receive+0x1e4>)
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f000 fb02 	bl	8002ac0 <I2C_TransferConfig>
 80024bc:	e06d      	b.n	800259a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	8979      	ldrh	r1, [r7, #10]
 80024d0:	4b49      	ldr	r3, [pc, #292]	; (80025f8 <HAL_I2C_Master_Receive+0x1e4>)
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f000 faf1 	bl	8002ac0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80024de:	e05c      	b.n	800259a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	6a39      	ldr	r1, [r7, #32]
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f000 f989 	bl	80027fc <I2C_WaitOnRXNEFlagUntilTimeout>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e07c      	b.n	80025ee <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	1c5a      	adds	r2, r3, #1
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002510:	3b01      	subs	r3, #1
 8002512:	b29a      	uxth	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251c:	b29b      	uxth	r3, r3
 800251e:	3b01      	subs	r3, #1
 8002520:	b29a      	uxth	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252a:	b29b      	uxth	r3, r3
 800252c:	2b00      	cmp	r3, #0
 800252e:	d034      	beq.n	800259a <HAL_I2C_Master_Receive+0x186>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002534:	2b00      	cmp	r3, #0
 8002536:	d130      	bne.n	800259a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	6a3b      	ldr	r3, [r7, #32]
 800253e:	2200      	movs	r2, #0
 8002540:	2180      	movs	r1, #128	; 0x80
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 f880 	bl	8002648 <I2C_WaitOnFlagUntilTimeout>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e04d      	b.n	80025ee <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002556:	b29b      	uxth	r3, r3
 8002558:	2bff      	cmp	r3, #255	; 0xff
 800255a:	d90e      	bls.n	800257a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	22ff      	movs	r2, #255	; 0xff
 8002560:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002566:	b2da      	uxtb	r2, r3
 8002568:	8979      	ldrh	r1, [r7, #10]
 800256a:	2300      	movs	r3, #0
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 faa4 	bl	8002ac0 <I2C_TransferConfig>
 8002578:	e00f      	b.n	800259a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257e:	b29a      	uxth	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002588:	b2da      	uxtb	r2, r3
 800258a:	8979      	ldrh	r1, [r7, #10]
 800258c:	2300      	movs	r3, #0
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f000 fa93 	bl	8002ac0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800259e:	b29b      	uxth	r3, r3
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d19d      	bne.n	80024e0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	6a39      	ldr	r1, [r7, #32]
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f000 f8e3 	bl	8002774 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e01a      	b.n	80025ee <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2220      	movs	r2, #32
 80025be:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6859      	ldr	r1, [r3, #4]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	4b0c      	ldr	r3, [pc, #48]	; (80025fc <HAL_I2C_Master_Receive+0x1e8>)
 80025cc:	400b      	ands	r3, r1
 80025ce:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2220      	movs	r2, #32
 80025d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025e8:	2300      	movs	r3, #0
 80025ea:	e000      	b.n	80025ee <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80025ec:	2302      	movs	r3, #2
  }
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3718      	adds	r7, #24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	80002400 	.word	0x80002400
 80025fc:	fe00e800 	.word	0xfe00e800

08002600 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b02      	cmp	r3, #2
 8002614:	d103      	bne.n	800261e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2200      	movs	r2, #0
 800261c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b01      	cmp	r3, #1
 800262a:	d007      	beq.n	800263c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	699a      	ldr	r2, [r3, #24]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0201 	orr.w	r2, r2, #1
 800263a:	619a      	str	r2, [r3, #24]
  }
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	603b      	str	r3, [r7, #0]
 8002654:	4613      	mov	r3, r2
 8002656:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002658:	e031      	b.n	80026be <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002660:	d02d      	beq.n	80026be <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002662:	f7ff f97d 	bl	8001960 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	d302      	bcc.n	8002678 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d122      	bne.n	80026be <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	699a      	ldr	r2, [r3, #24]
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	4013      	ands	r3, r2
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	429a      	cmp	r2, r3
 8002686:	bf0c      	ite	eq
 8002688:	2301      	moveq	r3, #1
 800268a:	2300      	movne	r3, #0
 800268c:	b2db      	uxtb	r3, r3
 800268e:	461a      	mov	r2, r3
 8002690:	79fb      	ldrb	r3, [r7, #7]
 8002692:	429a      	cmp	r2, r3
 8002694:	d113      	bne.n	80026be <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269a:	f043 0220 	orr.w	r2, r3, #32
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2220      	movs	r2, #32
 80026a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e00f      	b.n	80026de <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	699a      	ldr	r2, [r3, #24]
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	4013      	ands	r3, r2
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	bf0c      	ite	eq
 80026ce:	2301      	moveq	r3, #1
 80026d0:	2300      	movne	r3, #0
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	461a      	mov	r2, r3
 80026d6:	79fb      	ldrb	r3, [r7, #7]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d0be      	beq.n	800265a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b084      	sub	sp, #16
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	60f8      	str	r0, [r7, #12]
 80026ee:	60b9      	str	r1, [r7, #8]
 80026f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026f2:	e033      	b.n	800275c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	68b9      	ldr	r1, [r7, #8]
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f000 f901 	bl	8002900 <I2C_IsErrorOccurred>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e031      	b.n	800276c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270e:	d025      	beq.n	800275c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002710:	f7ff f926 	bl	8001960 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	429a      	cmp	r2, r3
 800271e:	d302      	bcc.n	8002726 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d11a      	bne.n	800275c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b02      	cmp	r3, #2
 8002732:	d013      	beq.n	800275c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002738:	f043 0220 	orr.w	r2, r3, #32
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2220      	movs	r2, #32
 8002744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e007      	b.n	800276c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b02      	cmp	r3, #2
 8002768:	d1c4      	bne.n	80026f4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002780:	e02f      	b.n	80027e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	68b9      	ldr	r1, [r7, #8]
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f000 f8ba 	bl	8002900 <I2C_IsErrorOccurred>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e02d      	b.n	80027f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002796:	f7ff f8e3 	bl	8001960 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d302      	bcc.n	80027ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d11a      	bne.n	80027e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	f003 0320 	and.w	r3, r3, #32
 80027b6:	2b20      	cmp	r3, #32
 80027b8:	d013      	beq.n	80027e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027be:	f043 0220 	orr.w	r2, r3, #32
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2220      	movs	r2, #32
 80027ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e007      	b.n	80027f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	f003 0320 	and.w	r3, r3, #32
 80027ec:	2b20      	cmp	r3, #32
 80027ee:	d1c8      	bne.n	8002782 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
	...

080027fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002808:	e06b      	b.n	80028e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	68b9      	ldr	r1, [r7, #8]
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 f876 	bl	8002900 <I2C_IsErrorOccurred>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e069      	b.n	80028f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	f003 0320 	and.w	r3, r3, #32
 8002828:	2b20      	cmp	r3, #32
 800282a:	d138      	bne.n	800289e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	f003 0304 	and.w	r3, r3, #4
 8002836:	2b04      	cmp	r3, #4
 8002838:	d105      	bne.n	8002846 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002842:	2300      	movs	r3, #0
 8002844:	e055      	b.n	80028f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	f003 0310 	and.w	r3, r3, #16
 8002850:	2b10      	cmp	r3, #16
 8002852:	d107      	bne.n	8002864 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2210      	movs	r2, #16
 800285a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2204      	movs	r2, #4
 8002860:	645a      	str	r2, [r3, #68]	; 0x44
 8002862:	e002      	b.n	800286a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2220      	movs	r2, #32
 8002870:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6859      	ldr	r1, [r3, #4]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	4b1f      	ldr	r3, [pc, #124]	; (80028fc <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800287e:	400b      	ands	r3, r1
 8002880:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2220      	movs	r2, #32
 8002886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e029      	b.n	80028f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800289e:	f7ff f85f 	bl	8001960 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	68ba      	ldr	r2, [r7, #8]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d302      	bcc.n	80028b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d116      	bne.n	80028e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	f003 0304 	and.w	r3, r3, #4
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d00f      	beq.n	80028e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c6:	f043 0220 	orr.w	r2, r3, #32
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2220      	movs	r2, #32
 80028d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e007      	b.n	80028f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b04      	cmp	r3, #4
 80028ee:	d18c      	bne.n	800280a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	fe00e800 	.word	0xfe00e800

08002900 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08a      	sub	sp, #40	; 0x28
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800290c:	2300      	movs	r3, #0
 800290e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800291a:	2300      	movs	r3, #0
 800291c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	f003 0310 	and.w	r3, r3, #16
 8002928:	2b00      	cmp	r3, #0
 800292a:	d068      	beq.n	80029fe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2210      	movs	r2, #16
 8002932:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002934:	e049      	b.n	80029ca <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800293c:	d045      	beq.n	80029ca <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800293e:	f7ff f80f 	bl	8001960 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	429a      	cmp	r2, r3
 800294c:	d302      	bcc.n	8002954 <I2C_IsErrorOccurred+0x54>
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d13a      	bne.n	80029ca <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800295e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002966:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002972:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002976:	d121      	bne.n	80029bc <I2C_IsErrorOccurred+0xbc>
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800297e:	d01d      	beq.n	80029bc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002980:	7cfb      	ldrb	r3, [r7, #19]
 8002982:	2b20      	cmp	r3, #32
 8002984:	d01a      	beq.n	80029bc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002994:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002996:	f7fe ffe3 	bl	8001960 <HAL_GetTick>
 800299a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800299c:	e00e      	b.n	80029bc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800299e:	f7fe ffdf 	bl	8001960 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b19      	cmp	r3, #25
 80029aa:	d907      	bls.n	80029bc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	f043 0320 	orr.w	r3, r3, #32
 80029b2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80029ba:	e006      	b.n	80029ca <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	f003 0320 	and.w	r3, r3, #32
 80029c6:	2b20      	cmp	r3, #32
 80029c8:	d1e9      	bne.n	800299e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	f003 0320 	and.w	r3, r3, #32
 80029d4:	2b20      	cmp	r3, #32
 80029d6:	d003      	beq.n	80029e0 <I2C_IsErrorOccurred+0xe0>
 80029d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0aa      	beq.n	8002936 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80029e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d103      	bne.n	80029f0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2220      	movs	r2, #32
 80029ee:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80029f0:	6a3b      	ldr	r3, [r7, #32]
 80029f2:	f043 0304 	orr.w	r3, r3, #4
 80029f6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00b      	beq.n	8002a28 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002a10:	6a3b      	ldr	r3, [r7, #32]
 8002a12:	f043 0301 	orr.w	r3, r3, #1
 8002a16:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a20:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00b      	beq.n	8002a4a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002a32:	6a3b      	ldr	r3, [r7, #32]
 8002a34:	f043 0308 	orr.w	r3, r3, #8
 8002a38:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a42:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00b      	beq.n	8002a6c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	f043 0302 	orr.w	r3, r3, #2
 8002a5a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a64:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002a6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d01c      	beq.n	8002aae <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f7ff fdc3 	bl	8002600 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6859      	ldr	r1, [r3, #4]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	4b0d      	ldr	r3, [pc, #52]	; (8002abc <I2C_IsErrorOccurred+0x1bc>)
 8002a86:	400b      	ands	r3, r1
 8002a88:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	431a      	orrs	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2220      	movs	r2, #32
 8002a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002aae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3728      	adds	r7, #40	; 0x28
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	fe00e800 	.word	0xfe00e800

08002ac0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b087      	sub	sp, #28
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	607b      	str	r3, [r7, #4]
 8002aca:	460b      	mov	r3, r1
 8002acc:	817b      	strh	r3, [r7, #10]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ad2:	897b      	ldrh	r3, [r7, #10]
 8002ad4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ad8:	7a7b      	ldrb	r3, [r7, #9]
 8002ada:	041b      	lsls	r3, r3, #16
 8002adc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ae0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ae6:	6a3b      	ldr	r3, [r7, #32]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002aee:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	6a3b      	ldr	r3, [r7, #32]
 8002af8:	0d5b      	lsrs	r3, r3, #21
 8002afa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002afe:	4b08      	ldr	r3, [pc, #32]	; (8002b20 <I2C_TransferConfig+0x60>)
 8002b00:	430b      	orrs	r3, r1
 8002b02:	43db      	mvns	r3, r3
 8002b04:	ea02 0103 	and.w	r1, r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002b12:	bf00      	nop
 8002b14:	371c      	adds	r7, #28
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	03ff63ff 	.word	0x03ff63ff

08002b24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b20      	cmp	r3, #32
 8002b38:	d138      	bne.n	8002bac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d101      	bne.n	8002b48 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b44:	2302      	movs	r3, #2
 8002b46:	e032      	b.n	8002bae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2224      	movs	r2, #36	; 0x24
 8002b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 0201 	bic.w	r2, r2, #1
 8002b66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b76:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6819      	ldr	r1, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f042 0201 	orr.w	r2, r2, #1
 8002b96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	e000      	b.n	8002bae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002bac:	2302      	movs	r3, #2
  }
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b085      	sub	sp, #20
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
 8002bc2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b20      	cmp	r3, #32
 8002bce:	d139      	bne.n	8002c44 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d101      	bne.n	8002bde <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002bda:	2302      	movs	r3, #2
 8002bdc:	e033      	b.n	8002c46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2224      	movs	r2, #36	; 0x24
 8002bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 0201 	bic.w	r2, r2, #1
 8002bfc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c0c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	021b      	lsls	r3, r3, #8
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 0201 	orr.w	r2, r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c40:	2300      	movs	r3, #0
 8002c42:	e000      	b.n	8002c46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c44:	2302      	movs	r3, #2
  }
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3714      	adds	r7, #20
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
	...

08002c54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c64:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d102      	bne.n	8002c7a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	f001 b823 	b.w	8003cc0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 817d 	beq.w	8002f8a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002c90:	4bbc      	ldr	r3, [pc, #752]	; (8002f84 <HAL_RCC_OscConfig+0x330>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f003 030c 	and.w	r3, r3, #12
 8002c98:	2b04      	cmp	r3, #4
 8002c9a:	d00c      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c9c:	4bb9      	ldr	r3, [pc, #740]	; (8002f84 <HAL_RCC_OscConfig+0x330>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f003 030c 	and.w	r3, r3, #12
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	d15c      	bne.n	8002d62 <HAL_RCC_OscConfig+0x10e>
 8002ca8:	4bb6      	ldr	r3, [pc, #728]	; (8002f84 <HAL_RCC_OscConfig+0x330>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cb4:	d155      	bne.n	8002d62 <HAL_RCC_OscConfig+0x10e>
 8002cb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cba:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002cc2:	fa93 f3a3 	rbit	r3, r3
 8002cc6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cca:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cce:	fab3 f383 	clz	r3, r3
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	095b      	lsrs	r3, r3, #5
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	f043 0301 	orr.w	r3, r3, #1
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d102      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x94>
 8002ce2:	4ba8      	ldr	r3, [pc, #672]	; (8002f84 <HAL_RCC_OscConfig+0x330>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	e015      	b.n	8002d14 <HAL_RCC_OscConfig+0xc0>
 8002ce8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cec:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002cf4:	fa93 f3a3 	rbit	r3, r3
 8002cf8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002cfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d00:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002d04:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002d08:	fa93 f3a3 	rbit	r3, r3
 8002d0c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002d10:	4b9c      	ldr	r3, [pc, #624]	; (8002f84 <HAL_RCC_OscConfig+0x330>)
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d18:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002d1c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002d20:	fa92 f2a2 	rbit	r2, r2
 8002d24:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002d28:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002d2c:	fab2 f282 	clz	r2, r2
 8002d30:	b2d2      	uxtb	r2, r2
 8002d32:	f042 0220 	orr.w	r2, r2, #32
 8002d36:	b2d2      	uxtb	r2, r2
 8002d38:	f002 021f 	and.w	r2, r2, #31
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d42:	4013      	ands	r3, r2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 811f 	beq.w	8002f88 <HAL_RCC_OscConfig+0x334>
 8002d4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f040 8116 	bne.w	8002f88 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	f000 bfaf 	b.w	8003cc0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d72:	d106      	bne.n	8002d82 <HAL_RCC_OscConfig+0x12e>
 8002d74:	4b83      	ldr	r3, [pc, #524]	; (8002f84 <HAL_RCC_OscConfig+0x330>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a82      	ldr	r2, [pc, #520]	; (8002f84 <HAL_RCC_OscConfig+0x330>)
 8002d7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d7e:	6013      	str	r3, [r2, #0]
 8002d80:	e036      	b.n	8002df0 <HAL_RCC_OscConfig+0x19c>
 8002d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10c      	bne.n	8002dac <HAL_RCC_OscConfig+0x158>
 8002d92:	4b7c      	ldr	r3, [pc, #496]	; (8002f84 <HAL_RCC_OscConfig+0x330>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a7b      	ldr	r2, [pc, #492]	; (8002f84 <HAL_RCC_OscConfig+0x330>)
 8002d98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d9c:	6013      	str	r3, [r2, #0]
 8002d9e:	4b79      	ldr	r3, [pc, #484]	; (8002f84 <HAL_RCC_OscConfig+0x330>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a78      	ldr	r2, [pc, #480]	; (8002f84 <HAL_RCC_OscConfig+0x330>)
 8002da4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002da8:	6013      	str	r3, [r2, #0]
 8002daa:	e021      	b.n	8002df0 <HAL_RCC_OscConfig+0x19c>
 8002dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dbc:	d10c      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x184>
 8002dbe:	4b71      	ldr	r3, [pc, #452]	; (8002f84 <HAL_RCC_OscConfig+0x330>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a70      	ldr	r2, [pc, #448]	; (8002f84 <HAL_RCC_OscConfig+0x330>)
 8002dc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dc8:	6013      	str	r3, [r2, #0]
 8002dca:	4b6e      	ldr	r3, [pc, #440]	; (8002f84 <HAL_RCC_OscConfig+0x330>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a6d      	ldr	r2, [pc, #436]	; (8002f84 <HAL_RCC_OscConfig+0x330>)
 8002dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	e00b      	b.n	8002df0 <HAL_RCC_OscConfig+0x19c>
 8002dd8:	4b6a      	ldr	r3, [pc, #424]	; (8002f84 <HAL_RCC_OscConfig+0x330>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a69      	ldr	r2, [pc, #420]	; (8002f84 <HAL_RCC_OscConfig+0x330>)
 8002dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002de2:	6013      	str	r3, [r2, #0]
 8002de4:	4b67      	ldr	r3, [pc, #412]	; (8002f84 <HAL_RCC_OscConfig+0x330>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a66      	ldr	r2, [pc, #408]	; (8002f84 <HAL_RCC_OscConfig+0x330>)
 8002dea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dee:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002df0:	4b64      	ldr	r3, [pc, #400]	; (8002f84 <HAL_RCC_OscConfig+0x330>)
 8002df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df4:	f023 020f 	bic.w	r2, r3, #15
 8002df8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dfc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	495f      	ldr	r1, [pc, #380]	; (8002f84 <HAL_RCC_OscConfig+0x330>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d059      	beq.n	8002ece <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1a:	f7fe fda1 	bl	8001960 <HAL_GetTick>
 8002e1e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e22:	e00a      	b.n	8002e3a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e24:	f7fe fd9c 	bl	8001960 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b64      	cmp	r3, #100	; 0x64
 8002e32:	d902      	bls.n	8002e3a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	f000 bf43 	b.w	8003cc0 <HAL_RCC_OscConfig+0x106c>
 8002e3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e3e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e42:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002e46:	fa93 f3a3 	rbit	r3, r3
 8002e4a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002e4e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e52:	fab3 f383 	clz	r3, r3
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	095b      	lsrs	r3, r3, #5
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	f043 0301 	orr.w	r3, r3, #1
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d102      	bne.n	8002e6c <HAL_RCC_OscConfig+0x218>
 8002e66:	4b47      	ldr	r3, [pc, #284]	; (8002f84 <HAL_RCC_OscConfig+0x330>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	e015      	b.n	8002e98 <HAL_RCC_OscConfig+0x244>
 8002e6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e70:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e74:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002e78:	fa93 f3a3 	rbit	r3, r3
 8002e7c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002e80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e84:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002e88:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002e8c:	fa93 f3a3 	rbit	r3, r3
 8002e90:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002e94:	4b3b      	ldr	r3, [pc, #236]	; (8002f84 <HAL_RCC_OscConfig+0x330>)
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e9c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002ea0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002ea4:	fa92 f2a2 	rbit	r2, r2
 8002ea8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002eac:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002eb0:	fab2 f282 	clz	r2, r2
 8002eb4:	b2d2      	uxtb	r2, r2
 8002eb6:	f042 0220 	orr.w	r2, r2, #32
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	f002 021f 	and.w	r2, r2, #31
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0ab      	beq.n	8002e24 <HAL_RCC_OscConfig+0x1d0>
 8002ecc:	e05d      	b.n	8002f8a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ece:	f7fe fd47 	bl	8001960 <HAL_GetTick>
 8002ed2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ed6:	e00a      	b.n	8002eee <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ed8:	f7fe fd42 	bl	8001960 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b64      	cmp	r3, #100	; 0x64
 8002ee6:	d902      	bls.n	8002eee <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	f000 bee9 	b.w	8003cc0 <HAL_RCC_OscConfig+0x106c>
 8002eee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ef2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002efa:	fa93 f3a3 	rbit	r3, r3
 8002efe:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002f02:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f06:	fab3 f383 	clz	r3, r3
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	095b      	lsrs	r3, r3, #5
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	f043 0301 	orr.w	r3, r3, #1
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d102      	bne.n	8002f20 <HAL_RCC_OscConfig+0x2cc>
 8002f1a:	4b1a      	ldr	r3, [pc, #104]	; (8002f84 <HAL_RCC_OscConfig+0x330>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	e015      	b.n	8002f4c <HAL_RCC_OscConfig+0x2f8>
 8002f20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f24:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f28:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002f2c:	fa93 f3a3 	rbit	r3, r3
 8002f30:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002f34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f38:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002f3c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002f40:	fa93 f3a3 	rbit	r3, r3
 8002f44:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002f48:	4b0e      	ldr	r3, [pc, #56]	; (8002f84 <HAL_RCC_OscConfig+0x330>)
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f50:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002f54:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002f58:	fa92 f2a2 	rbit	r2, r2
 8002f5c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002f60:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002f64:	fab2 f282 	clz	r2, r2
 8002f68:	b2d2      	uxtb	r2, r2
 8002f6a:	f042 0220 	orr.w	r2, r2, #32
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	f002 021f 	and.w	r2, r2, #31
 8002f74:	2101      	movs	r1, #1
 8002f76:	fa01 f202 	lsl.w	r2, r1, r2
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1ab      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x284>
 8002f80:	e003      	b.n	8002f8a <HAL_RCC_OscConfig+0x336>
 8002f82:	bf00      	nop
 8002f84:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 817d 	beq.w	800329a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002fa0:	4ba6      	ldr	r3, [pc, #664]	; (800323c <HAL_RCC_OscConfig+0x5e8>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f003 030c 	and.w	r3, r3, #12
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00b      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002fac:	4ba3      	ldr	r3, [pc, #652]	; (800323c <HAL_RCC_OscConfig+0x5e8>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f003 030c 	and.w	r3, r3, #12
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	d172      	bne.n	800309e <HAL_RCC_OscConfig+0x44a>
 8002fb8:	4ba0      	ldr	r3, [pc, #640]	; (800323c <HAL_RCC_OscConfig+0x5e8>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d16c      	bne.n	800309e <HAL_RCC_OscConfig+0x44a>
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fca:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002fce:	fa93 f3a3 	rbit	r3, r3
 8002fd2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002fd6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fda:	fab3 f383 	clz	r3, r3
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	095b      	lsrs	r3, r3, #5
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	f043 0301 	orr.w	r3, r3, #1
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d102      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x3a0>
 8002fee:	4b93      	ldr	r3, [pc, #588]	; (800323c <HAL_RCC_OscConfig+0x5e8>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	e013      	b.n	800301c <HAL_RCC_OscConfig+0x3c8>
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffa:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002ffe:	fa93 f3a3 	rbit	r3, r3
 8003002:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003006:	2302      	movs	r3, #2
 8003008:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800300c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003010:	fa93 f3a3 	rbit	r3, r3
 8003014:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003018:	4b88      	ldr	r3, [pc, #544]	; (800323c <HAL_RCC_OscConfig+0x5e8>)
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	2202      	movs	r2, #2
 800301e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003022:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003026:	fa92 f2a2 	rbit	r2, r2
 800302a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800302e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003032:	fab2 f282 	clz	r2, r2
 8003036:	b2d2      	uxtb	r2, r2
 8003038:	f042 0220 	orr.w	r2, r2, #32
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	f002 021f 	and.w	r2, r2, #31
 8003042:	2101      	movs	r1, #1
 8003044:	fa01 f202 	lsl.w	r2, r1, r2
 8003048:	4013      	ands	r3, r2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00a      	beq.n	8003064 <HAL_RCC_OscConfig+0x410>
 800304e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003052:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d002      	beq.n	8003064 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	f000 be2e 	b.w	8003cc0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003064:	4b75      	ldr	r3, [pc, #468]	; (800323c <HAL_RCC_OscConfig+0x5e8>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800306c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003070:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	21f8      	movs	r1, #248	; 0xf8
 800307a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003082:	fa91 f1a1 	rbit	r1, r1
 8003086:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800308a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800308e:	fab1 f181 	clz	r1, r1
 8003092:	b2c9      	uxtb	r1, r1
 8003094:	408b      	lsls	r3, r1
 8003096:	4969      	ldr	r1, [pc, #420]	; (800323c <HAL_RCC_OscConfig+0x5e8>)
 8003098:	4313      	orrs	r3, r2
 800309a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800309c:	e0fd      	b.n	800329a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800309e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 8088 	beq.w	80031c0 <HAL_RCC_OscConfig+0x56c>
 80030b0:	2301      	movs	r3, #1
 80030b2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80030ba:	fa93 f3a3 	rbit	r3, r3
 80030be:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80030c2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030c6:	fab3 f383 	clz	r3, r3
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	461a      	mov	r2, r3
 80030d8:	2301      	movs	r3, #1
 80030da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030dc:	f7fe fc40 	bl	8001960 <HAL_GetTick>
 80030e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e4:	e00a      	b.n	80030fc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030e6:	f7fe fc3b 	bl	8001960 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d902      	bls.n	80030fc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	f000 bde2 	b.w	8003cc0 <HAL_RCC_OscConfig+0x106c>
 80030fc:	2302      	movs	r3, #2
 80030fe:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003102:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003106:	fa93 f3a3 	rbit	r3, r3
 800310a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800310e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003112:	fab3 f383 	clz	r3, r3
 8003116:	b2db      	uxtb	r3, r3
 8003118:	095b      	lsrs	r3, r3, #5
 800311a:	b2db      	uxtb	r3, r3
 800311c:	f043 0301 	orr.w	r3, r3, #1
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b01      	cmp	r3, #1
 8003124:	d102      	bne.n	800312c <HAL_RCC_OscConfig+0x4d8>
 8003126:	4b45      	ldr	r3, [pc, #276]	; (800323c <HAL_RCC_OscConfig+0x5e8>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	e013      	b.n	8003154 <HAL_RCC_OscConfig+0x500>
 800312c:	2302      	movs	r3, #2
 800312e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003132:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003136:	fa93 f3a3 	rbit	r3, r3
 800313a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800313e:	2302      	movs	r3, #2
 8003140:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003144:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003148:	fa93 f3a3 	rbit	r3, r3
 800314c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003150:	4b3a      	ldr	r3, [pc, #232]	; (800323c <HAL_RCC_OscConfig+0x5e8>)
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	2202      	movs	r2, #2
 8003156:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800315a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800315e:	fa92 f2a2 	rbit	r2, r2
 8003162:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003166:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800316a:	fab2 f282 	clz	r2, r2
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	f042 0220 	orr.w	r2, r2, #32
 8003174:	b2d2      	uxtb	r2, r2
 8003176:	f002 021f 	and.w	r2, r2, #31
 800317a:	2101      	movs	r1, #1
 800317c:	fa01 f202 	lsl.w	r2, r1, r2
 8003180:	4013      	ands	r3, r2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d0af      	beq.n	80030e6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003186:	4b2d      	ldr	r3, [pc, #180]	; (800323c <HAL_RCC_OscConfig+0x5e8>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800318e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003192:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	21f8      	movs	r1, #248	; 0xf8
 800319c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80031a4:	fa91 f1a1 	rbit	r1, r1
 80031a8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80031ac:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80031b0:	fab1 f181 	clz	r1, r1
 80031b4:	b2c9      	uxtb	r1, r1
 80031b6:	408b      	lsls	r3, r1
 80031b8:	4920      	ldr	r1, [pc, #128]	; (800323c <HAL_RCC_OscConfig+0x5e8>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	600b      	str	r3, [r1, #0]
 80031be:	e06c      	b.n	800329a <HAL_RCC_OscConfig+0x646>
 80031c0:	2301      	movs	r3, #1
 80031c2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80031ca:	fa93 f3a3 	rbit	r3, r3
 80031ce:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80031d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031d6:	fab3 f383 	clz	r3, r3
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	461a      	mov	r2, r3
 80031e8:	2300      	movs	r3, #0
 80031ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ec:	f7fe fbb8 	bl	8001960 <HAL_GetTick>
 80031f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031f4:	e00a      	b.n	800320c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031f6:	f7fe fbb3 	bl	8001960 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d902      	bls.n	800320c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	f000 bd5a 	b.w	8003cc0 <HAL_RCC_OscConfig+0x106c>
 800320c:	2302      	movs	r3, #2
 800320e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003212:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003216:	fa93 f3a3 	rbit	r3, r3
 800321a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800321e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003222:	fab3 f383 	clz	r3, r3
 8003226:	b2db      	uxtb	r3, r3
 8003228:	095b      	lsrs	r3, r3, #5
 800322a:	b2db      	uxtb	r3, r3
 800322c:	f043 0301 	orr.w	r3, r3, #1
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b01      	cmp	r3, #1
 8003234:	d104      	bne.n	8003240 <HAL_RCC_OscConfig+0x5ec>
 8003236:	4b01      	ldr	r3, [pc, #4]	; (800323c <HAL_RCC_OscConfig+0x5e8>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	e015      	b.n	8003268 <HAL_RCC_OscConfig+0x614>
 800323c:	40021000 	.word	0x40021000
 8003240:	2302      	movs	r3, #2
 8003242:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003246:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800324a:	fa93 f3a3 	rbit	r3, r3
 800324e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003252:	2302      	movs	r3, #2
 8003254:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003258:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800325c:	fa93 f3a3 	rbit	r3, r3
 8003260:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003264:	4bc8      	ldr	r3, [pc, #800]	; (8003588 <HAL_RCC_OscConfig+0x934>)
 8003266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003268:	2202      	movs	r2, #2
 800326a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800326e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003272:	fa92 f2a2 	rbit	r2, r2
 8003276:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800327a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800327e:	fab2 f282 	clz	r2, r2
 8003282:	b2d2      	uxtb	r2, r2
 8003284:	f042 0220 	orr.w	r2, r2, #32
 8003288:	b2d2      	uxtb	r2, r2
 800328a:	f002 021f 	and.w	r2, r2, #31
 800328e:	2101      	movs	r1, #1
 8003290:	fa01 f202 	lsl.w	r2, r1, r2
 8003294:	4013      	ands	r3, r2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1ad      	bne.n	80031f6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800329a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800329e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0308 	and.w	r3, r3, #8
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f000 8110 	beq.w	80034d0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d079      	beq.n	80033b4 <HAL_RCC_OscConfig+0x760>
 80032c0:	2301      	movs	r3, #1
 80032c2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80032ca:	fa93 f3a3 	rbit	r3, r3
 80032ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80032d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032d6:	fab3 f383 	clz	r3, r3
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	461a      	mov	r2, r3
 80032de:	4bab      	ldr	r3, [pc, #684]	; (800358c <HAL_RCC_OscConfig+0x938>)
 80032e0:	4413      	add	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	461a      	mov	r2, r3
 80032e6:	2301      	movs	r3, #1
 80032e8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ea:	f7fe fb39 	bl	8001960 <HAL_GetTick>
 80032ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032f2:	e00a      	b.n	800330a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032f4:	f7fe fb34 	bl	8001960 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d902      	bls.n	800330a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	f000 bcdb 	b.w	8003cc0 <HAL_RCC_OscConfig+0x106c>
 800330a:	2302      	movs	r3, #2
 800330c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003310:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003314:	fa93 f3a3 	rbit	r3, r3
 8003318:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800331c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003320:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003324:	2202      	movs	r2, #2
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800332c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	fa93 f2a3 	rbit	r2, r3
 8003336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800333a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003344:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003348:	2202      	movs	r2, #2
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003350:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	fa93 f2a3 	rbit	r2, r3
 800335a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800335e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003362:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003364:	4b88      	ldr	r3, [pc, #544]	; (8003588 <HAL_RCC_OscConfig+0x934>)
 8003366:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003368:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800336c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003370:	2102      	movs	r1, #2
 8003372:	6019      	str	r1, [r3, #0]
 8003374:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003378:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	fa93 f1a3 	rbit	r1, r3
 8003382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003386:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800338a:	6019      	str	r1, [r3, #0]
  return result;
 800338c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003390:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	fab3 f383 	clz	r3, r3
 800339a:	b2db      	uxtb	r3, r3
 800339c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	f003 031f 	and.w	r3, r3, #31
 80033a6:	2101      	movs	r1, #1
 80033a8:	fa01 f303 	lsl.w	r3, r1, r3
 80033ac:	4013      	ands	r3, r2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d0a0      	beq.n	80032f4 <HAL_RCC_OscConfig+0x6a0>
 80033b2:	e08d      	b.n	80034d0 <HAL_RCC_OscConfig+0x87c>
 80033b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80033bc:	2201      	movs	r2, #1
 80033be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	fa93 f2a3 	rbit	r2, r3
 80033ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80033d6:	601a      	str	r2, [r3, #0]
  return result;
 80033d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033dc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80033e0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033e2:	fab3 f383 	clz	r3, r3
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	461a      	mov	r2, r3
 80033ea:	4b68      	ldr	r3, [pc, #416]	; (800358c <HAL_RCC_OscConfig+0x938>)
 80033ec:	4413      	add	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	461a      	mov	r2, r3
 80033f2:	2300      	movs	r3, #0
 80033f4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f6:	f7fe fab3 	bl	8001960 <HAL_GetTick>
 80033fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033fe:	e00a      	b.n	8003416 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003400:	f7fe faae 	bl	8001960 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d902      	bls.n	8003416 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	f000 bc55 	b.w	8003cc0 <HAL_RCC_OscConfig+0x106c>
 8003416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800341a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800341e:	2202      	movs	r2, #2
 8003420:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003422:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003426:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	fa93 f2a3 	rbit	r2, r3
 8003430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003434:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003438:	601a      	str	r2, [r3, #0]
 800343a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800343e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003442:	2202      	movs	r2, #2
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800344a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	fa93 f2a3 	rbit	r2, r3
 8003454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003458:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800345c:	601a      	str	r2, [r3, #0]
 800345e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003462:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003466:	2202      	movs	r2, #2
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800346e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	fa93 f2a3 	rbit	r2, r3
 8003478:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800347c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003480:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003482:	4b41      	ldr	r3, [pc, #260]	; (8003588 <HAL_RCC_OscConfig+0x934>)
 8003484:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800348a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800348e:	2102      	movs	r1, #2
 8003490:	6019      	str	r1, [r3, #0]
 8003492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003496:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	fa93 f1a3 	rbit	r1, r3
 80034a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80034a8:	6019      	str	r1, [r3, #0]
  return result;
 80034aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ae:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	fab3 f383 	clz	r3, r3
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	f003 031f 	and.w	r3, r3, #31
 80034c4:	2101      	movs	r1, #1
 80034c6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ca:	4013      	ands	r3, r2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d197      	bne.n	8003400 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 81a1 	beq.w	8003828 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034e6:	2300      	movs	r3, #0
 80034e8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ec:	4b26      	ldr	r3, [pc, #152]	; (8003588 <HAL_RCC_OscConfig+0x934>)
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d116      	bne.n	8003526 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034f8:	4b23      	ldr	r3, [pc, #140]	; (8003588 <HAL_RCC_OscConfig+0x934>)
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	4a22      	ldr	r2, [pc, #136]	; (8003588 <HAL_RCC_OscConfig+0x934>)
 80034fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003502:	61d3      	str	r3, [r2, #28]
 8003504:	4b20      	ldr	r3, [pc, #128]	; (8003588 <HAL_RCC_OscConfig+0x934>)
 8003506:	69db      	ldr	r3, [r3, #28]
 8003508:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800350c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003510:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800351a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800351e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003520:	2301      	movs	r3, #1
 8003522:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003526:	4b1a      	ldr	r3, [pc, #104]	; (8003590 <HAL_RCC_OscConfig+0x93c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352e:	2b00      	cmp	r3, #0
 8003530:	d11a      	bne.n	8003568 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003532:	4b17      	ldr	r3, [pc, #92]	; (8003590 <HAL_RCC_OscConfig+0x93c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a16      	ldr	r2, [pc, #88]	; (8003590 <HAL_RCC_OscConfig+0x93c>)
 8003538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800353c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800353e:	f7fe fa0f 	bl	8001960 <HAL_GetTick>
 8003542:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003546:	e009      	b.n	800355c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003548:	f7fe fa0a 	bl	8001960 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b64      	cmp	r3, #100	; 0x64
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e3b1      	b.n	8003cc0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800355c:	4b0c      	ldr	r3, [pc, #48]	; (8003590 <HAL_RCC_OscConfig+0x93c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003564:	2b00      	cmp	r3, #0
 8003566:	d0ef      	beq.n	8003548 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003568:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800356c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d10d      	bne.n	8003594 <HAL_RCC_OscConfig+0x940>
 8003578:	4b03      	ldr	r3, [pc, #12]	; (8003588 <HAL_RCC_OscConfig+0x934>)
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	4a02      	ldr	r2, [pc, #8]	; (8003588 <HAL_RCC_OscConfig+0x934>)
 800357e:	f043 0301 	orr.w	r3, r3, #1
 8003582:	6213      	str	r3, [r2, #32]
 8003584:	e03c      	b.n	8003600 <HAL_RCC_OscConfig+0x9ac>
 8003586:	bf00      	nop
 8003588:	40021000 	.word	0x40021000
 800358c:	10908120 	.word	0x10908120
 8003590:	40007000 	.word	0x40007000
 8003594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003598:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10c      	bne.n	80035be <HAL_RCC_OscConfig+0x96a>
 80035a4:	4bc1      	ldr	r3, [pc, #772]	; (80038ac <HAL_RCC_OscConfig+0xc58>)
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	4ac0      	ldr	r2, [pc, #768]	; (80038ac <HAL_RCC_OscConfig+0xc58>)
 80035aa:	f023 0301 	bic.w	r3, r3, #1
 80035ae:	6213      	str	r3, [r2, #32]
 80035b0:	4bbe      	ldr	r3, [pc, #760]	; (80038ac <HAL_RCC_OscConfig+0xc58>)
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	4abd      	ldr	r2, [pc, #756]	; (80038ac <HAL_RCC_OscConfig+0xc58>)
 80035b6:	f023 0304 	bic.w	r3, r3, #4
 80035ba:	6213      	str	r3, [r2, #32]
 80035bc:	e020      	b.n	8003600 <HAL_RCC_OscConfig+0x9ac>
 80035be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	2b05      	cmp	r3, #5
 80035cc:	d10c      	bne.n	80035e8 <HAL_RCC_OscConfig+0x994>
 80035ce:	4bb7      	ldr	r3, [pc, #732]	; (80038ac <HAL_RCC_OscConfig+0xc58>)
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	4ab6      	ldr	r2, [pc, #728]	; (80038ac <HAL_RCC_OscConfig+0xc58>)
 80035d4:	f043 0304 	orr.w	r3, r3, #4
 80035d8:	6213      	str	r3, [r2, #32]
 80035da:	4bb4      	ldr	r3, [pc, #720]	; (80038ac <HAL_RCC_OscConfig+0xc58>)
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	4ab3      	ldr	r2, [pc, #716]	; (80038ac <HAL_RCC_OscConfig+0xc58>)
 80035e0:	f043 0301 	orr.w	r3, r3, #1
 80035e4:	6213      	str	r3, [r2, #32]
 80035e6:	e00b      	b.n	8003600 <HAL_RCC_OscConfig+0x9ac>
 80035e8:	4bb0      	ldr	r3, [pc, #704]	; (80038ac <HAL_RCC_OscConfig+0xc58>)
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	4aaf      	ldr	r2, [pc, #700]	; (80038ac <HAL_RCC_OscConfig+0xc58>)
 80035ee:	f023 0301 	bic.w	r3, r3, #1
 80035f2:	6213      	str	r3, [r2, #32]
 80035f4:	4bad      	ldr	r3, [pc, #692]	; (80038ac <HAL_RCC_OscConfig+0xc58>)
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	4aac      	ldr	r2, [pc, #688]	; (80038ac <HAL_RCC_OscConfig+0xc58>)
 80035fa:	f023 0304 	bic.w	r3, r3, #4
 80035fe:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003600:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003604:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 8081 	beq.w	8003714 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003612:	f7fe f9a5 	bl	8001960 <HAL_GetTick>
 8003616:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800361a:	e00b      	b.n	8003634 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800361c:	f7fe f9a0 	bl	8001960 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	f241 3288 	movw	r2, #5000	; 0x1388
 800362c:	4293      	cmp	r3, r2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e345      	b.n	8003cc0 <HAL_RCC_OscConfig+0x106c>
 8003634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003638:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800363c:	2202      	movs	r2, #2
 800363e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003644:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	fa93 f2a3 	rbit	r2, r3
 800364e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003652:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800365c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003660:	2202      	movs	r2, #2
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003668:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	fa93 f2a3 	rbit	r2, r3
 8003672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003676:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800367a:	601a      	str	r2, [r3, #0]
  return result;
 800367c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003680:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003684:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003686:	fab3 f383 	clz	r3, r3
 800368a:	b2db      	uxtb	r3, r3
 800368c:	095b      	lsrs	r3, r3, #5
 800368e:	b2db      	uxtb	r3, r3
 8003690:	f043 0302 	orr.w	r3, r3, #2
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d102      	bne.n	80036a0 <HAL_RCC_OscConfig+0xa4c>
 800369a:	4b84      	ldr	r3, [pc, #528]	; (80038ac <HAL_RCC_OscConfig+0xc58>)
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	e013      	b.n	80036c8 <HAL_RCC_OscConfig+0xa74>
 80036a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80036a8:	2202      	movs	r2, #2
 80036aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	fa93 f2a3 	rbit	r2, r3
 80036ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036be:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80036c2:	601a      	str	r2, [r3, #0]
 80036c4:	4b79      	ldr	r3, [pc, #484]	; (80038ac <HAL_RCC_OscConfig+0xc58>)
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036cc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80036d0:	2102      	movs	r1, #2
 80036d2:	6011      	str	r1, [r2, #0]
 80036d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036d8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80036dc:	6812      	ldr	r2, [r2, #0]
 80036de:	fa92 f1a2 	rbit	r1, r2
 80036e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036e6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80036ea:	6011      	str	r1, [r2, #0]
  return result;
 80036ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036f0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80036f4:	6812      	ldr	r2, [r2, #0]
 80036f6:	fab2 f282 	clz	r2, r2
 80036fa:	b2d2      	uxtb	r2, r2
 80036fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003700:	b2d2      	uxtb	r2, r2
 8003702:	f002 021f 	and.w	r2, r2, #31
 8003706:	2101      	movs	r1, #1
 8003708:	fa01 f202 	lsl.w	r2, r1, r2
 800370c:	4013      	ands	r3, r2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d084      	beq.n	800361c <HAL_RCC_OscConfig+0x9c8>
 8003712:	e07f      	b.n	8003814 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003714:	f7fe f924 	bl	8001960 <HAL_GetTick>
 8003718:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800371c:	e00b      	b.n	8003736 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800371e:	f7fe f91f 	bl	8001960 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	f241 3288 	movw	r2, #5000	; 0x1388
 800372e:	4293      	cmp	r3, r2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e2c4      	b.n	8003cc0 <HAL_RCC_OscConfig+0x106c>
 8003736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800373a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800373e:	2202      	movs	r2, #2
 8003740:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003746:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	fa93 f2a3 	rbit	r2, r3
 8003750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003754:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800375e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003762:	2202      	movs	r2, #2
 8003764:	601a      	str	r2, [r3, #0]
 8003766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800376a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	fa93 f2a3 	rbit	r2, r3
 8003774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003778:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800377c:	601a      	str	r2, [r3, #0]
  return result;
 800377e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003782:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003786:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003788:	fab3 f383 	clz	r3, r3
 800378c:	b2db      	uxtb	r3, r3
 800378e:	095b      	lsrs	r3, r3, #5
 8003790:	b2db      	uxtb	r3, r3
 8003792:	f043 0302 	orr.w	r3, r3, #2
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d102      	bne.n	80037a2 <HAL_RCC_OscConfig+0xb4e>
 800379c:	4b43      	ldr	r3, [pc, #268]	; (80038ac <HAL_RCC_OscConfig+0xc58>)
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	e013      	b.n	80037ca <HAL_RCC_OscConfig+0xb76>
 80037a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80037aa:	2202      	movs	r2, #2
 80037ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	fa93 f2a3 	rbit	r2, r3
 80037bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037c0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	4b39      	ldr	r3, [pc, #228]	; (80038ac <HAL_RCC_OscConfig+0xc58>)
 80037c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037ce:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80037d2:	2102      	movs	r1, #2
 80037d4:	6011      	str	r1, [r2, #0]
 80037d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037da:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80037de:	6812      	ldr	r2, [r2, #0]
 80037e0:	fa92 f1a2 	rbit	r1, r2
 80037e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037e8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80037ec:	6011      	str	r1, [r2, #0]
  return result;
 80037ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037f2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80037f6:	6812      	ldr	r2, [r2, #0]
 80037f8:	fab2 f282 	clz	r2, r2
 80037fc:	b2d2      	uxtb	r2, r2
 80037fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003802:	b2d2      	uxtb	r2, r2
 8003804:	f002 021f 	and.w	r2, r2, #31
 8003808:	2101      	movs	r1, #1
 800380a:	fa01 f202 	lsl.w	r2, r1, r2
 800380e:	4013      	ands	r3, r2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d184      	bne.n	800371e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003814:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003818:	2b01      	cmp	r3, #1
 800381a:	d105      	bne.n	8003828 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800381c:	4b23      	ldr	r3, [pc, #140]	; (80038ac <HAL_RCC_OscConfig+0xc58>)
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	4a22      	ldr	r2, [pc, #136]	; (80038ac <HAL_RCC_OscConfig+0xc58>)
 8003822:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003826:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800382c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	69db      	ldr	r3, [r3, #28]
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 8242 	beq.w	8003cbe <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800383a:	4b1c      	ldr	r3, [pc, #112]	; (80038ac <HAL_RCC_OscConfig+0xc58>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f003 030c 	and.w	r3, r3, #12
 8003842:	2b08      	cmp	r3, #8
 8003844:	f000 8213 	beq.w	8003c6e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003848:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800384c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	69db      	ldr	r3, [r3, #28]
 8003854:	2b02      	cmp	r3, #2
 8003856:	f040 8162 	bne.w	8003b1e <HAL_RCC_OscConfig+0xeca>
 800385a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800385e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003862:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003866:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800386c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	fa93 f2a3 	rbit	r2, r3
 8003876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800387a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800387e:	601a      	str	r2, [r3, #0]
  return result;
 8003880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003884:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003888:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800388a:	fab3 f383 	clz	r3, r3
 800388e:	b2db      	uxtb	r3, r3
 8003890:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003894:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	461a      	mov	r2, r3
 800389c:	2300      	movs	r3, #0
 800389e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a0:	f7fe f85e 	bl	8001960 <HAL_GetTick>
 80038a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038a8:	e00c      	b.n	80038c4 <HAL_RCC_OscConfig+0xc70>
 80038aa:	bf00      	nop
 80038ac:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038b0:	f7fe f856 	bl	8001960 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e1fd      	b.n	8003cc0 <HAL_RCC_OscConfig+0x106c>
 80038c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80038cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	fa93 f2a3 	rbit	r2, r3
 80038e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80038e8:	601a      	str	r2, [r3, #0]
  return result;
 80038ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ee:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80038f2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038f4:	fab3 f383 	clz	r3, r3
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	095b      	lsrs	r3, r3, #5
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	f043 0301 	orr.w	r3, r3, #1
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b01      	cmp	r3, #1
 8003906:	d102      	bne.n	800390e <HAL_RCC_OscConfig+0xcba>
 8003908:	4bb0      	ldr	r3, [pc, #704]	; (8003bcc <HAL_RCC_OscConfig+0xf78>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	e027      	b.n	800395e <HAL_RCC_OscConfig+0xd0a>
 800390e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003912:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003916:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800391a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003920:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	fa93 f2a3 	rbit	r2, r3
 800392a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800392e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003938:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800393c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003946:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	fa93 f2a3 	rbit	r2, r3
 8003950:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003954:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	4b9c      	ldr	r3, [pc, #624]	; (8003bcc <HAL_RCC_OscConfig+0xf78>)
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003962:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003966:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800396a:	6011      	str	r1, [r2, #0]
 800396c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003970:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003974:	6812      	ldr	r2, [r2, #0]
 8003976:	fa92 f1a2 	rbit	r1, r2
 800397a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800397e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003982:	6011      	str	r1, [r2, #0]
  return result;
 8003984:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003988:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800398c:	6812      	ldr	r2, [r2, #0]
 800398e:	fab2 f282 	clz	r2, r2
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	f042 0220 	orr.w	r2, r2, #32
 8003998:	b2d2      	uxtb	r2, r2
 800399a:	f002 021f 	and.w	r2, r2, #31
 800399e:	2101      	movs	r1, #1
 80039a0:	fa01 f202 	lsl.w	r2, r1, r2
 80039a4:	4013      	ands	r3, r2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d182      	bne.n	80038b0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039aa:	4b88      	ldr	r3, [pc, #544]	; (8003bcc <HAL_RCC_OscConfig+0xf78>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80039b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80039be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	430b      	orrs	r3, r1
 80039cc:	497f      	ldr	r1, [pc, #508]	; (8003bcc <HAL_RCC_OscConfig+0xf78>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	604b      	str	r3, [r1, #4]
 80039d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039d6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80039da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	fa93 f2a3 	rbit	r2, r3
 80039ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039f2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80039f6:	601a      	str	r2, [r3, #0]
  return result;
 80039f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039fc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003a00:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a02:	fab3 f383 	clz	r3, r3
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a0c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	461a      	mov	r2, r3
 8003a14:	2301      	movs	r3, #1
 8003a16:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a18:	f7fd ffa2 	bl	8001960 <HAL_GetTick>
 8003a1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a20:	e009      	b.n	8003a36 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a22:	f7fd ff9d 	bl	8001960 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e144      	b.n	8003cc0 <HAL_RCC_OscConfig+0x106c>
 8003a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a3a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003a3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a48:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	fa93 f2a3 	rbit	r2, r3
 8003a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a56:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003a5a:	601a      	str	r2, [r3, #0]
  return result;
 8003a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a60:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003a64:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a66:	fab3 f383 	clz	r3, r3
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	095b      	lsrs	r3, r3, #5
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	f043 0301 	orr.w	r3, r3, #1
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d102      	bne.n	8003a80 <HAL_RCC_OscConfig+0xe2c>
 8003a7a:	4b54      	ldr	r3, [pc, #336]	; (8003bcc <HAL_RCC_OscConfig+0xf78>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	e027      	b.n	8003ad0 <HAL_RCC_OscConfig+0xe7c>
 8003a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a84:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003a88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a92:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	fa93 f2a3 	rbit	r2, r3
 8003a9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aa0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003aa4:	601a      	str	r2, [r3, #0]
 8003aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aaa:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003aae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ab8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	fa93 f2a3 	rbit	r2, r3
 8003ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ac6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003aca:	601a      	str	r2, [r3, #0]
 8003acc:	4b3f      	ldr	r3, [pc, #252]	; (8003bcc <HAL_RCC_OscConfig+0xf78>)
 8003ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ad4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003ad8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003adc:	6011      	str	r1, [r2, #0]
 8003ade:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ae2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003ae6:	6812      	ldr	r2, [r2, #0]
 8003ae8:	fa92 f1a2 	rbit	r1, r2
 8003aec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003af0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003af4:	6011      	str	r1, [r2, #0]
  return result;
 8003af6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003afa:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003afe:	6812      	ldr	r2, [r2, #0]
 8003b00:	fab2 f282 	clz	r2, r2
 8003b04:	b2d2      	uxtb	r2, r2
 8003b06:	f042 0220 	orr.w	r2, r2, #32
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	f002 021f 	and.w	r2, r2, #31
 8003b10:	2101      	movs	r1, #1
 8003b12:	fa01 f202 	lsl.w	r2, r1, r2
 8003b16:	4013      	ands	r3, r2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d082      	beq.n	8003a22 <HAL_RCC_OscConfig+0xdce>
 8003b1c:	e0cf      	b.n	8003cbe <HAL_RCC_OscConfig+0x106a>
 8003b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b22:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003b26:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b30:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	fa93 f2a3 	rbit	r2, r3
 8003b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b3e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003b42:	601a      	str	r2, [r3, #0]
  return result;
 8003b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b48:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003b4c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b4e:	fab3 f383 	clz	r3, r3
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b58:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	461a      	mov	r2, r3
 8003b60:	2300      	movs	r3, #0
 8003b62:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b64:	f7fd fefc 	bl	8001960 <HAL_GetTick>
 8003b68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b6c:	e009      	b.n	8003b82 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b6e:	f7fd fef7 	bl	8001960 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e09e      	b.n	8003cc0 <HAL_RCC_OscConfig+0x106c>
 8003b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b86:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003b8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b94:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	fa93 f2a3 	rbit	r2, r3
 8003b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ba2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003ba6:	601a      	str	r2, [r3, #0]
  return result;
 8003ba8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bac:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003bb0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bb2:	fab3 f383 	clz	r3, r3
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	095b      	lsrs	r3, r3, #5
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	f043 0301 	orr.w	r3, r3, #1
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d104      	bne.n	8003bd0 <HAL_RCC_OscConfig+0xf7c>
 8003bc6:	4b01      	ldr	r3, [pc, #4]	; (8003bcc <HAL_RCC_OscConfig+0xf78>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	e029      	b.n	8003c20 <HAL_RCC_OscConfig+0xfcc>
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bd4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003bd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003be2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	fa93 f2a3 	rbit	r2, r3
 8003bec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bf0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003bf4:	601a      	str	r2, [r3, #0]
 8003bf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bfa:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003bfe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c08:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	fa93 f2a3 	rbit	r2, r3
 8003c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c16:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	4b2b      	ldr	r3, [pc, #172]	; (8003ccc <HAL_RCC_OscConfig+0x1078>)
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c24:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003c28:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003c2c:	6011      	str	r1, [r2, #0]
 8003c2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c32:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003c36:	6812      	ldr	r2, [r2, #0]
 8003c38:	fa92 f1a2 	rbit	r1, r2
 8003c3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c40:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003c44:	6011      	str	r1, [r2, #0]
  return result;
 8003c46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c4a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003c4e:	6812      	ldr	r2, [r2, #0]
 8003c50:	fab2 f282 	clz	r2, r2
 8003c54:	b2d2      	uxtb	r2, r2
 8003c56:	f042 0220 	orr.w	r2, r2, #32
 8003c5a:	b2d2      	uxtb	r2, r2
 8003c5c:	f002 021f 	and.w	r2, r2, #31
 8003c60:	2101      	movs	r1, #1
 8003c62:	fa01 f202 	lsl.w	r2, r1, r2
 8003c66:	4013      	ands	r3, r2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d180      	bne.n	8003b6e <HAL_RCC_OscConfig+0xf1a>
 8003c6c:	e027      	b.n	8003cbe <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d101      	bne.n	8003c82 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e01e      	b.n	8003cc0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c82:	4b12      	ldr	r3, [pc, #72]	; (8003ccc <HAL_RCC_OscConfig+0x1078>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003c8a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003c8e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d10b      	bne.n	8003cba <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003ca2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003ca6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d001      	beq.n	8003cbe <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e000      	b.n	8003cc0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	40021000 	.word	0x40021000

08003cd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b09e      	sub	sp, #120	; 0x78
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d101      	bne.n	8003ce8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e162      	b.n	8003fae <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ce8:	4b90      	ldr	r3, [pc, #576]	; (8003f2c <HAL_RCC_ClockConfig+0x25c>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0307 	and.w	r3, r3, #7
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d910      	bls.n	8003d18 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cf6:	4b8d      	ldr	r3, [pc, #564]	; (8003f2c <HAL_RCC_ClockConfig+0x25c>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f023 0207 	bic.w	r2, r3, #7
 8003cfe:	498b      	ldr	r1, [pc, #556]	; (8003f2c <HAL_RCC_ClockConfig+0x25c>)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d06:	4b89      	ldr	r3, [pc, #548]	; (8003f2c <HAL_RCC_ClockConfig+0x25c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0307 	and.w	r3, r3, #7
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d001      	beq.n	8003d18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e14a      	b.n	8003fae <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d008      	beq.n	8003d36 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d24:	4b82      	ldr	r3, [pc, #520]	; (8003f30 <HAL_RCC_ClockConfig+0x260>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	497f      	ldr	r1, [pc, #508]	; (8003f30 <HAL_RCC_ClockConfig+0x260>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	f000 80dc 	beq.w	8003efc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d13c      	bne.n	8003dc6 <HAL_RCC_ClockConfig+0xf6>
 8003d4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d50:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d54:	fa93 f3a3 	rbit	r3, r3
 8003d58:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d5c:	fab3 f383 	clz	r3, r3
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	095b      	lsrs	r3, r3, #5
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	f043 0301 	orr.w	r3, r3, #1
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d102      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xa6>
 8003d70:	4b6f      	ldr	r3, [pc, #444]	; (8003f30 <HAL_RCC_ClockConfig+0x260>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	e00f      	b.n	8003d96 <HAL_RCC_ClockConfig+0xc6>
 8003d76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d7a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d7e:	fa93 f3a3 	rbit	r3, r3
 8003d82:	667b      	str	r3, [r7, #100]	; 0x64
 8003d84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d88:	663b      	str	r3, [r7, #96]	; 0x60
 8003d8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d8c:	fa93 f3a3 	rbit	r3, r3
 8003d90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d92:	4b67      	ldr	r3, [pc, #412]	; (8003f30 <HAL_RCC_ClockConfig+0x260>)
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d9a:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d9e:	fa92 f2a2 	rbit	r2, r2
 8003da2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003da4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003da6:	fab2 f282 	clz	r2, r2
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	f042 0220 	orr.w	r2, r2, #32
 8003db0:	b2d2      	uxtb	r2, r2
 8003db2:	f002 021f 	and.w	r2, r2, #31
 8003db6:	2101      	movs	r1, #1
 8003db8:	fa01 f202 	lsl.w	r2, r1, r2
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d17b      	bne.n	8003eba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e0f3      	b.n	8003fae <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d13c      	bne.n	8003e48 <HAL_RCC_ClockConfig+0x178>
 8003dce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dd2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dd6:	fa93 f3a3 	rbit	r3, r3
 8003dda:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dde:	fab3 f383 	clz	r3, r3
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	095b      	lsrs	r3, r3, #5
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	f043 0301 	orr.w	r3, r3, #1
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d102      	bne.n	8003df8 <HAL_RCC_ClockConfig+0x128>
 8003df2:	4b4f      	ldr	r3, [pc, #316]	; (8003f30 <HAL_RCC_ClockConfig+0x260>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	e00f      	b.n	8003e18 <HAL_RCC_ClockConfig+0x148>
 8003df8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dfc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e00:	fa93 f3a3 	rbit	r3, r3
 8003e04:	647b      	str	r3, [r7, #68]	; 0x44
 8003e06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e0a:	643b      	str	r3, [r7, #64]	; 0x40
 8003e0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e0e:	fa93 f3a3 	rbit	r3, r3
 8003e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e14:	4b46      	ldr	r3, [pc, #280]	; (8003f30 <HAL_RCC_ClockConfig+0x260>)
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e1c:	63ba      	str	r2, [r7, #56]	; 0x38
 8003e1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e20:	fa92 f2a2 	rbit	r2, r2
 8003e24:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003e26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e28:	fab2 f282 	clz	r2, r2
 8003e2c:	b2d2      	uxtb	r2, r2
 8003e2e:	f042 0220 	orr.w	r2, r2, #32
 8003e32:	b2d2      	uxtb	r2, r2
 8003e34:	f002 021f 	and.w	r2, r2, #31
 8003e38:	2101      	movs	r1, #1
 8003e3a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e3e:	4013      	ands	r3, r2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d13a      	bne.n	8003eba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e0b2      	b.n	8003fae <HAL_RCC_ClockConfig+0x2de>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4e:	fa93 f3a3 	rbit	r3, r3
 8003e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e56:	fab3 f383 	clz	r3, r3
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	095b      	lsrs	r3, r3, #5
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	f043 0301 	orr.w	r3, r3, #1
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d102      	bne.n	8003e70 <HAL_RCC_ClockConfig+0x1a0>
 8003e6a:	4b31      	ldr	r3, [pc, #196]	; (8003f30 <HAL_RCC_ClockConfig+0x260>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	e00d      	b.n	8003e8c <HAL_RCC_ClockConfig+0x1bc>
 8003e70:	2302      	movs	r3, #2
 8003e72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e76:	fa93 f3a3 	rbit	r3, r3
 8003e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	623b      	str	r3, [r7, #32]
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	fa93 f3a3 	rbit	r3, r3
 8003e86:	61fb      	str	r3, [r7, #28]
 8003e88:	4b29      	ldr	r3, [pc, #164]	; (8003f30 <HAL_RCC_ClockConfig+0x260>)
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8c:	2202      	movs	r2, #2
 8003e8e:	61ba      	str	r2, [r7, #24]
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	fa92 f2a2 	rbit	r2, r2
 8003e96:	617a      	str	r2, [r7, #20]
  return result;
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	fab2 f282 	clz	r2, r2
 8003e9e:	b2d2      	uxtb	r2, r2
 8003ea0:	f042 0220 	orr.w	r2, r2, #32
 8003ea4:	b2d2      	uxtb	r2, r2
 8003ea6:	f002 021f 	and.w	r2, r2, #31
 8003eaa:	2101      	movs	r1, #1
 8003eac:	fa01 f202 	lsl.w	r2, r1, r2
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e079      	b.n	8003fae <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eba:	4b1d      	ldr	r3, [pc, #116]	; (8003f30 <HAL_RCC_ClockConfig+0x260>)
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f023 0203 	bic.w	r2, r3, #3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	491a      	ldr	r1, [pc, #104]	; (8003f30 <HAL_RCC_ClockConfig+0x260>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ecc:	f7fd fd48 	bl	8001960 <HAL_GetTick>
 8003ed0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ed2:	e00a      	b.n	8003eea <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ed4:	f7fd fd44 	bl	8001960 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e061      	b.n	8003fae <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eea:	4b11      	ldr	r3, [pc, #68]	; (8003f30 <HAL_RCC_ClockConfig+0x260>)
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f003 020c 	and.w	r2, r3, #12
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d1eb      	bne.n	8003ed4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003efc:	4b0b      	ldr	r3, [pc, #44]	; (8003f2c <HAL_RCC_ClockConfig+0x25c>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0307 	and.w	r3, r3, #7
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d214      	bcs.n	8003f34 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f0a:	4b08      	ldr	r3, [pc, #32]	; (8003f2c <HAL_RCC_ClockConfig+0x25c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f023 0207 	bic.w	r2, r3, #7
 8003f12:	4906      	ldr	r1, [pc, #24]	; (8003f2c <HAL_RCC_ClockConfig+0x25c>)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f1a:	4b04      	ldr	r3, [pc, #16]	; (8003f2c <HAL_RCC_ClockConfig+0x25c>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0307 	and.w	r3, r3, #7
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d005      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e040      	b.n	8003fae <HAL_RCC_ClockConfig+0x2de>
 8003f2c:	40022000 	.word	0x40022000
 8003f30:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0304 	and.w	r3, r3, #4
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d008      	beq.n	8003f52 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f40:	4b1d      	ldr	r3, [pc, #116]	; (8003fb8 <HAL_RCC_ClockConfig+0x2e8>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	491a      	ldr	r1, [pc, #104]	; (8003fb8 <HAL_RCC_ClockConfig+0x2e8>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0308 	and.w	r3, r3, #8
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d009      	beq.n	8003f72 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f5e:	4b16      	ldr	r3, [pc, #88]	; (8003fb8 <HAL_RCC_ClockConfig+0x2e8>)
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	00db      	lsls	r3, r3, #3
 8003f6c:	4912      	ldr	r1, [pc, #72]	; (8003fb8 <HAL_RCC_ClockConfig+0x2e8>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003f72:	f000 f829 	bl	8003fc8 <HAL_RCC_GetSysClockFreq>
 8003f76:	4601      	mov	r1, r0
 8003f78:	4b0f      	ldr	r3, [pc, #60]	; (8003fb8 <HAL_RCC_ClockConfig+0x2e8>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f80:	22f0      	movs	r2, #240	; 0xf0
 8003f82:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	fa92 f2a2 	rbit	r2, r2
 8003f8a:	60fa      	str	r2, [r7, #12]
  return result;
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	fab2 f282 	clz	r2, r2
 8003f92:	b2d2      	uxtb	r2, r2
 8003f94:	40d3      	lsrs	r3, r2
 8003f96:	4a09      	ldr	r2, [pc, #36]	; (8003fbc <HAL_RCC_ClockConfig+0x2ec>)
 8003f98:	5cd3      	ldrb	r3, [r2, r3]
 8003f9a:	fa21 f303 	lsr.w	r3, r1, r3
 8003f9e:	4a08      	ldr	r2, [pc, #32]	; (8003fc0 <HAL_RCC_ClockConfig+0x2f0>)
 8003fa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003fa2:	4b08      	ldr	r3, [pc, #32]	; (8003fc4 <HAL_RCC_ClockConfig+0x2f4>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7fd fc96 	bl	80018d8 <HAL_InitTick>
  
  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3778      	adds	r7, #120	; 0x78
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	40021000 	.word	0x40021000
 8003fbc:	08007e58 	.word	0x08007e58
 8003fc0:	20000034 	.word	0x20000034
 8003fc4:	20000038 	.word	0x20000038

08003fc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b08b      	sub	sp, #44	; 0x2c
 8003fcc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	61fb      	str	r3, [r7, #28]
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	61bb      	str	r3, [r7, #24]
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8003fda:	2300      	movs	r3, #0
 8003fdc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003fe2:	4b29      	ldr	r3, [pc, #164]	; (8004088 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	f003 030c 	and.w	r3, r3, #12
 8003fee:	2b04      	cmp	r3, #4
 8003ff0:	d002      	beq.n	8003ff8 <HAL_RCC_GetSysClockFreq+0x30>
 8003ff2:	2b08      	cmp	r3, #8
 8003ff4:	d003      	beq.n	8003ffe <HAL_RCC_GetSysClockFreq+0x36>
 8003ff6:	e03c      	b.n	8004072 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ff8:	4b24      	ldr	r3, [pc, #144]	; (800408c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ffa:	623b      	str	r3, [r7, #32]
      break;
 8003ffc:	e03c      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004004:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004008:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800400a:	68ba      	ldr	r2, [r7, #8]
 800400c:	fa92 f2a2 	rbit	r2, r2
 8004010:	607a      	str	r2, [r7, #4]
  return result;
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	fab2 f282 	clz	r2, r2
 8004018:	b2d2      	uxtb	r2, r2
 800401a:	40d3      	lsrs	r3, r2
 800401c:	4a1c      	ldr	r2, [pc, #112]	; (8004090 <HAL_RCC_GetSysClockFreq+0xc8>)
 800401e:	5cd3      	ldrb	r3, [r2, r3]
 8004020:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004022:	4b19      	ldr	r3, [pc, #100]	; (8004088 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004026:	f003 030f 	and.w	r3, r3, #15
 800402a:	220f      	movs	r2, #15
 800402c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	fa92 f2a2 	rbit	r2, r2
 8004034:	60fa      	str	r2, [r7, #12]
  return result;
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	fab2 f282 	clz	r2, r2
 800403c:	b2d2      	uxtb	r2, r2
 800403e:	40d3      	lsrs	r3, r2
 8004040:	4a14      	ldr	r2, [pc, #80]	; (8004094 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004042:	5cd3      	ldrb	r3, [r2, r3]
 8004044:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d008      	beq.n	8004062 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004050:	4a0e      	ldr	r2, [pc, #56]	; (800408c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	fbb2 f2f3 	udiv	r2, r2, r3
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	fb02 f303 	mul.w	r3, r2, r3
 800405e:	627b      	str	r3, [r7, #36]	; 0x24
 8004060:	e004      	b.n	800406c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	4a0c      	ldr	r2, [pc, #48]	; (8004098 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004066:	fb02 f303 	mul.w	r3, r2, r3
 800406a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406e:	623b      	str	r3, [r7, #32]
      break;
 8004070:	e002      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004072:	4b06      	ldr	r3, [pc, #24]	; (800408c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004074:	623b      	str	r3, [r7, #32]
      break;
 8004076:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004078:	6a3b      	ldr	r3, [r7, #32]
}
 800407a:	4618      	mov	r0, r3
 800407c:	372c      	adds	r7, #44	; 0x2c
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	40021000 	.word	0x40021000
 800408c:	007a1200 	.word	0x007a1200
 8004090:	08007e70 	.word	0x08007e70
 8004094:	08007e80 	.word	0x08007e80
 8004098:	003d0900 	.word	0x003d0900

0800409c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040a0:	4b03      	ldr	r3, [pc, #12]	; (80040b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80040a2:	681b      	ldr	r3, [r3, #0]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	20000034 	.word	0x20000034

080040b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80040ba:	f7ff ffef 	bl	800409c <HAL_RCC_GetHCLKFreq>
 80040be:	4601      	mov	r1, r0
 80040c0:	4b0b      	ldr	r3, [pc, #44]	; (80040f0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80040c8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80040cc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	fa92 f2a2 	rbit	r2, r2
 80040d4:	603a      	str	r2, [r7, #0]
  return result;
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	fab2 f282 	clz	r2, r2
 80040dc:	b2d2      	uxtb	r2, r2
 80040de:	40d3      	lsrs	r3, r2
 80040e0:	4a04      	ldr	r2, [pc, #16]	; (80040f4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80040e2:	5cd3      	ldrb	r3, [r2, r3]
 80040e4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80040e8:	4618      	mov	r0, r3
 80040ea:	3708      	adds	r7, #8
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	40021000 	.word	0x40021000
 80040f4:	08007e68 	.word	0x08007e68

080040f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80040fe:	f7ff ffcd 	bl	800409c <HAL_RCC_GetHCLKFreq>
 8004102:	4601      	mov	r1, r0
 8004104:	4b0b      	ldr	r3, [pc, #44]	; (8004134 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800410c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004110:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	fa92 f2a2 	rbit	r2, r2
 8004118:	603a      	str	r2, [r7, #0]
  return result;
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	fab2 f282 	clz	r2, r2
 8004120:	b2d2      	uxtb	r2, r2
 8004122:	40d3      	lsrs	r3, r2
 8004124:	4a04      	ldr	r2, [pc, #16]	; (8004138 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004126:	5cd3      	ldrb	r3, [r2, r3]
 8004128:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800412c:	4618      	mov	r0, r3
 800412e:	3708      	adds	r7, #8
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	40021000 	.word	0x40021000
 8004138:	08007e68 	.word	0x08007e68

0800413c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b092      	sub	sp, #72	; 0x48
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800414c:	2300      	movs	r3, #0
 800414e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800415a:	2b00      	cmp	r3, #0
 800415c:	f000 80cd 	beq.w	80042fa <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004160:	4b86      	ldr	r3, [pc, #536]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004162:	69db      	ldr	r3, [r3, #28]
 8004164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10e      	bne.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800416c:	4b83      	ldr	r3, [pc, #524]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	4a82      	ldr	r2, [pc, #520]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004176:	61d3      	str	r3, [r2, #28]
 8004178:	4b80      	ldr	r3, [pc, #512]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800417a:	69db      	ldr	r3, [r3, #28]
 800417c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004180:	60bb      	str	r3, [r7, #8]
 8004182:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004184:	2301      	movs	r3, #1
 8004186:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800418a:	4b7d      	ldr	r3, [pc, #500]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004192:	2b00      	cmp	r3, #0
 8004194:	d118      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004196:	4b7a      	ldr	r3, [pc, #488]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a79      	ldr	r2, [pc, #484]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800419c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041a0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041a2:	f7fd fbdd 	bl	8001960 <HAL_GetTick>
 80041a6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a8:	e008      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041aa:	f7fd fbd9 	bl	8001960 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b64      	cmp	r3, #100	; 0x64
 80041b6:	d901      	bls.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e0db      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041bc:	4b70      	ldr	r3, [pc, #448]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0f0      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041c8:	4b6c      	ldr	r3, [pc, #432]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d07d      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d076      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041e6:	4b65      	ldr	r3, [pc, #404]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041f4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f8:	fa93 f3a3 	rbit	r3, r3
 80041fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80041fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004200:	fab3 f383 	clz	r3, r3
 8004204:	b2db      	uxtb	r3, r3
 8004206:	461a      	mov	r2, r3
 8004208:	4b5e      	ldr	r3, [pc, #376]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800420a:	4413      	add	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	461a      	mov	r2, r3
 8004210:	2301      	movs	r3, #1
 8004212:	6013      	str	r3, [r2, #0]
 8004214:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004218:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800421a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800421c:	fa93 f3a3 	rbit	r3, r3
 8004220:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004224:	fab3 f383 	clz	r3, r3
 8004228:	b2db      	uxtb	r3, r3
 800422a:	461a      	mov	r2, r3
 800422c:	4b55      	ldr	r3, [pc, #340]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800422e:	4413      	add	r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	461a      	mov	r2, r3
 8004234:	2300      	movs	r3, #0
 8004236:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004238:	4a50      	ldr	r2, [pc, #320]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800423a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800423c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800423e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b00      	cmp	r3, #0
 8004246:	d045      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004248:	f7fd fb8a 	bl	8001960 <HAL_GetTick>
 800424c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800424e:	e00a      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004250:	f7fd fb86 	bl	8001960 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	f241 3288 	movw	r2, #5000	; 0x1388
 800425e:	4293      	cmp	r3, r2
 8004260:	d901      	bls.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e086      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8004266:	2302      	movs	r3, #2
 8004268:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426c:	fa93 f3a3 	rbit	r3, r3
 8004270:	627b      	str	r3, [r7, #36]	; 0x24
 8004272:	2302      	movs	r3, #2
 8004274:	623b      	str	r3, [r7, #32]
 8004276:	6a3b      	ldr	r3, [r7, #32]
 8004278:	fa93 f3a3 	rbit	r3, r3
 800427c:	61fb      	str	r3, [r7, #28]
  return result;
 800427e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004280:	fab3 f383 	clz	r3, r3
 8004284:	b2db      	uxtb	r3, r3
 8004286:	095b      	lsrs	r3, r3, #5
 8004288:	b2db      	uxtb	r3, r3
 800428a:	f043 0302 	orr.w	r3, r3, #2
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d102      	bne.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004294:	4b39      	ldr	r3, [pc, #228]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	e007      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800429a:	2302      	movs	r3, #2
 800429c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	fa93 f3a3 	rbit	r3, r3
 80042a4:	617b      	str	r3, [r7, #20]
 80042a6:	4b35      	ldr	r3, [pc, #212]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042aa:	2202      	movs	r2, #2
 80042ac:	613a      	str	r2, [r7, #16]
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	fa92 f2a2 	rbit	r2, r2
 80042b4:	60fa      	str	r2, [r7, #12]
  return result;
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	fab2 f282 	clz	r2, r2
 80042bc:	b2d2      	uxtb	r2, r2
 80042be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042c2:	b2d2      	uxtb	r2, r2
 80042c4:	f002 021f 	and.w	r2, r2, #31
 80042c8:	2101      	movs	r1, #1
 80042ca:	fa01 f202 	lsl.w	r2, r1, r2
 80042ce:	4013      	ands	r3, r2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0bd      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80042d4:	4b29      	ldr	r3, [pc, #164]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	4926      	ldr	r1, [pc, #152]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80042e6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d105      	bne.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042ee:	4b23      	ldr	r3, [pc, #140]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	4a22      	ldr	r2, [pc, #136]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042f8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b00      	cmp	r3, #0
 8004304:	d008      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004306:	4b1d      	ldr	r3, [pc, #116]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430a:	f023 0203 	bic.w	r2, r3, #3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	491a      	ldr	r1, [pc, #104]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004314:	4313      	orrs	r3, r2
 8004316:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0320 	and.w	r3, r3, #32
 8004320:	2b00      	cmp	r3, #0
 8004322:	d008      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004324:	4b15      	ldr	r3, [pc, #84]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004328:	f023 0210 	bic.w	r2, r3, #16
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	4912      	ldr	r1, [pc, #72]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004332:	4313      	orrs	r3, r2
 8004334:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800433e:	2b00      	cmp	r3, #0
 8004340:	d008      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004342:	4b0e      	ldr	r3, [pc, #56]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004346:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	490b      	ldr	r1, [pc, #44]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004350:	4313      	orrs	r3, r2
 8004352:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d008      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004360:	4b06      	ldr	r3, [pc, #24]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004364:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	4903      	ldr	r1, [pc, #12]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800436e:	4313      	orrs	r3, r2
 8004370:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3748      	adds	r7, #72	; 0x48
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	40021000 	.word	0x40021000
 8004380:	40007000 	.word	0x40007000
 8004384:	10908100 	.word	0x10908100

08004388 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e049      	b.n	800442e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d106      	bne.n	80043b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7fd f8aa 	bl	8001508 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2202      	movs	r2, #2
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3304      	adds	r3, #4
 80043c4:	4619      	mov	r1, r3
 80043c6:	4610      	mov	r0, r2
 80043c8:	f000 f9da 	bl	8004780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
	...

08004438 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b01      	cmp	r3, #1
 800444a:	d001      	beq.n	8004450 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e040      	b.n	80044d2 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2202      	movs	r2, #2
 8004454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68da      	ldr	r2, [r3, #12]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f042 0201 	orr.w	r2, r2, #1
 8004466:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a1c      	ldr	r2, [pc, #112]	; (80044e0 <HAL_TIM_Base_Start_IT+0xa8>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d00e      	beq.n	8004490 <HAL_TIM_Base_Start_IT+0x58>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800447a:	d009      	beq.n	8004490 <HAL_TIM_Base_Start_IT+0x58>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a18      	ldr	r2, [pc, #96]	; (80044e4 <HAL_TIM_Base_Start_IT+0xac>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d004      	beq.n	8004490 <HAL_TIM_Base_Start_IT+0x58>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a17      	ldr	r2, [pc, #92]	; (80044e8 <HAL_TIM_Base_Start_IT+0xb0>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d115      	bne.n	80044bc <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689a      	ldr	r2, [r3, #8]
 8004496:	4b15      	ldr	r3, [pc, #84]	; (80044ec <HAL_TIM_Base_Start_IT+0xb4>)
 8004498:	4013      	ands	r3, r2
 800449a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2b06      	cmp	r3, #6
 80044a0:	d015      	beq.n	80044ce <HAL_TIM_Base_Start_IT+0x96>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044a8:	d011      	beq.n	80044ce <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f042 0201 	orr.w	r2, r2, #1
 80044b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ba:	e008      	b.n	80044ce <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f042 0201 	orr.w	r2, r2, #1
 80044ca:	601a      	str	r2, [r3, #0]
 80044cc:	e000      	b.n	80044d0 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	40012c00 	.word	0x40012c00
 80044e4:	40000400 	.word	0x40000400
 80044e8:	40014000 	.word	0x40014000
 80044ec:	00010007 	.word	0x00010007

080044f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b02      	cmp	r3, #2
 8004504:	d122      	bne.n	800454c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b02      	cmp	r3, #2
 8004512:	d11b      	bne.n	800454c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f06f 0202 	mvn.w	r2, #2
 800451c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2201      	movs	r2, #1
 8004522:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	f003 0303 	and.w	r3, r3, #3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d003      	beq.n	800453a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f905 	bl	8004742 <HAL_TIM_IC_CaptureCallback>
 8004538:	e005      	b.n	8004546 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f8f7 	bl	800472e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f908 	bl	8004756 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	f003 0304 	and.w	r3, r3, #4
 8004556:	2b04      	cmp	r3, #4
 8004558:	d122      	bne.n	80045a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f003 0304 	and.w	r3, r3, #4
 8004564:	2b04      	cmp	r3, #4
 8004566:	d11b      	bne.n	80045a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f06f 0204 	mvn.w	r2, #4
 8004570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2202      	movs	r2, #2
 8004576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f8db 	bl	8004742 <HAL_TIM_IC_CaptureCallback>
 800458c:	e005      	b.n	800459a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f8cd 	bl	800472e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 f8de 	bl	8004756 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	f003 0308 	and.w	r3, r3, #8
 80045aa:	2b08      	cmp	r3, #8
 80045ac:	d122      	bne.n	80045f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f003 0308 	and.w	r3, r3, #8
 80045b8:	2b08      	cmp	r3, #8
 80045ba:	d11b      	bne.n	80045f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f06f 0208 	mvn.w	r2, #8
 80045c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2204      	movs	r2, #4
 80045ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	f003 0303 	and.w	r3, r3, #3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f8b1 	bl	8004742 <HAL_TIM_IC_CaptureCallback>
 80045e0:	e005      	b.n	80045ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f8a3 	bl	800472e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 f8b4 	bl	8004756 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	f003 0310 	and.w	r3, r3, #16
 80045fe:	2b10      	cmp	r3, #16
 8004600:	d122      	bne.n	8004648 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f003 0310 	and.w	r3, r3, #16
 800460c:	2b10      	cmp	r3, #16
 800460e:	d11b      	bne.n	8004648 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f06f 0210 	mvn.w	r2, #16
 8004618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2208      	movs	r2, #8
 800461e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	69db      	ldr	r3, [r3, #28]
 8004626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800462a:	2b00      	cmp	r3, #0
 800462c:	d003      	beq.n	8004636 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 f887 	bl	8004742 <HAL_TIM_IC_CaptureCallback>
 8004634:	e005      	b.n	8004642 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f879 	bl	800472e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 f88a 	bl	8004756 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b01      	cmp	r3, #1
 8004654:	d10e      	bne.n	8004674 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b01      	cmp	r3, #1
 8004662:	d107      	bne.n	8004674 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f06f 0201 	mvn.w	r2, #1
 800466c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f7fc faea 	bl	8000c48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467e:	2b80      	cmp	r3, #128	; 0x80
 8004680:	d10e      	bne.n	80046a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800468c:	2b80      	cmp	r3, #128	; 0x80
 800468e:	d107      	bne.n	80046a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f8f2 	bl	8004884 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ae:	d10e      	bne.n	80046ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ba:	2b80      	cmp	r3, #128	; 0x80
 80046bc:	d107      	bne.n	80046ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80046c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 f8e5 	bl	8004898 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d8:	2b40      	cmp	r3, #64	; 0x40
 80046da:	d10e      	bne.n	80046fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e6:	2b40      	cmp	r3, #64	; 0x40
 80046e8:	d107      	bne.n	80046fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 f838 	bl	800476a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	f003 0320 	and.w	r3, r3, #32
 8004704:	2b20      	cmp	r3, #32
 8004706:	d10e      	bne.n	8004726 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	f003 0320 	and.w	r3, r3, #32
 8004712:	2b20      	cmp	r3, #32
 8004714:	d107      	bne.n	8004726 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f06f 0220 	mvn.w	r2, #32
 800471e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 f8a5 	bl	8004870 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004726:	bf00      	nop
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800472e:	b480      	push	{r7}
 8004730:	b083      	sub	sp, #12
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004736:	bf00      	nop
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004742:	b480      	push	{r7}
 8004744:	b083      	sub	sp, #12
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800474a:	bf00      	nop
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004756:	b480      	push	{r7}
 8004758:	b083      	sub	sp, #12
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800475e:	bf00      	nop
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800476a:	b480      	push	{r7}
 800476c:	b083      	sub	sp, #12
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004772:	bf00      	nop
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
	...

08004780 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a32      	ldr	r2, [pc, #200]	; (800485c <TIM_Base_SetConfig+0xdc>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d007      	beq.n	80047a8 <TIM_Base_SetConfig+0x28>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800479e:	d003      	beq.n	80047a8 <TIM_Base_SetConfig+0x28>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a2f      	ldr	r2, [pc, #188]	; (8004860 <TIM_Base_SetConfig+0xe0>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d108      	bne.n	80047ba <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a27      	ldr	r2, [pc, #156]	; (800485c <TIM_Base_SetConfig+0xdc>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d013      	beq.n	80047ea <TIM_Base_SetConfig+0x6a>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047c8:	d00f      	beq.n	80047ea <TIM_Base_SetConfig+0x6a>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a24      	ldr	r2, [pc, #144]	; (8004860 <TIM_Base_SetConfig+0xe0>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d00b      	beq.n	80047ea <TIM_Base_SetConfig+0x6a>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a23      	ldr	r2, [pc, #140]	; (8004864 <TIM_Base_SetConfig+0xe4>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d007      	beq.n	80047ea <TIM_Base_SetConfig+0x6a>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a22      	ldr	r2, [pc, #136]	; (8004868 <TIM_Base_SetConfig+0xe8>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d003      	beq.n	80047ea <TIM_Base_SetConfig+0x6a>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a21      	ldr	r2, [pc, #132]	; (800486c <TIM_Base_SetConfig+0xec>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d108      	bne.n	80047fc <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	4313      	orrs	r3, r2
 8004808:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	689a      	ldr	r2, [r3, #8]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a0e      	ldr	r2, [pc, #56]	; (800485c <TIM_Base_SetConfig+0xdc>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d00b      	beq.n	8004840 <TIM_Base_SetConfig+0xc0>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a0e      	ldr	r2, [pc, #56]	; (8004864 <TIM_Base_SetConfig+0xe4>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d007      	beq.n	8004840 <TIM_Base_SetConfig+0xc0>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a0d      	ldr	r2, [pc, #52]	; (8004868 <TIM_Base_SetConfig+0xe8>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d003      	beq.n	8004840 <TIM_Base_SetConfig+0xc0>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a0c      	ldr	r2, [pc, #48]	; (800486c <TIM_Base_SetConfig+0xec>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d103      	bne.n	8004848 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	691a      	ldr	r2, [r3, #16]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	615a      	str	r2, [r3, #20]
}
 800484e:	bf00      	nop
 8004850:	3714      	adds	r7, #20
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	40012c00 	.word	0x40012c00
 8004860:	40000400 	.word	0x40000400
 8004864:	40014000 	.word	0x40014000
 8004868:	40014400 	.word	0x40014400
 800486c:	40014800 	.word	0x40014800

08004870 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e040      	b.n	8004940 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d106      	bne.n	80048d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7fc fe40 	bl	8001554 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2224      	movs	r2, #36	; 0x24
 80048d8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0201 	bic.w	r2, r2, #1
 80048e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 f8b6 	bl	8004a5c <UART_SetConfig>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d101      	bne.n	80048fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e022      	b.n	8004940 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d002      	beq.n	8004908 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f9e0 	bl	8004cc8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004916:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	689a      	ldr	r2, [r3, #8]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004926:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0201 	orr.w	r2, r2, #1
 8004936:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 fa67 	bl	8004e0c <UART_CheckIdleState>
 800493e:	4603      	mov	r3, r0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3708      	adds	r7, #8
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b08a      	sub	sp, #40	; 0x28
 800494c:	af02      	add	r7, sp, #8
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	603b      	str	r3, [r7, #0]
 8004954:	4613      	mov	r3, r2
 8004956:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800495c:	2b20      	cmp	r3, #32
 800495e:	d178      	bne.n	8004a52 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d002      	beq.n	800496c <HAL_UART_Transmit+0x24>
 8004966:	88fb      	ldrh	r3, [r7, #6]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e071      	b.n	8004a54 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2221      	movs	r2, #33	; 0x21
 800497c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800497e:	f7fc ffef 	bl	8001960 <HAL_GetTick>
 8004982:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	88fa      	ldrh	r2, [r7, #6]
 8004988:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	88fa      	ldrh	r2, [r7, #6]
 8004990:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800499c:	d108      	bne.n	80049b0 <HAL_UART_Transmit+0x68>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d104      	bne.n	80049b0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80049a6:	2300      	movs	r3, #0
 80049a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	61bb      	str	r3, [r7, #24]
 80049ae:	e003      	b.n	80049b8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049b4:	2300      	movs	r3, #0
 80049b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049b8:	e030      	b.n	8004a1c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	2200      	movs	r2, #0
 80049c2:	2180      	movs	r1, #128	; 0x80
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 fac9 	bl	8004f5c <UART_WaitOnFlagUntilTimeout>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d004      	beq.n	80049da <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2220      	movs	r2, #32
 80049d4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e03c      	b.n	8004a54 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10b      	bne.n	80049f8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	881a      	ldrh	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049ec:	b292      	uxth	r2, r2
 80049ee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	3302      	adds	r3, #2
 80049f4:	61bb      	str	r3, [r7, #24]
 80049f6:	e008      	b.n	8004a0a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	781a      	ldrb	r2, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	b292      	uxth	r2, r2
 8004a02:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	3301      	adds	r3, #1
 8004a08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	3b01      	subs	r3, #1
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1c8      	bne.n	80049ba <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	2140      	movs	r1, #64	; 0x40
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f000 fa92 	bl	8004f5c <UART_WaitOnFlagUntilTimeout>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d004      	beq.n	8004a48 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2220      	movs	r2, #32
 8004a42:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e005      	b.n	8004a54 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2220      	movs	r2, #32
 8004a4c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	e000      	b.n	8004a54 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004a52:	2302      	movs	r3, #2
  }
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3720      	adds	r7, #32
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b088      	sub	sp, #32
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a64:	2300      	movs	r3, #0
 8004a66:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	431a      	orrs	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	431a      	orrs	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	69db      	ldr	r3, [r3, #28]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	4b8a      	ldr	r3, [pc, #552]	; (8004cb0 <UART_SetConfig+0x254>)
 8004a88:	4013      	ands	r3, r2
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	6812      	ldr	r2, [r2, #0]
 8004a8e:	6979      	ldr	r1, [r7, #20]
 8004a90:	430b      	orrs	r3, r1
 8004a92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68da      	ldr	r2, [r3, #12]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a78      	ldr	r2, [pc, #480]	; (8004cb4 <UART_SetConfig+0x258>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d120      	bne.n	8004b1a <UART_SetConfig+0xbe>
 8004ad8:	4b77      	ldr	r3, [pc, #476]	; (8004cb8 <UART_SetConfig+0x25c>)
 8004ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004adc:	f003 0303 	and.w	r3, r3, #3
 8004ae0:	2b03      	cmp	r3, #3
 8004ae2:	d817      	bhi.n	8004b14 <UART_SetConfig+0xb8>
 8004ae4:	a201      	add	r2, pc, #4	; (adr r2, 8004aec <UART_SetConfig+0x90>)
 8004ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aea:	bf00      	nop
 8004aec:	08004afd 	.word	0x08004afd
 8004af0:	08004b09 	.word	0x08004b09
 8004af4:	08004b0f 	.word	0x08004b0f
 8004af8:	08004b03 	.word	0x08004b03
 8004afc:	2300      	movs	r3, #0
 8004afe:	77fb      	strb	r3, [r7, #31]
 8004b00:	e01d      	b.n	8004b3e <UART_SetConfig+0xe2>
 8004b02:	2302      	movs	r3, #2
 8004b04:	77fb      	strb	r3, [r7, #31]
 8004b06:	e01a      	b.n	8004b3e <UART_SetConfig+0xe2>
 8004b08:	2304      	movs	r3, #4
 8004b0a:	77fb      	strb	r3, [r7, #31]
 8004b0c:	e017      	b.n	8004b3e <UART_SetConfig+0xe2>
 8004b0e:	2308      	movs	r3, #8
 8004b10:	77fb      	strb	r3, [r7, #31]
 8004b12:	e014      	b.n	8004b3e <UART_SetConfig+0xe2>
 8004b14:	2310      	movs	r3, #16
 8004b16:	77fb      	strb	r3, [r7, #31]
 8004b18:	e011      	b.n	8004b3e <UART_SetConfig+0xe2>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a67      	ldr	r2, [pc, #412]	; (8004cbc <UART_SetConfig+0x260>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d102      	bne.n	8004b2a <UART_SetConfig+0xce>
 8004b24:	2300      	movs	r3, #0
 8004b26:	77fb      	strb	r3, [r7, #31]
 8004b28:	e009      	b.n	8004b3e <UART_SetConfig+0xe2>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a64      	ldr	r2, [pc, #400]	; (8004cc0 <UART_SetConfig+0x264>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d102      	bne.n	8004b3a <UART_SetConfig+0xde>
 8004b34:	2300      	movs	r3, #0
 8004b36:	77fb      	strb	r3, [r7, #31]
 8004b38:	e001      	b.n	8004b3e <UART_SetConfig+0xe2>
 8004b3a:	2310      	movs	r3, #16
 8004b3c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b46:	d15a      	bne.n	8004bfe <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004b48:	7ffb      	ldrb	r3, [r7, #31]
 8004b4a:	2b08      	cmp	r3, #8
 8004b4c:	d827      	bhi.n	8004b9e <UART_SetConfig+0x142>
 8004b4e:	a201      	add	r2, pc, #4	; (adr r2, 8004b54 <UART_SetConfig+0xf8>)
 8004b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b54:	08004b79 	.word	0x08004b79
 8004b58:	08004b81 	.word	0x08004b81
 8004b5c:	08004b89 	.word	0x08004b89
 8004b60:	08004b9f 	.word	0x08004b9f
 8004b64:	08004b8f 	.word	0x08004b8f
 8004b68:	08004b9f 	.word	0x08004b9f
 8004b6c:	08004b9f 	.word	0x08004b9f
 8004b70:	08004b9f 	.word	0x08004b9f
 8004b74:	08004b97 	.word	0x08004b97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b78:	f7ff fa9c 	bl	80040b4 <HAL_RCC_GetPCLK1Freq>
 8004b7c:	61b8      	str	r0, [r7, #24]
        break;
 8004b7e:	e013      	b.n	8004ba8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b80:	f7ff faba 	bl	80040f8 <HAL_RCC_GetPCLK2Freq>
 8004b84:	61b8      	str	r0, [r7, #24]
        break;
 8004b86:	e00f      	b.n	8004ba8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b88:	4b4e      	ldr	r3, [pc, #312]	; (8004cc4 <UART_SetConfig+0x268>)
 8004b8a:	61bb      	str	r3, [r7, #24]
        break;
 8004b8c:	e00c      	b.n	8004ba8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b8e:	f7ff fa1b 	bl	8003fc8 <HAL_RCC_GetSysClockFreq>
 8004b92:	61b8      	str	r0, [r7, #24]
        break;
 8004b94:	e008      	b.n	8004ba8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b9a:	61bb      	str	r3, [r7, #24]
        break;
 8004b9c:	e004      	b.n	8004ba8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	77bb      	strb	r3, [r7, #30]
        break;
 8004ba6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d074      	beq.n	8004c98 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	005a      	lsls	r2, r3, #1
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	085b      	lsrs	r3, r3, #1
 8004bb8:	441a      	add	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	2b0f      	cmp	r3, #15
 8004bc8:	d916      	bls.n	8004bf8 <UART_SetConfig+0x19c>
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bd0:	d212      	bcs.n	8004bf8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	f023 030f 	bic.w	r3, r3, #15
 8004bda:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	085b      	lsrs	r3, r3, #1
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	f003 0307 	and.w	r3, r3, #7
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	89fb      	ldrh	r3, [r7, #14]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	89fa      	ldrh	r2, [r7, #14]
 8004bf4:	60da      	str	r2, [r3, #12]
 8004bf6:	e04f      	b.n	8004c98 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	77bb      	strb	r3, [r7, #30]
 8004bfc:	e04c      	b.n	8004c98 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bfe:	7ffb      	ldrb	r3, [r7, #31]
 8004c00:	2b08      	cmp	r3, #8
 8004c02:	d828      	bhi.n	8004c56 <UART_SetConfig+0x1fa>
 8004c04:	a201      	add	r2, pc, #4	; (adr r2, 8004c0c <UART_SetConfig+0x1b0>)
 8004c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0a:	bf00      	nop
 8004c0c:	08004c31 	.word	0x08004c31
 8004c10:	08004c39 	.word	0x08004c39
 8004c14:	08004c41 	.word	0x08004c41
 8004c18:	08004c57 	.word	0x08004c57
 8004c1c:	08004c47 	.word	0x08004c47
 8004c20:	08004c57 	.word	0x08004c57
 8004c24:	08004c57 	.word	0x08004c57
 8004c28:	08004c57 	.word	0x08004c57
 8004c2c:	08004c4f 	.word	0x08004c4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c30:	f7ff fa40 	bl	80040b4 <HAL_RCC_GetPCLK1Freq>
 8004c34:	61b8      	str	r0, [r7, #24]
        break;
 8004c36:	e013      	b.n	8004c60 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c38:	f7ff fa5e 	bl	80040f8 <HAL_RCC_GetPCLK2Freq>
 8004c3c:	61b8      	str	r0, [r7, #24]
        break;
 8004c3e:	e00f      	b.n	8004c60 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c40:	4b20      	ldr	r3, [pc, #128]	; (8004cc4 <UART_SetConfig+0x268>)
 8004c42:	61bb      	str	r3, [r7, #24]
        break;
 8004c44:	e00c      	b.n	8004c60 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c46:	f7ff f9bf 	bl	8003fc8 <HAL_RCC_GetSysClockFreq>
 8004c4a:	61b8      	str	r0, [r7, #24]
        break;
 8004c4c:	e008      	b.n	8004c60 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c52:	61bb      	str	r3, [r7, #24]
        break;
 8004c54:	e004      	b.n	8004c60 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	77bb      	strb	r3, [r7, #30]
        break;
 8004c5e:	bf00      	nop
    }

    if (pclk != 0U)
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d018      	beq.n	8004c98 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	085a      	lsrs	r2, r3, #1
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	441a      	add	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c78:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	2b0f      	cmp	r3, #15
 8004c7e:	d909      	bls.n	8004c94 <UART_SetConfig+0x238>
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c86:	d205      	bcs.n	8004c94 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	60da      	str	r2, [r3, #12]
 8004c92:	e001      	b.n	8004c98 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004ca4:	7fbb      	ldrb	r3, [r7, #30]
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3720      	adds	r7, #32
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	efff69f3 	.word	0xefff69f3
 8004cb4:	40013800 	.word	0x40013800
 8004cb8:	40021000 	.word	0x40021000
 8004cbc:	40004400 	.word	0x40004400
 8004cc0:	40004800 	.word	0x40004800
 8004cc4:	007a1200 	.word	0x007a1200

08004cc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00a      	beq.n	8004cf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00a      	beq.n	8004d14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d18:	f003 0304 	and.w	r3, r3, #4
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00a      	beq.n	8004d36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3a:	f003 0308 	and.w	r3, r3, #8
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00a      	beq.n	8004d58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	430a      	orrs	r2, r1
 8004d56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5c:	f003 0310 	and.w	r3, r3, #16
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00a      	beq.n	8004d7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	430a      	orrs	r2, r1
 8004d78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7e:	f003 0320 	and.w	r3, r3, #32
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00a      	beq.n	8004d9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d01a      	beq.n	8004dde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dc6:	d10a      	bne.n	8004dde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00a      	beq.n	8004e00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	605a      	str	r2, [r3, #4]
  }
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b098      	sub	sp, #96	; 0x60
 8004e10:	af02      	add	r7, sp, #8
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e1c:	f7fc fda0 	bl	8001960 <HAL_GetTick>
 8004e20:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0308 	and.w	r3, r3, #8
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d12e      	bne.n	8004e8e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e34:	9300      	str	r3, [sp, #0]
 8004e36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f88c 	bl	8004f5c <UART_WaitOnFlagUntilTimeout>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d021      	beq.n	8004e8e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e52:	e853 3f00 	ldrex	r3, [r3]
 8004e56:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e5e:	653b      	str	r3, [r7, #80]	; 0x50
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	461a      	mov	r2, r3
 8004e66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e68:	647b      	str	r3, [r7, #68]	; 0x44
 8004e6a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e70:	e841 2300 	strex	r3, r2, [r1]
 8004e74:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d1e6      	bne.n	8004e4a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e062      	b.n	8004f54 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0304 	and.w	r3, r3, #4
 8004e98:	2b04      	cmp	r3, #4
 8004e9a:	d149      	bne.n	8004f30 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f856 	bl	8004f5c <UART_WaitOnFlagUntilTimeout>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d03c      	beq.n	8004f30 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	e853 3f00 	ldrex	r3, [r3]
 8004ec2:	623b      	str	r3, [r7, #32]
   return(result);
 8004ec4:	6a3b      	ldr	r3, [r7, #32]
 8004ec6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004eca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ed4:	633b      	str	r3, [r7, #48]	; 0x30
 8004ed6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004eda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004edc:	e841 2300 	strex	r3, r2, [r1]
 8004ee0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1e6      	bne.n	8004eb6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	3308      	adds	r3, #8
 8004eee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	e853 3f00 	ldrex	r3, [r3]
 8004ef6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f023 0301 	bic.w	r3, r3, #1
 8004efe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	3308      	adds	r3, #8
 8004f06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f08:	61fa      	str	r2, [r7, #28]
 8004f0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0c:	69b9      	ldr	r1, [r7, #24]
 8004f0e:	69fa      	ldr	r2, [r7, #28]
 8004f10:	e841 2300 	strex	r3, r2, [r1]
 8004f14:	617b      	str	r3, [r7, #20]
   return(result);
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1e5      	bne.n	8004ee8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e011      	b.n	8004f54 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2220      	movs	r2, #32
 8004f34:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3758      	adds	r7, #88	; 0x58
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	603b      	str	r3, [r7, #0]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f6c:	e049      	b.n	8005002 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f74:	d045      	beq.n	8005002 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f76:	f7fc fcf3 	bl	8001960 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	69ba      	ldr	r2, [r7, #24]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d302      	bcc.n	8004f8c <UART_WaitOnFlagUntilTimeout+0x30>
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d101      	bne.n	8004f90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e048      	b.n	8005022 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0304 	and.w	r3, r3, #4
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d031      	beq.n	8005002 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	69db      	ldr	r3, [r3, #28]
 8004fa4:	f003 0308 	and.w	r3, r3, #8
 8004fa8:	2b08      	cmp	r3, #8
 8004faa:	d110      	bne.n	8004fce <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2208      	movs	r2, #8
 8004fb2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f000 f838 	bl	800502a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2208      	movs	r2, #8
 8004fbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e029      	b.n	8005022 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	69db      	ldr	r3, [r3, #28]
 8004fd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fdc:	d111      	bne.n	8005002 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fe6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f000 f81e 	bl	800502a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e00f      	b.n	8005022 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	69da      	ldr	r2, [r3, #28]
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	4013      	ands	r3, r2
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	429a      	cmp	r2, r3
 8005010:	bf0c      	ite	eq
 8005012:	2301      	moveq	r3, #1
 8005014:	2300      	movne	r3, #0
 8005016:	b2db      	uxtb	r3, r3
 8005018:	461a      	mov	r2, r3
 800501a:	79fb      	ldrb	r3, [r7, #7]
 800501c:	429a      	cmp	r2, r3
 800501e:	d0a6      	beq.n	8004f6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800502a:	b480      	push	{r7}
 800502c:	b095      	sub	sp, #84	; 0x54
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800503a:	e853 3f00 	ldrex	r3, [r3]
 800503e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005042:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005046:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	461a      	mov	r2, r3
 800504e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005050:	643b      	str	r3, [r7, #64]	; 0x40
 8005052:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005054:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005056:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005058:	e841 2300 	strex	r3, r2, [r1]
 800505c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800505e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1e6      	bne.n	8005032 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	3308      	adds	r3, #8
 800506a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506c:	6a3b      	ldr	r3, [r7, #32]
 800506e:	e853 3f00 	ldrex	r3, [r3]
 8005072:	61fb      	str	r3, [r7, #28]
   return(result);
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	f023 0301 	bic.w	r3, r3, #1
 800507a:	64bb      	str	r3, [r7, #72]	; 0x48
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	3308      	adds	r3, #8
 8005082:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005084:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005086:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005088:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800508a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800508c:	e841 2300 	strex	r3, r2, [r1]
 8005090:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1e5      	bne.n	8005064 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800509c:	2b01      	cmp	r3, #1
 800509e:	d118      	bne.n	80050d2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	e853 3f00 	ldrex	r3, [r3]
 80050ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	f023 0310 	bic.w	r3, r3, #16
 80050b4:	647b      	str	r3, [r7, #68]	; 0x44
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	461a      	mov	r2, r3
 80050bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050be:	61bb      	str	r3, [r7, #24]
 80050c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c2:	6979      	ldr	r1, [r7, #20]
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	e841 2300 	strex	r3, r2, [r1]
 80050ca:	613b      	str	r3, [r7, #16]
   return(result);
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1e6      	bne.n	80050a0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2220      	movs	r2, #32
 80050d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80050e6:	bf00      	nop
 80050e8:	3754      	adds	r7, #84	; 0x54
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
	...

080050f4 <malloc>:
 80050f4:	4b02      	ldr	r3, [pc, #8]	; (8005100 <malloc+0xc>)
 80050f6:	4601      	mov	r1, r0
 80050f8:	6818      	ldr	r0, [r3, #0]
 80050fa:	f000 b823 	b.w	8005144 <_malloc_r>
 80050fe:	bf00      	nop
 8005100:	20000098 	.word	0x20000098

08005104 <sbrk_aligned>:
 8005104:	b570      	push	{r4, r5, r6, lr}
 8005106:	4e0e      	ldr	r6, [pc, #56]	; (8005140 <sbrk_aligned+0x3c>)
 8005108:	460c      	mov	r4, r1
 800510a:	6831      	ldr	r1, [r6, #0]
 800510c:	4605      	mov	r5, r0
 800510e:	b911      	cbnz	r1, 8005116 <sbrk_aligned+0x12>
 8005110:	f000 fe5e 	bl	8005dd0 <_sbrk_r>
 8005114:	6030      	str	r0, [r6, #0]
 8005116:	4621      	mov	r1, r4
 8005118:	4628      	mov	r0, r5
 800511a:	f000 fe59 	bl	8005dd0 <_sbrk_r>
 800511e:	1c43      	adds	r3, r0, #1
 8005120:	d00a      	beq.n	8005138 <sbrk_aligned+0x34>
 8005122:	1cc4      	adds	r4, r0, #3
 8005124:	f024 0403 	bic.w	r4, r4, #3
 8005128:	42a0      	cmp	r0, r4
 800512a:	d007      	beq.n	800513c <sbrk_aligned+0x38>
 800512c:	1a21      	subs	r1, r4, r0
 800512e:	4628      	mov	r0, r5
 8005130:	f000 fe4e 	bl	8005dd0 <_sbrk_r>
 8005134:	3001      	adds	r0, #1
 8005136:	d101      	bne.n	800513c <sbrk_aligned+0x38>
 8005138:	f04f 34ff 	mov.w	r4, #4294967295
 800513c:	4620      	mov	r0, r4
 800513e:	bd70      	pop	{r4, r5, r6, pc}
 8005140:	20000404 	.word	0x20000404

08005144 <_malloc_r>:
 8005144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005148:	1ccd      	adds	r5, r1, #3
 800514a:	f025 0503 	bic.w	r5, r5, #3
 800514e:	3508      	adds	r5, #8
 8005150:	2d0c      	cmp	r5, #12
 8005152:	bf38      	it	cc
 8005154:	250c      	movcc	r5, #12
 8005156:	2d00      	cmp	r5, #0
 8005158:	4607      	mov	r7, r0
 800515a:	db01      	blt.n	8005160 <_malloc_r+0x1c>
 800515c:	42a9      	cmp	r1, r5
 800515e:	d905      	bls.n	800516c <_malloc_r+0x28>
 8005160:	230c      	movs	r3, #12
 8005162:	603b      	str	r3, [r7, #0]
 8005164:	2600      	movs	r6, #0
 8005166:	4630      	mov	r0, r6
 8005168:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800516c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005240 <_malloc_r+0xfc>
 8005170:	f000 f868 	bl	8005244 <__malloc_lock>
 8005174:	f8d8 3000 	ldr.w	r3, [r8]
 8005178:	461c      	mov	r4, r3
 800517a:	bb5c      	cbnz	r4, 80051d4 <_malloc_r+0x90>
 800517c:	4629      	mov	r1, r5
 800517e:	4638      	mov	r0, r7
 8005180:	f7ff ffc0 	bl	8005104 <sbrk_aligned>
 8005184:	1c43      	adds	r3, r0, #1
 8005186:	4604      	mov	r4, r0
 8005188:	d155      	bne.n	8005236 <_malloc_r+0xf2>
 800518a:	f8d8 4000 	ldr.w	r4, [r8]
 800518e:	4626      	mov	r6, r4
 8005190:	2e00      	cmp	r6, #0
 8005192:	d145      	bne.n	8005220 <_malloc_r+0xdc>
 8005194:	2c00      	cmp	r4, #0
 8005196:	d048      	beq.n	800522a <_malloc_r+0xe6>
 8005198:	6823      	ldr	r3, [r4, #0]
 800519a:	4631      	mov	r1, r6
 800519c:	4638      	mov	r0, r7
 800519e:	eb04 0903 	add.w	r9, r4, r3
 80051a2:	f000 fe15 	bl	8005dd0 <_sbrk_r>
 80051a6:	4581      	cmp	r9, r0
 80051a8:	d13f      	bne.n	800522a <_malloc_r+0xe6>
 80051aa:	6821      	ldr	r1, [r4, #0]
 80051ac:	1a6d      	subs	r5, r5, r1
 80051ae:	4629      	mov	r1, r5
 80051b0:	4638      	mov	r0, r7
 80051b2:	f7ff ffa7 	bl	8005104 <sbrk_aligned>
 80051b6:	3001      	adds	r0, #1
 80051b8:	d037      	beq.n	800522a <_malloc_r+0xe6>
 80051ba:	6823      	ldr	r3, [r4, #0]
 80051bc:	442b      	add	r3, r5
 80051be:	6023      	str	r3, [r4, #0]
 80051c0:	f8d8 3000 	ldr.w	r3, [r8]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d038      	beq.n	800523a <_malloc_r+0xf6>
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	42a2      	cmp	r2, r4
 80051cc:	d12b      	bne.n	8005226 <_malloc_r+0xe2>
 80051ce:	2200      	movs	r2, #0
 80051d0:	605a      	str	r2, [r3, #4]
 80051d2:	e00f      	b.n	80051f4 <_malloc_r+0xb0>
 80051d4:	6822      	ldr	r2, [r4, #0]
 80051d6:	1b52      	subs	r2, r2, r5
 80051d8:	d41f      	bmi.n	800521a <_malloc_r+0xd6>
 80051da:	2a0b      	cmp	r2, #11
 80051dc:	d917      	bls.n	800520e <_malloc_r+0xca>
 80051de:	1961      	adds	r1, r4, r5
 80051e0:	42a3      	cmp	r3, r4
 80051e2:	6025      	str	r5, [r4, #0]
 80051e4:	bf18      	it	ne
 80051e6:	6059      	strne	r1, [r3, #4]
 80051e8:	6863      	ldr	r3, [r4, #4]
 80051ea:	bf08      	it	eq
 80051ec:	f8c8 1000 	streq.w	r1, [r8]
 80051f0:	5162      	str	r2, [r4, r5]
 80051f2:	604b      	str	r3, [r1, #4]
 80051f4:	4638      	mov	r0, r7
 80051f6:	f104 060b 	add.w	r6, r4, #11
 80051fa:	f000 f829 	bl	8005250 <__malloc_unlock>
 80051fe:	f026 0607 	bic.w	r6, r6, #7
 8005202:	1d23      	adds	r3, r4, #4
 8005204:	1af2      	subs	r2, r6, r3
 8005206:	d0ae      	beq.n	8005166 <_malloc_r+0x22>
 8005208:	1b9b      	subs	r3, r3, r6
 800520a:	50a3      	str	r3, [r4, r2]
 800520c:	e7ab      	b.n	8005166 <_malloc_r+0x22>
 800520e:	42a3      	cmp	r3, r4
 8005210:	6862      	ldr	r2, [r4, #4]
 8005212:	d1dd      	bne.n	80051d0 <_malloc_r+0x8c>
 8005214:	f8c8 2000 	str.w	r2, [r8]
 8005218:	e7ec      	b.n	80051f4 <_malloc_r+0xb0>
 800521a:	4623      	mov	r3, r4
 800521c:	6864      	ldr	r4, [r4, #4]
 800521e:	e7ac      	b.n	800517a <_malloc_r+0x36>
 8005220:	4634      	mov	r4, r6
 8005222:	6876      	ldr	r6, [r6, #4]
 8005224:	e7b4      	b.n	8005190 <_malloc_r+0x4c>
 8005226:	4613      	mov	r3, r2
 8005228:	e7cc      	b.n	80051c4 <_malloc_r+0x80>
 800522a:	230c      	movs	r3, #12
 800522c:	603b      	str	r3, [r7, #0]
 800522e:	4638      	mov	r0, r7
 8005230:	f000 f80e 	bl	8005250 <__malloc_unlock>
 8005234:	e797      	b.n	8005166 <_malloc_r+0x22>
 8005236:	6025      	str	r5, [r4, #0]
 8005238:	e7dc      	b.n	80051f4 <_malloc_r+0xb0>
 800523a:	605b      	str	r3, [r3, #4]
 800523c:	deff      	udf	#255	; 0xff
 800523e:	bf00      	nop
 8005240:	20000400 	.word	0x20000400

08005244 <__malloc_lock>:
 8005244:	4801      	ldr	r0, [pc, #4]	; (800524c <__malloc_lock+0x8>)
 8005246:	f000 be0f 	b.w	8005e68 <__retarget_lock_acquire_recursive>
 800524a:	bf00      	nop
 800524c:	20000548 	.word	0x20000548

08005250 <__malloc_unlock>:
 8005250:	4801      	ldr	r0, [pc, #4]	; (8005258 <__malloc_unlock+0x8>)
 8005252:	f000 be0a 	b.w	8005e6a <__retarget_lock_release_recursive>
 8005256:	bf00      	nop
 8005258:	20000548 	.word	0x20000548

0800525c <__cvt>:
 800525c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005260:	ec55 4b10 	vmov	r4, r5, d0
 8005264:	2d00      	cmp	r5, #0
 8005266:	460e      	mov	r6, r1
 8005268:	4619      	mov	r1, r3
 800526a:	462b      	mov	r3, r5
 800526c:	bfbb      	ittet	lt
 800526e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005272:	461d      	movlt	r5, r3
 8005274:	2300      	movge	r3, #0
 8005276:	232d      	movlt	r3, #45	; 0x2d
 8005278:	700b      	strb	r3, [r1, #0]
 800527a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800527c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005280:	4691      	mov	r9, r2
 8005282:	f023 0820 	bic.w	r8, r3, #32
 8005286:	bfbc      	itt	lt
 8005288:	4622      	movlt	r2, r4
 800528a:	4614      	movlt	r4, r2
 800528c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005290:	d005      	beq.n	800529e <__cvt+0x42>
 8005292:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005296:	d100      	bne.n	800529a <__cvt+0x3e>
 8005298:	3601      	adds	r6, #1
 800529a:	2102      	movs	r1, #2
 800529c:	e000      	b.n	80052a0 <__cvt+0x44>
 800529e:	2103      	movs	r1, #3
 80052a0:	ab03      	add	r3, sp, #12
 80052a2:	9301      	str	r3, [sp, #4]
 80052a4:	ab02      	add	r3, sp, #8
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	ec45 4b10 	vmov	d0, r4, r5
 80052ac:	4653      	mov	r3, sl
 80052ae:	4632      	mov	r2, r6
 80052b0:	f000 fe66 	bl	8005f80 <_dtoa_r>
 80052b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80052b8:	4607      	mov	r7, r0
 80052ba:	d102      	bne.n	80052c2 <__cvt+0x66>
 80052bc:	f019 0f01 	tst.w	r9, #1
 80052c0:	d022      	beq.n	8005308 <__cvt+0xac>
 80052c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80052c6:	eb07 0906 	add.w	r9, r7, r6
 80052ca:	d110      	bne.n	80052ee <__cvt+0x92>
 80052cc:	783b      	ldrb	r3, [r7, #0]
 80052ce:	2b30      	cmp	r3, #48	; 0x30
 80052d0:	d10a      	bne.n	80052e8 <__cvt+0x8c>
 80052d2:	2200      	movs	r2, #0
 80052d4:	2300      	movs	r3, #0
 80052d6:	4620      	mov	r0, r4
 80052d8:	4629      	mov	r1, r5
 80052da:	f7fb fbf5 	bl	8000ac8 <__aeabi_dcmpeq>
 80052de:	b918      	cbnz	r0, 80052e8 <__cvt+0x8c>
 80052e0:	f1c6 0601 	rsb	r6, r6, #1
 80052e4:	f8ca 6000 	str.w	r6, [sl]
 80052e8:	f8da 3000 	ldr.w	r3, [sl]
 80052ec:	4499      	add	r9, r3
 80052ee:	2200      	movs	r2, #0
 80052f0:	2300      	movs	r3, #0
 80052f2:	4620      	mov	r0, r4
 80052f4:	4629      	mov	r1, r5
 80052f6:	f7fb fbe7 	bl	8000ac8 <__aeabi_dcmpeq>
 80052fa:	b108      	cbz	r0, 8005300 <__cvt+0xa4>
 80052fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8005300:	2230      	movs	r2, #48	; 0x30
 8005302:	9b03      	ldr	r3, [sp, #12]
 8005304:	454b      	cmp	r3, r9
 8005306:	d307      	bcc.n	8005318 <__cvt+0xbc>
 8005308:	9b03      	ldr	r3, [sp, #12]
 800530a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800530c:	1bdb      	subs	r3, r3, r7
 800530e:	4638      	mov	r0, r7
 8005310:	6013      	str	r3, [r2, #0]
 8005312:	b004      	add	sp, #16
 8005314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005318:	1c59      	adds	r1, r3, #1
 800531a:	9103      	str	r1, [sp, #12]
 800531c:	701a      	strb	r2, [r3, #0]
 800531e:	e7f0      	b.n	8005302 <__cvt+0xa6>

08005320 <__exponent>:
 8005320:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005322:	4603      	mov	r3, r0
 8005324:	2900      	cmp	r1, #0
 8005326:	bfb8      	it	lt
 8005328:	4249      	neglt	r1, r1
 800532a:	f803 2b02 	strb.w	r2, [r3], #2
 800532e:	bfb4      	ite	lt
 8005330:	222d      	movlt	r2, #45	; 0x2d
 8005332:	222b      	movge	r2, #43	; 0x2b
 8005334:	2909      	cmp	r1, #9
 8005336:	7042      	strb	r2, [r0, #1]
 8005338:	dd2a      	ble.n	8005390 <__exponent+0x70>
 800533a:	f10d 0207 	add.w	r2, sp, #7
 800533e:	4617      	mov	r7, r2
 8005340:	260a      	movs	r6, #10
 8005342:	4694      	mov	ip, r2
 8005344:	fb91 f5f6 	sdiv	r5, r1, r6
 8005348:	fb06 1415 	mls	r4, r6, r5, r1
 800534c:	3430      	adds	r4, #48	; 0x30
 800534e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005352:	460c      	mov	r4, r1
 8005354:	2c63      	cmp	r4, #99	; 0x63
 8005356:	f102 32ff 	add.w	r2, r2, #4294967295
 800535a:	4629      	mov	r1, r5
 800535c:	dcf1      	bgt.n	8005342 <__exponent+0x22>
 800535e:	3130      	adds	r1, #48	; 0x30
 8005360:	f1ac 0402 	sub.w	r4, ip, #2
 8005364:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005368:	1c41      	adds	r1, r0, #1
 800536a:	4622      	mov	r2, r4
 800536c:	42ba      	cmp	r2, r7
 800536e:	d30a      	bcc.n	8005386 <__exponent+0x66>
 8005370:	f10d 0209 	add.w	r2, sp, #9
 8005374:	eba2 020c 	sub.w	r2, r2, ip
 8005378:	42bc      	cmp	r4, r7
 800537a:	bf88      	it	hi
 800537c:	2200      	movhi	r2, #0
 800537e:	4413      	add	r3, r2
 8005380:	1a18      	subs	r0, r3, r0
 8005382:	b003      	add	sp, #12
 8005384:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005386:	f812 5b01 	ldrb.w	r5, [r2], #1
 800538a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800538e:	e7ed      	b.n	800536c <__exponent+0x4c>
 8005390:	2330      	movs	r3, #48	; 0x30
 8005392:	3130      	adds	r1, #48	; 0x30
 8005394:	7083      	strb	r3, [r0, #2]
 8005396:	70c1      	strb	r1, [r0, #3]
 8005398:	1d03      	adds	r3, r0, #4
 800539a:	e7f1      	b.n	8005380 <__exponent+0x60>

0800539c <_printf_float>:
 800539c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053a0:	ed2d 8b02 	vpush	{d8}
 80053a4:	b08d      	sub	sp, #52	; 0x34
 80053a6:	460c      	mov	r4, r1
 80053a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80053ac:	4616      	mov	r6, r2
 80053ae:	461f      	mov	r7, r3
 80053b0:	4605      	mov	r5, r0
 80053b2:	f000 fcd5 	bl	8005d60 <_localeconv_r>
 80053b6:	f8d0 a000 	ldr.w	sl, [r0]
 80053ba:	4650      	mov	r0, sl
 80053bc:	f7fa ff58 	bl	8000270 <strlen>
 80053c0:	2300      	movs	r3, #0
 80053c2:	930a      	str	r3, [sp, #40]	; 0x28
 80053c4:	6823      	ldr	r3, [r4, #0]
 80053c6:	9305      	str	r3, [sp, #20]
 80053c8:	f8d8 3000 	ldr.w	r3, [r8]
 80053cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80053d0:	3307      	adds	r3, #7
 80053d2:	f023 0307 	bic.w	r3, r3, #7
 80053d6:	f103 0208 	add.w	r2, r3, #8
 80053da:	f8c8 2000 	str.w	r2, [r8]
 80053de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80053e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80053e6:	9307      	str	r3, [sp, #28]
 80053e8:	f8cd 8018 	str.w	r8, [sp, #24]
 80053ec:	ee08 0a10 	vmov	s16, r0
 80053f0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80053f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053f8:	4b9e      	ldr	r3, [pc, #632]	; (8005674 <_printf_float+0x2d8>)
 80053fa:	f04f 32ff 	mov.w	r2, #4294967295
 80053fe:	f7fb fb95 	bl	8000b2c <__aeabi_dcmpun>
 8005402:	bb88      	cbnz	r0, 8005468 <_printf_float+0xcc>
 8005404:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005408:	4b9a      	ldr	r3, [pc, #616]	; (8005674 <_printf_float+0x2d8>)
 800540a:	f04f 32ff 	mov.w	r2, #4294967295
 800540e:	f7fb fb6f 	bl	8000af0 <__aeabi_dcmple>
 8005412:	bb48      	cbnz	r0, 8005468 <_printf_float+0xcc>
 8005414:	2200      	movs	r2, #0
 8005416:	2300      	movs	r3, #0
 8005418:	4640      	mov	r0, r8
 800541a:	4649      	mov	r1, r9
 800541c:	f7fb fb5e 	bl	8000adc <__aeabi_dcmplt>
 8005420:	b110      	cbz	r0, 8005428 <_printf_float+0x8c>
 8005422:	232d      	movs	r3, #45	; 0x2d
 8005424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005428:	4a93      	ldr	r2, [pc, #588]	; (8005678 <_printf_float+0x2dc>)
 800542a:	4b94      	ldr	r3, [pc, #592]	; (800567c <_printf_float+0x2e0>)
 800542c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005430:	bf94      	ite	ls
 8005432:	4690      	movls	r8, r2
 8005434:	4698      	movhi	r8, r3
 8005436:	2303      	movs	r3, #3
 8005438:	6123      	str	r3, [r4, #16]
 800543a:	9b05      	ldr	r3, [sp, #20]
 800543c:	f023 0304 	bic.w	r3, r3, #4
 8005440:	6023      	str	r3, [r4, #0]
 8005442:	f04f 0900 	mov.w	r9, #0
 8005446:	9700      	str	r7, [sp, #0]
 8005448:	4633      	mov	r3, r6
 800544a:	aa0b      	add	r2, sp, #44	; 0x2c
 800544c:	4621      	mov	r1, r4
 800544e:	4628      	mov	r0, r5
 8005450:	f000 f9da 	bl	8005808 <_printf_common>
 8005454:	3001      	adds	r0, #1
 8005456:	f040 8090 	bne.w	800557a <_printf_float+0x1de>
 800545a:	f04f 30ff 	mov.w	r0, #4294967295
 800545e:	b00d      	add	sp, #52	; 0x34
 8005460:	ecbd 8b02 	vpop	{d8}
 8005464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005468:	4642      	mov	r2, r8
 800546a:	464b      	mov	r3, r9
 800546c:	4640      	mov	r0, r8
 800546e:	4649      	mov	r1, r9
 8005470:	f7fb fb5c 	bl	8000b2c <__aeabi_dcmpun>
 8005474:	b140      	cbz	r0, 8005488 <_printf_float+0xec>
 8005476:	464b      	mov	r3, r9
 8005478:	2b00      	cmp	r3, #0
 800547a:	bfbc      	itt	lt
 800547c:	232d      	movlt	r3, #45	; 0x2d
 800547e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005482:	4a7f      	ldr	r2, [pc, #508]	; (8005680 <_printf_float+0x2e4>)
 8005484:	4b7f      	ldr	r3, [pc, #508]	; (8005684 <_printf_float+0x2e8>)
 8005486:	e7d1      	b.n	800542c <_printf_float+0x90>
 8005488:	6863      	ldr	r3, [r4, #4]
 800548a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800548e:	9206      	str	r2, [sp, #24]
 8005490:	1c5a      	adds	r2, r3, #1
 8005492:	d13f      	bne.n	8005514 <_printf_float+0x178>
 8005494:	2306      	movs	r3, #6
 8005496:	6063      	str	r3, [r4, #4]
 8005498:	9b05      	ldr	r3, [sp, #20]
 800549a:	6861      	ldr	r1, [r4, #4]
 800549c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80054a0:	2300      	movs	r3, #0
 80054a2:	9303      	str	r3, [sp, #12]
 80054a4:	ab0a      	add	r3, sp, #40	; 0x28
 80054a6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80054aa:	ab09      	add	r3, sp, #36	; 0x24
 80054ac:	ec49 8b10 	vmov	d0, r8, r9
 80054b0:	9300      	str	r3, [sp, #0]
 80054b2:	6022      	str	r2, [r4, #0]
 80054b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80054b8:	4628      	mov	r0, r5
 80054ba:	f7ff fecf 	bl	800525c <__cvt>
 80054be:	9b06      	ldr	r3, [sp, #24]
 80054c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80054c2:	2b47      	cmp	r3, #71	; 0x47
 80054c4:	4680      	mov	r8, r0
 80054c6:	d108      	bne.n	80054da <_printf_float+0x13e>
 80054c8:	1cc8      	adds	r0, r1, #3
 80054ca:	db02      	blt.n	80054d2 <_printf_float+0x136>
 80054cc:	6863      	ldr	r3, [r4, #4]
 80054ce:	4299      	cmp	r1, r3
 80054d0:	dd41      	ble.n	8005556 <_printf_float+0x1ba>
 80054d2:	f1ab 0302 	sub.w	r3, fp, #2
 80054d6:	fa5f fb83 	uxtb.w	fp, r3
 80054da:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80054de:	d820      	bhi.n	8005522 <_printf_float+0x186>
 80054e0:	3901      	subs	r1, #1
 80054e2:	465a      	mov	r2, fp
 80054e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80054e8:	9109      	str	r1, [sp, #36]	; 0x24
 80054ea:	f7ff ff19 	bl	8005320 <__exponent>
 80054ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054f0:	1813      	adds	r3, r2, r0
 80054f2:	2a01      	cmp	r2, #1
 80054f4:	4681      	mov	r9, r0
 80054f6:	6123      	str	r3, [r4, #16]
 80054f8:	dc02      	bgt.n	8005500 <_printf_float+0x164>
 80054fa:	6822      	ldr	r2, [r4, #0]
 80054fc:	07d2      	lsls	r2, r2, #31
 80054fe:	d501      	bpl.n	8005504 <_printf_float+0x168>
 8005500:	3301      	adds	r3, #1
 8005502:	6123      	str	r3, [r4, #16]
 8005504:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005508:	2b00      	cmp	r3, #0
 800550a:	d09c      	beq.n	8005446 <_printf_float+0xaa>
 800550c:	232d      	movs	r3, #45	; 0x2d
 800550e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005512:	e798      	b.n	8005446 <_printf_float+0xaa>
 8005514:	9a06      	ldr	r2, [sp, #24]
 8005516:	2a47      	cmp	r2, #71	; 0x47
 8005518:	d1be      	bne.n	8005498 <_printf_float+0xfc>
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1bc      	bne.n	8005498 <_printf_float+0xfc>
 800551e:	2301      	movs	r3, #1
 8005520:	e7b9      	b.n	8005496 <_printf_float+0xfa>
 8005522:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005526:	d118      	bne.n	800555a <_printf_float+0x1be>
 8005528:	2900      	cmp	r1, #0
 800552a:	6863      	ldr	r3, [r4, #4]
 800552c:	dd0b      	ble.n	8005546 <_printf_float+0x1aa>
 800552e:	6121      	str	r1, [r4, #16]
 8005530:	b913      	cbnz	r3, 8005538 <_printf_float+0x19c>
 8005532:	6822      	ldr	r2, [r4, #0]
 8005534:	07d0      	lsls	r0, r2, #31
 8005536:	d502      	bpl.n	800553e <_printf_float+0x1a2>
 8005538:	3301      	adds	r3, #1
 800553a:	440b      	add	r3, r1
 800553c:	6123      	str	r3, [r4, #16]
 800553e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005540:	f04f 0900 	mov.w	r9, #0
 8005544:	e7de      	b.n	8005504 <_printf_float+0x168>
 8005546:	b913      	cbnz	r3, 800554e <_printf_float+0x1b2>
 8005548:	6822      	ldr	r2, [r4, #0]
 800554a:	07d2      	lsls	r2, r2, #31
 800554c:	d501      	bpl.n	8005552 <_printf_float+0x1b6>
 800554e:	3302      	adds	r3, #2
 8005550:	e7f4      	b.n	800553c <_printf_float+0x1a0>
 8005552:	2301      	movs	r3, #1
 8005554:	e7f2      	b.n	800553c <_printf_float+0x1a0>
 8005556:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800555a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800555c:	4299      	cmp	r1, r3
 800555e:	db05      	blt.n	800556c <_printf_float+0x1d0>
 8005560:	6823      	ldr	r3, [r4, #0]
 8005562:	6121      	str	r1, [r4, #16]
 8005564:	07d8      	lsls	r0, r3, #31
 8005566:	d5ea      	bpl.n	800553e <_printf_float+0x1a2>
 8005568:	1c4b      	adds	r3, r1, #1
 800556a:	e7e7      	b.n	800553c <_printf_float+0x1a0>
 800556c:	2900      	cmp	r1, #0
 800556e:	bfd4      	ite	le
 8005570:	f1c1 0202 	rsble	r2, r1, #2
 8005574:	2201      	movgt	r2, #1
 8005576:	4413      	add	r3, r2
 8005578:	e7e0      	b.n	800553c <_printf_float+0x1a0>
 800557a:	6823      	ldr	r3, [r4, #0]
 800557c:	055a      	lsls	r2, r3, #21
 800557e:	d407      	bmi.n	8005590 <_printf_float+0x1f4>
 8005580:	6923      	ldr	r3, [r4, #16]
 8005582:	4642      	mov	r2, r8
 8005584:	4631      	mov	r1, r6
 8005586:	4628      	mov	r0, r5
 8005588:	47b8      	blx	r7
 800558a:	3001      	adds	r0, #1
 800558c:	d12c      	bne.n	80055e8 <_printf_float+0x24c>
 800558e:	e764      	b.n	800545a <_printf_float+0xbe>
 8005590:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005594:	f240 80e0 	bls.w	8005758 <_printf_float+0x3bc>
 8005598:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800559c:	2200      	movs	r2, #0
 800559e:	2300      	movs	r3, #0
 80055a0:	f7fb fa92 	bl	8000ac8 <__aeabi_dcmpeq>
 80055a4:	2800      	cmp	r0, #0
 80055a6:	d034      	beq.n	8005612 <_printf_float+0x276>
 80055a8:	4a37      	ldr	r2, [pc, #220]	; (8005688 <_printf_float+0x2ec>)
 80055aa:	2301      	movs	r3, #1
 80055ac:	4631      	mov	r1, r6
 80055ae:	4628      	mov	r0, r5
 80055b0:	47b8      	blx	r7
 80055b2:	3001      	adds	r0, #1
 80055b4:	f43f af51 	beq.w	800545a <_printf_float+0xbe>
 80055b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055bc:	429a      	cmp	r2, r3
 80055be:	db02      	blt.n	80055c6 <_printf_float+0x22a>
 80055c0:	6823      	ldr	r3, [r4, #0]
 80055c2:	07d8      	lsls	r0, r3, #31
 80055c4:	d510      	bpl.n	80055e8 <_printf_float+0x24c>
 80055c6:	ee18 3a10 	vmov	r3, s16
 80055ca:	4652      	mov	r2, sl
 80055cc:	4631      	mov	r1, r6
 80055ce:	4628      	mov	r0, r5
 80055d0:	47b8      	blx	r7
 80055d2:	3001      	adds	r0, #1
 80055d4:	f43f af41 	beq.w	800545a <_printf_float+0xbe>
 80055d8:	f04f 0800 	mov.w	r8, #0
 80055dc:	f104 091a 	add.w	r9, r4, #26
 80055e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055e2:	3b01      	subs	r3, #1
 80055e4:	4543      	cmp	r3, r8
 80055e6:	dc09      	bgt.n	80055fc <_printf_float+0x260>
 80055e8:	6823      	ldr	r3, [r4, #0]
 80055ea:	079b      	lsls	r3, r3, #30
 80055ec:	f100 8107 	bmi.w	80057fe <_printf_float+0x462>
 80055f0:	68e0      	ldr	r0, [r4, #12]
 80055f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055f4:	4298      	cmp	r0, r3
 80055f6:	bfb8      	it	lt
 80055f8:	4618      	movlt	r0, r3
 80055fa:	e730      	b.n	800545e <_printf_float+0xc2>
 80055fc:	2301      	movs	r3, #1
 80055fe:	464a      	mov	r2, r9
 8005600:	4631      	mov	r1, r6
 8005602:	4628      	mov	r0, r5
 8005604:	47b8      	blx	r7
 8005606:	3001      	adds	r0, #1
 8005608:	f43f af27 	beq.w	800545a <_printf_float+0xbe>
 800560c:	f108 0801 	add.w	r8, r8, #1
 8005610:	e7e6      	b.n	80055e0 <_printf_float+0x244>
 8005612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005614:	2b00      	cmp	r3, #0
 8005616:	dc39      	bgt.n	800568c <_printf_float+0x2f0>
 8005618:	4a1b      	ldr	r2, [pc, #108]	; (8005688 <_printf_float+0x2ec>)
 800561a:	2301      	movs	r3, #1
 800561c:	4631      	mov	r1, r6
 800561e:	4628      	mov	r0, r5
 8005620:	47b8      	blx	r7
 8005622:	3001      	adds	r0, #1
 8005624:	f43f af19 	beq.w	800545a <_printf_float+0xbe>
 8005628:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800562c:	4313      	orrs	r3, r2
 800562e:	d102      	bne.n	8005636 <_printf_float+0x29a>
 8005630:	6823      	ldr	r3, [r4, #0]
 8005632:	07d9      	lsls	r1, r3, #31
 8005634:	d5d8      	bpl.n	80055e8 <_printf_float+0x24c>
 8005636:	ee18 3a10 	vmov	r3, s16
 800563a:	4652      	mov	r2, sl
 800563c:	4631      	mov	r1, r6
 800563e:	4628      	mov	r0, r5
 8005640:	47b8      	blx	r7
 8005642:	3001      	adds	r0, #1
 8005644:	f43f af09 	beq.w	800545a <_printf_float+0xbe>
 8005648:	f04f 0900 	mov.w	r9, #0
 800564c:	f104 0a1a 	add.w	sl, r4, #26
 8005650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005652:	425b      	negs	r3, r3
 8005654:	454b      	cmp	r3, r9
 8005656:	dc01      	bgt.n	800565c <_printf_float+0x2c0>
 8005658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800565a:	e792      	b.n	8005582 <_printf_float+0x1e6>
 800565c:	2301      	movs	r3, #1
 800565e:	4652      	mov	r2, sl
 8005660:	4631      	mov	r1, r6
 8005662:	4628      	mov	r0, r5
 8005664:	47b8      	blx	r7
 8005666:	3001      	adds	r0, #1
 8005668:	f43f aef7 	beq.w	800545a <_printf_float+0xbe>
 800566c:	f109 0901 	add.w	r9, r9, #1
 8005670:	e7ee      	b.n	8005650 <_printf_float+0x2b4>
 8005672:	bf00      	nop
 8005674:	7fefffff 	.word	0x7fefffff
 8005678:	08007e90 	.word	0x08007e90
 800567c:	08007e94 	.word	0x08007e94
 8005680:	08007e98 	.word	0x08007e98
 8005684:	08007e9c 	.word	0x08007e9c
 8005688:	08007ea0 	.word	0x08007ea0
 800568c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800568e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005690:	429a      	cmp	r2, r3
 8005692:	bfa8      	it	ge
 8005694:	461a      	movge	r2, r3
 8005696:	2a00      	cmp	r2, #0
 8005698:	4691      	mov	r9, r2
 800569a:	dc37      	bgt.n	800570c <_printf_float+0x370>
 800569c:	f04f 0b00 	mov.w	fp, #0
 80056a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056a4:	f104 021a 	add.w	r2, r4, #26
 80056a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80056aa:	9305      	str	r3, [sp, #20]
 80056ac:	eba3 0309 	sub.w	r3, r3, r9
 80056b0:	455b      	cmp	r3, fp
 80056b2:	dc33      	bgt.n	800571c <_printf_float+0x380>
 80056b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056b8:	429a      	cmp	r2, r3
 80056ba:	db3b      	blt.n	8005734 <_printf_float+0x398>
 80056bc:	6823      	ldr	r3, [r4, #0]
 80056be:	07da      	lsls	r2, r3, #31
 80056c0:	d438      	bmi.n	8005734 <_printf_float+0x398>
 80056c2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80056c6:	eba2 0903 	sub.w	r9, r2, r3
 80056ca:	9b05      	ldr	r3, [sp, #20]
 80056cc:	1ad2      	subs	r2, r2, r3
 80056ce:	4591      	cmp	r9, r2
 80056d0:	bfa8      	it	ge
 80056d2:	4691      	movge	r9, r2
 80056d4:	f1b9 0f00 	cmp.w	r9, #0
 80056d8:	dc35      	bgt.n	8005746 <_printf_float+0x3aa>
 80056da:	f04f 0800 	mov.w	r8, #0
 80056de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056e2:	f104 0a1a 	add.w	sl, r4, #26
 80056e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056ea:	1a9b      	subs	r3, r3, r2
 80056ec:	eba3 0309 	sub.w	r3, r3, r9
 80056f0:	4543      	cmp	r3, r8
 80056f2:	f77f af79 	ble.w	80055e8 <_printf_float+0x24c>
 80056f6:	2301      	movs	r3, #1
 80056f8:	4652      	mov	r2, sl
 80056fa:	4631      	mov	r1, r6
 80056fc:	4628      	mov	r0, r5
 80056fe:	47b8      	blx	r7
 8005700:	3001      	adds	r0, #1
 8005702:	f43f aeaa 	beq.w	800545a <_printf_float+0xbe>
 8005706:	f108 0801 	add.w	r8, r8, #1
 800570a:	e7ec      	b.n	80056e6 <_printf_float+0x34a>
 800570c:	4613      	mov	r3, r2
 800570e:	4631      	mov	r1, r6
 8005710:	4642      	mov	r2, r8
 8005712:	4628      	mov	r0, r5
 8005714:	47b8      	blx	r7
 8005716:	3001      	adds	r0, #1
 8005718:	d1c0      	bne.n	800569c <_printf_float+0x300>
 800571a:	e69e      	b.n	800545a <_printf_float+0xbe>
 800571c:	2301      	movs	r3, #1
 800571e:	4631      	mov	r1, r6
 8005720:	4628      	mov	r0, r5
 8005722:	9205      	str	r2, [sp, #20]
 8005724:	47b8      	blx	r7
 8005726:	3001      	adds	r0, #1
 8005728:	f43f ae97 	beq.w	800545a <_printf_float+0xbe>
 800572c:	9a05      	ldr	r2, [sp, #20]
 800572e:	f10b 0b01 	add.w	fp, fp, #1
 8005732:	e7b9      	b.n	80056a8 <_printf_float+0x30c>
 8005734:	ee18 3a10 	vmov	r3, s16
 8005738:	4652      	mov	r2, sl
 800573a:	4631      	mov	r1, r6
 800573c:	4628      	mov	r0, r5
 800573e:	47b8      	blx	r7
 8005740:	3001      	adds	r0, #1
 8005742:	d1be      	bne.n	80056c2 <_printf_float+0x326>
 8005744:	e689      	b.n	800545a <_printf_float+0xbe>
 8005746:	9a05      	ldr	r2, [sp, #20]
 8005748:	464b      	mov	r3, r9
 800574a:	4442      	add	r2, r8
 800574c:	4631      	mov	r1, r6
 800574e:	4628      	mov	r0, r5
 8005750:	47b8      	blx	r7
 8005752:	3001      	adds	r0, #1
 8005754:	d1c1      	bne.n	80056da <_printf_float+0x33e>
 8005756:	e680      	b.n	800545a <_printf_float+0xbe>
 8005758:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800575a:	2a01      	cmp	r2, #1
 800575c:	dc01      	bgt.n	8005762 <_printf_float+0x3c6>
 800575e:	07db      	lsls	r3, r3, #31
 8005760:	d53a      	bpl.n	80057d8 <_printf_float+0x43c>
 8005762:	2301      	movs	r3, #1
 8005764:	4642      	mov	r2, r8
 8005766:	4631      	mov	r1, r6
 8005768:	4628      	mov	r0, r5
 800576a:	47b8      	blx	r7
 800576c:	3001      	adds	r0, #1
 800576e:	f43f ae74 	beq.w	800545a <_printf_float+0xbe>
 8005772:	ee18 3a10 	vmov	r3, s16
 8005776:	4652      	mov	r2, sl
 8005778:	4631      	mov	r1, r6
 800577a:	4628      	mov	r0, r5
 800577c:	47b8      	blx	r7
 800577e:	3001      	adds	r0, #1
 8005780:	f43f ae6b 	beq.w	800545a <_printf_float+0xbe>
 8005784:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005788:	2200      	movs	r2, #0
 800578a:	2300      	movs	r3, #0
 800578c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005790:	f7fb f99a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005794:	b9d8      	cbnz	r0, 80057ce <_printf_float+0x432>
 8005796:	f10a 33ff 	add.w	r3, sl, #4294967295
 800579a:	f108 0201 	add.w	r2, r8, #1
 800579e:	4631      	mov	r1, r6
 80057a0:	4628      	mov	r0, r5
 80057a2:	47b8      	blx	r7
 80057a4:	3001      	adds	r0, #1
 80057a6:	d10e      	bne.n	80057c6 <_printf_float+0x42a>
 80057a8:	e657      	b.n	800545a <_printf_float+0xbe>
 80057aa:	2301      	movs	r3, #1
 80057ac:	4652      	mov	r2, sl
 80057ae:	4631      	mov	r1, r6
 80057b0:	4628      	mov	r0, r5
 80057b2:	47b8      	blx	r7
 80057b4:	3001      	adds	r0, #1
 80057b6:	f43f ae50 	beq.w	800545a <_printf_float+0xbe>
 80057ba:	f108 0801 	add.w	r8, r8, #1
 80057be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057c0:	3b01      	subs	r3, #1
 80057c2:	4543      	cmp	r3, r8
 80057c4:	dcf1      	bgt.n	80057aa <_printf_float+0x40e>
 80057c6:	464b      	mov	r3, r9
 80057c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80057cc:	e6da      	b.n	8005584 <_printf_float+0x1e8>
 80057ce:	f04f 0800 	mov.w	r8, #0
 80057d2:	f104 0a1a 	add.w	sl, r4, #26
 80057d6:	e7f2      	b.n	80057be <_printf_float+0x422>
 80057d8:	2301      	movs	r3, #1
 80057da:	4642      	mov	r2, r8
 80057dc:	e7df      	b.n	800579e <_printf_float+0x402>
 80057de:	2301      	movs	r3, #1
 80057e0:	464a      	mov	r2, r9
 80057e2:	4631      	mov	r1, r6
 80057e4:	4628      	mov	r0, r5
 80057e6:	47b8      	blx	r7
 80057e8:	3001      	adds	r0, #1
 80057ea:	f43f ae36 	beq.w	800545a <_printf_float+0xbe>
 80057ee:	f108 0801 	add.w	r8, r8, #1
 80057f2:	68e3      	ldr	r3, [r4, #12]
 80057f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80057f6:	1a5b      	subs	r3, r3, r1
 80057f8:	4543      	cmp	r3, r8
 80057fa:	dcf0      	bgt.n	80057de <_printf_float+0x442>
 80057fc:	e6f8      	b.n	80055f0 <_printf_float+0x254>
 80057fe:	f04f 0800 	mov.w	r8, #0
 8005802:	f104 0919 	add.w	r9, r4, #25
 8005806:	e7f4      	b.n	80057f2 <_printf_float+0x456>

08005808 <_printf_common>:
 8005808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800580c:	4616      	mov	r6, r2
 800580e:	4699      	mov	r9, r3
 8005810:	688a      	ldr	r2, [r1, #8]
 8005812:	690b      	ldr	r3, [r1, #16]
 8005814:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005818:	4293      	cmp	r3, r2
 800581a:	bfb8      	it	lt
 800581c:	4613      	movlt	r3, r2
 800581e:	6033      	str	r3, [r6, #0]
 8005820:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005824:	4607      	mov	r7, r0
 8005826:	460c      	mov	r4, r1
 8005828:	b10a      	cbz	r2, 800582e <_printf_common+0x26>
 800582a:	3301      	adds	r3, #1
 800582c:	6033      	str	r3, [r6, #0]
 800582e:	6823      	ldr	r3, [r4, #0]
 8005830:	0699      	lsls	r1, r3, #26
 8005832:	bf42      	ittt	mi
 8005834:	6833      	ldrmi	r3, [r6, #0]
 8005836:	3302      	addmi	r3, #2
 8005838:	6033      	strmi	r3, [r6, #0]
 800583a:	6825      	ldr	r5, [r4, #0]
 800583c:	f015 0506 	ands.w	r5, r5, #6
 8005840:	d106      	bne.n	8005850 <_printf_common+0x48>
 8005842:	f104 0a19 	add.w	sl, r4, #25
 8005846:	68e3      	ldr	r3, [r4, #12]
 8005848:	6832      	ldr	r2, [r6, #0]
 800584a:	1a9b      	subs	r3, r3, r2
 800584c:	42ab      	cmp	r3, r5
 800584e:	dc26      	bgt.n	800589e <_printf_common+0x96>
 8005850:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005854:	1e13      	subs	r3, r2, #0
 8005856:	6822      	ldr	r2, [r4, #0]
 8005858:	bf18      	it	ne
 800585a:	2301      	movne	r3, #1
 800585c:	0692      	lsls	r2, r2, #26
 800585e:	d42b      	bmi.n	80058b8 <_printf_common+0xb0>
 8005860:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005864:	4649      	mov	r1, r9
 8005866:	4638      	mov	r0, r7
 8005868:	47c0      	blx	r8
 800586a:	3001      	adds	r0, #1
 800586c:	d01e      	beq.n	80058ac <_printf_common+0xa4>
 800586e:	6823      	ldr	r3, [r4, #0]
 8005870:	6922      	ldr	r2, [r4, #16]
 8005872:	f003 0306 	and.w	r3, r3, #6
 8005876:	2b04      	cmp	r3, #4
 8005878:	bf02      	ittt	eq
 800587a:	68e5      	ldreq	r5, [r4, #12]
 800587c:	6833      	ldreq	r3, [r6, #0]
 800587e:	1aed      	subeq	r5, r5, r3
 8005880:	68a3      	ldr	r3, [r4, #8]
 8005882:	bf0c      	ite	eq
 8005884:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005888:	2500      	movne	r5, #0
 800588a:	4293      	cmp	r3, r2
 800588c:	bfc4      	itt	gt
 800588e:	1a9b      	subgt	r3, r3, r2
 8005890:	18ed      	addgt	r5, r5, r3
 8005892:	2600      	movs	r6, #0
 8005894:	341a      	adds	r4, #26
 8005896:	42b5      	cmp	r5, r6
 8005898:	d11a      	bne.n	80058d0 <_printf_common+0xc8>
 800589a:	2000      	movs	r0, #0
 800589c:	e008      	b.n	80058b0 <_printf_common+0xa8>
 800589e:	2301      	movs	r3, #1
 80058a0:	4652      	mov	r2, sl
 80058a2:	4649      	mov	r1, r9
 80058a4:	4638      	mov	r0, r7
 80058a6:	47c0      	blx	r8
 80058a8:	3001      	adds	r0, #1
 80058aa:	d103      	bne.n	80058b4 <_printf_common+0xac>
 80058ac:	f04f 30ff 	mov.w	r0, #4294967295
 80058b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058b4:	3501      	adds	r5, #1
 80058b6:	e7c6      	b.n	8005846 <_printf_common+0x3e>
 80058b8:	18e1      	adds	r1, r4, r3
 80058ba:	1c5a      	adds	r2, r3, #1
 80058bc:	2030      	movs	r0, #48	; 0x30
 80058be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058c2:	4422      	add	r2, r4
 80058c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058cc:	3302      	adds	r3, #2
 80058ce:	e7c7      	b.n	8005860 <_printf_common+0x58>
 80058d0:	2301      	movs	r3, #1
 80058d2:	4622      	mov	r2, r4
 80058d4:	4649      	mov	r1, r9
 80058d6:	4638      	mov	r0, r7
 80058d8:	47c0      	blx	r8
 80058da:	3001      	adds	r0, #1
 80058dc:	d0e6      	beq.n	80058ac <_printf_common+0xa4>
 80058de:	3601      	adds	r6, #1
 80058e0:	e7d9      	b.n	8005896 <_printf_common+0x8e>
	...

080058e4 <_printf_i>:
 80058e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058e8:	7e0f      	ldrb	r7, [r1, #24]
 80058ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058ec:	2f78      	cmp	r7, #120	; 0x78
 80058ee:	4691      	mov	r9, r2
 80058f0:	4680      	mov	r8, r0
 80058f2:	460c      	mov	r4, r1
 80058f4:	469a      	mov	sl, r3
 80058f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80058fa:	d807      	bhi.n	800590c <_printf_i+0x28>
 80058fc:	2f62      	cmp	r7, #98	; 0x62
 80058fe:	d80a      	bhi.n	8005916 <_printf_i+0x32>
 8005900:	2f00      	cmp	r7, #0
 8005902:	f000 80d4 	beq.w	8005aae <_printf_i+0x1ca>
 8005906:	2f58      	cmp	r7, #88	; 0x58
 8005908:	f000 80c0 	beq.w	8005a8c <_printf_i+0x1a8>
 800590c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005910:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005914:	e03a      	b.n	800598c <_printf_i+0xa8>
 8005916:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800591a:	2b15      	cmp	r3, #21
 800591c:	d8f6      	bhi.n	800590c <_printf_i+0x28>
 800591e:	a101      	add	r1, pc, #4	; (adr r1, 8005924 <_printf_i+0x40>)
 8005920:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005924:	0800597d 	.word	0x0800597d
 8005928:	08005991 	.word	0x08005991
 800592c:	0800590d 	.word	0x0800590d
 8005930:	0800590d 	.word	0x0800590d
 8005934:	0800590d 	.word	0x0800590d
 8005938:	0800590d 	.word	0x0800590d
 800593c:	08005991 	.word	0x08005991
 8005940:	0800590d 	.word	0x0800590d
 8005944:	0800590d 	.word	0x0800590d
 8005948:	0800590d 	.word	0x0800590d
 800594c:	0800590d 	.word	0x0800590d
 8005950:	08005a95 	.word	0x08005a95
 8005954:	080059bd 	.word	0x080059bd
 8005958:	08005a4f 	.word	0x08005a4f
 800595c:	0800590d 	.word	0x0800590d
 8005960:	0800590d 	.word	0x0800590d
 8005964:	08005ab7 	.word	0x08005ab7
 8005968:	0800590d 	.word	0x0800590d
 800596c:	080059bd 	.word	0x080059bd
 8005970:	0800590d 	.word	0x0800590d
 8005974:	0800590d 	.word	0x0800590d
 8005978:	08005a57 	.word	0x08005a57
 800597c:	682b      	ldr	r3, [r5, #0]
 800597e:	1d1a      	adds	r2, r3, #4
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	602a      	str	r2, [r5, #0]
 8005984:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005988:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800598c:	2301      	movs	r3, #1
 800598e:	e09f      	b.n	8005ad0 <_printf_i+0x1ec>
 8005990:	6820      	ldr	r0, [r4, #0]
 8005992:	682b      	ldr	r3, [r5, #0]
 8005994:	0607      	lsls	r7, r0, #24
 8005996:	f103 0104 	add.w	r1, r3, #4
 800599a:	6029      	str	r1, [r5, #0]
 800599c:	d501      	bpl.n	80059a2 <_printf_i+0xbe>
 800599e:	681e      	ldr	r6, [r3, #0]
 80059a0:	e003      	b.n	80059aa <_printf_i+0xc6>
 80059a2:	0646      	lsls	r6, r0, #25
 80059a4:	d5fb      	bpl.n	800599e <_printf_i+0xba>
 80059a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80059aa:	2e00      	cmp	r6, #0
 80059ac:	da03      	bge.n	80059b6 <_printf_i+0xd2>
 80059ae:	232d      	movs	r3, #45	; 0x2d
 80059b0:	4276      	negs	r6, r6
 80059b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059b6:	485a      	ldr	r0, [pc, #360]	; (8005b20 <_printf_i+0x23c>)
 80059b8:	230a      	movs	r3, #10
 80059ba:	e012      	b.n	80059e2 <_printf_i+0xfe>
 80059bc:	682b      	ldr	r3, [r5, #0]
 80059be:	6820      	ldr	r0, [r4, #0]
 80059c0:	1d19      	adds	r1, r3, #4
 80059c2:	6029      	str	r1, [r5, #0]
 80059c4:	0605      	lsls	r5, r0, #24
 80059c6:	d501      	bpl.n	80059cc <_printf_i+0xe8>
 80059c8:	681e      	ldr	r6, [r3, #0]
 80059ca:	e002      	b.n	80059d2 <_printf_i+0xee>
 80059cc:	0641      	lsls	r1, r0, #25
 80059ce:	d5fb      	bpl.n	80059c8 <_printf_i+0xe4>
 80059d0:	881e      	ldrh	r6, [r3, #0]
 80059d2:	4853      	ldr	r0, [pc, #332]	; (8005b20 <_printf_i+0x23c>)
 80059d4:	2f6f      	cmp	r7, #111	; 0x6f
 80059d6:	bf0c      	ite	eq
 80059d8:	2308      	moveq	r3, #8
 80059da:	230a      	movne	r3, #10
 80059dc:	2100      	movs	r1, #0
 80059de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059e2:	6865      	ldr	r5, [r4, #4]
 80059e4:	60a5      	str	r5, [r4, #8]
 80059e6:	2d00      	cmp	r5, #0
 80059e8:	bfa2      	ittt	ge
 80059ea:	6821      	ldrge	r1, [r4, #0]
 80059ec:	f021 0104 	bicge.w	r1, r1, #4
 80059f0:	6021      	strge	r1, [r4, #0]
 80059f2:	b90e      	cbnz	r6, 80059f8 <_printf_i+0x114>
 80059f4:	2d00      	cmp	r5, #0
 80059f6:	d04b      	beq.n	8005a90 <_printf_i+0x1ac>
 80059f8:	4615      	mov	r5, r2
 80059fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80059fe:	fb03 6711 	mls	r7, r3, r1, r6
 8005a02:	5dc7      	ldrb	r7, [r0, r7]
 8005a04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a08:	4637      	mov	r7, r6
 8005a0a:	42bb      	cmp	r3, r7
 8005a0c:	460e      	mov	r6, r1
 8005a0e:	d9f4      	bls.n	80059fa <_printf_i+0x116>
 8005a10:	2b08      	cmp	r3, #8
 8005a12:	d10b      	bne.n	8005a2c <_printf_i+0x148>
 8005a14:	6823      	ldr	r3, [r4, #0]
 8005a16:	07de      	lsls	r6, r3, #31
 8005a18:	d508      	bpl.n	8005a2c <_printf_i+0x148>
 8005a1a:	6923      	ldr	r3, [r4, #16]
 8005a1c:	6861      	ldr	r1, [r4, #4]
 8005a1e:	4299      	cmp	r1, r3
 8005a20:	bfde      	ittt	le
 8005a22:	2330      	movle	r3, #48	; 0x30
 8005a24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a28:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a2c:	1b52      	subs	r2, r2, r5
 8005a2e:	6122      	str	r2, [r4, #16]
 8005a30:	f8cd a000 	str.w	sl, [sp]
 8005a34:	464b      	mov	r3, r9
 8005a36:	aa03      	add	r2, sp, #12
 8005a38:	4621      	mov	r1, r4
 8005a3a:	4640      	mov	r0, r8
 8005a3c:	f7ff fee4 	bl	8005808 <_printf_common>
 8005a40:	3001      	adds	r0, #1
 8005a42:	d14a      	bne.n	8005ada <_printf_i+0x1f6>
 8005a44:	f04f 30ff 	mov.w	r0, #4294967295
 8005a48:	b004      	add	sp, #16
 8005a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a4e:	6823      	ldr	r3, [r4, #0]
 8005a50:	f043 0320 	orr.w	r3, r3, #32
 8005a54:	6023      	str	r3, [r4, #0]
 8005a56:	4833      	ldr	r0, [pc, #204]	; (8005b24 <_printf_i+0x240>)
 8005a58:	2778      	movs	r7, #120	; 0x78
 8005a5a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a5e:	6823      	ldr	r3, [r4, #0]
 8005a60:	6829      	ldr	r1, [r5, #0]
 8005a62:	061f      	lsls	r7, r3, #24
 8005a64:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a68:	d402      	bmi.n	8005a70 <_printf_i+0x18c>
 8005a6a:	065f      	lsls	r7, r3, #25
 8005a6c:	bf48      	it	mi
 8005a6e:	b2b6      	uxthmi	r6, r6
 8005a70:	07df      	lsls	r7, r3, #31
 8005a72:	bf48      	it	mi
 8005a74:	f043 0320 	orrmi.w	r3, r3, #32
 8005a78:	6029      	str	r1, [r5, #0]
 8005a7a:	bf48      	it	mi
 8005a7c:	6023      	strmi	r3, [r4, #0]
 8005a7e:	b91e      	cbnz	r6, 8005a88 <_printf_i+0x1a4>
 8005a80:	6823      	ldr	r3, [r4, #0]
 8005a82:	f023 0320 	bic.w	r3, r3, #32
 8005a86:	6023      	str	r3, [r4, #0]
 8005a88:	2310      	movs	r3, #16
 8005a8a:	e7a7      	b.n	80059dc <_printf_i+0xf8>
 8005a8c:	4824      	ldr	r0, [pc, #144]	; (8005b20 <_printf_i+0x23c>)
 8005a8e:	e7e4      	b.n	8005a5a <_printf_i+0x176>
 8005a90:	4615      	mov	r5, r2
 8005a92:	e7bd      	b.n	8005a10 <_printf_i+0x12c>
 8005a94:	682b      	ldr	r3, [r5, #0]
 8005a96:	6826      	ldr	r6, [r4, #0]
 8005a98:	6961      	ldr	r1, [r4, #20]
 8005a9a:	1d18      	adds	r0, r3, #4
 8005a9c:	6028      	str	r0, [r5, #0]
 8005a9e:	0635      	lsls	r5, r6, #24
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	d501      	bpl.n	8005aa8 <_printf_i+0x1c4>
 8005aa4:	6019      	str	r1, [r3, #0]
 8005aa6:	e002      	b.n	8005aae <_printf_i+0x1ca>
 8005aa8:	0670      	lsls	r0, r6, #25
 8005aaa:	d5fb      	bpl.n	8005aa4 <_printf_i+0x1c0>
 8005aac:	8019      	strh	r1, [r3, #0]
 8005aae:	2300      	movs	r3, #0
 8005ab0:	6123      	str	r3, [r4, #16]
 8005ab2:	4615      	mov	r5, r2
 8005ab4:	e7bc      	b.n	8005a30 <_printf_i+0x14c>
 8005ab6:	682b      	ldr	r3, [r5, #0]
 8005ab8:	1d1a      	adds	r2, r3, #4
 8005aba:	602a      	str	r2, [r5, #0]
 8005abc:	681d      	ldr	r5, [r3, #0]
 8005abe:	6862      	ldr	r2, [r4, #4]
 8005ac0:	2100      	movs	r1, #0
 8005ac2:	4628      	mov	r0, r5
 8005ac4:	f7fa fb84 	bl	80001d0 <memchr>
 8005ac8:	b108      	cbz	r0, 8005ace <_printf_i+0x1ea>
 8005aca:	1b40      	subs	r0, r0, r5
 8005acc:	6060      	str	r0, [r4, #4]
 8005ace:	6863      	ldr	r3, [r4, #4]
 8005ad0:	6123      	str	r3, [r4, #16]
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ad8:	e7aa      	b.n	8005a30 <_printf_i+0x14c>
 8005ada:	6923      	ldr	r3, [r4, #16]
 8005adc:	462a      	mov	r2, r5
 8005ade:	4649      	mov	r1, r9
 8005ae0:	4640      	mov	r0, r8
 8005ae2:	47d0      	blx	sl
 8005ae4:	3001      	adds	r0, #1
 8005ae6:	d0ad      	beq.n	8005a44 <_printf_i+0x160>
 8005ae8:	6823      	ldr	r3, [r4, #0]
 8005aea:	079b      	lsls	r3, r3, #30
 8005aec:	d413      	bmi.n	8005b16 <_printf_i+0x232>
 8005aee:	68e0      	ldr	r0, [r4, #12]
 8005af0:	9b03      	ldr	r3, [sp, #12]
 8005af2:	4298      	cmp	r0, r3
 8005af4:	bfb8      	it	lt
 8005af6:	4618      	movlt	r0, r3
 8005af8:	e7a6      	b.n	8005a48 <_printf_i+0x164>
 8005afa:	2301      	movs	r3, #1
 8005afc:	4632      	mov	r2, r6
 8005afe:	4649      	mov	r1, r9
 8005b00:	4640      	mov	r0, r8
 8005b02:	47d0      	blx	sl
 8005b04:	3001      	adds	r0, #1
 8005b06:	d09d      	beq.n	8005a44 <_printf_i+0x160>
 8005b08:	3501      	adds	r5, #1
 8005b0a:	68e3      	ldr	r3, [r4, #12]
 8005b0c:	9903      	ldr	r1, [sp, #12]
 8005b0e:	1a5b      	subs	r3, r3, r1
 8005b10:	42ab      	cmp	r3, r5
 8005b12:	dcf2      	bgt.n	8005afa <_printf_i+0x216>
 8005b14:	e7eb      	b.n	8005aee <_printf_i+0x20a>
 8005b16:	2500      	movs	r5, #0
 8005b18:	f104 0619 	add.w	r6, r4, #25
 8005b1c:	e7f5      	b.n	8005b0a <_printf_i+0x226>
 8005b1e:	bf00      	nop
 8005b20:	08007ea2 	.word	0x08007ea2
 8005b24:	08007eb3 	.word	0x08007eb3

08005b28 <std>:
 8005b28:	2300      	movs	r3, #0
 8005b2a:	b510      	push	{r4, lr}
 8005b2c:	4604      	mov	r4, r0
 8005b2e:	e9c0 3300 	strd	r3, r3, [r0]
 8005b32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b36:	6083      	str	r3, [r0, #8]
 8005b38:	8181      	strh	r1, [r0, #12]
 8005b3a:	6643      	str	r3, [r0, #100]	; 0x64
 8005b3c:	81c2      	strh	r2, [r0, #14]
 8005b3e:	6183      	str	r3, [r0, #24]
 8005b40:	4619      	mov	r1, r3
 8005b42:	2208      	movs	r2, #8
 8005b44:	305c      	adds	r0, #92	; 0x5c
 8005b46:	f000 f902 	bl	8005d4e <memset>
 8005b4a:	4b05      	ldr	r3, [pc, #20]	; (8005b60 <std+0x38>)
 8005b4c:	6263      	str	r3, [r4, #36]	; 0x24
 8005b4e:	4b05      	ldr	r3, [pc, #20]	; (8005b64 <std+0x3c>)
 8005b50:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b52:	4b05      	ldr	r3, [pc, #20]	; (8005b68 <std+0x40>)
 8005b54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b56:	4b05      	ldr	r3, [pc, #20]	; (8005b6c <std+0x44>)
 8005b58:	6224      	str	r4, [r4, #32]
 8005b5a:	6323      	str	r3, [r4, #48]	; 0x30
 8005b5c:	bd10      	pop	{r4, pc}
 8005b5e:	bf00      	nop
 8005b60:	08005cc9 	.word	0x08005cc9
 8005b64:	08005ceb 	.word	0x08005ceb
 8005b68:	08005d23 	.word	0x08005d23
 8005b6c:	08005d47 	.word	0x08005d47

08005b70 <stdio_exit_handler>:
 8005b70:	4a02      	ldr	r2, [pc, #8]	; (8005b7c <stdio_exit_handler+0xc>)
 8005b72:	4903      	ldr	r1, [pc, #12]	; (8005b80 <stdio_exit_handler+0x10>)
 8005b74:	4803      	ldr	r0, [pc, #12]	; (8005b84 <stdio_exit_handler+0x14>)
 8005b76:	f000 b869 	b.w	8005c4c <_fwalk_sglue>
 8005b7a:	bf00      	nop
 8005b7c:	20000040 	.word	0x20000040
 8005b80:	080076b1 	.word	0x080076b1
 8005b84:	2000004c 	.word	0x2000004c

08005b88 <cleanup_stdio>:
 8005b88:	6841      	ldr	r1, [r0, #4]
 8005b8a:	4b0c      	ldr	r3, [pc, #48]	; (8005bbc <cleanup_stdio+0x34>)
 8005b8c:	4299      	cmp	r1, r3
 8005b8e:	b510      	push	{r4, lr}
 8005b90:	4604      	mov	r4, r0
 8005b92:	d001      	beq.n	8005b98 <cleanup_stdio+0x10>
 8005b94:	f001 fd8c 	bl	80076b0 <_fflush_r>
 8005b98:	68a1      	ldr	r1, [r4, #8]
 8005b9a:	4b09      	ldr	r3, [pc, #36]	; (8005bc0 <cleanup_stdio+0x38>)
 8005b9c:	4299      	cmp	r1, r3
 8005b9e:	d002      	beq.n	8005ba6 <cleanup_stdio+0x1e>
 8005ba0:	4620      	mov	r0, r4
 8005ba2:	f001 fd85 	bl	80076b0 <_fflush_r>
 8005ba6:	68e1      	ldr	r1, [r4, #12]
 8005ba8:	4b06      	ldr	r3, [pc, #24]	; (8005bc4 <cleanup_stdio+0x3c>)
 8005baa:	4299      	cmp	r1, r3
 8005bac:	d004      	beq.n	8005bb8 <cleanup_stdio+0x30>
 8005bae:	4620      	mov	r0, r4
 8005bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bb4:	f001 bd7c 	b.w	80076b0 <_fflush_r>
 8005bb8:	bd10      	pop	{r4, pc}
 8005bba:	bf00      	nop
 8005bbc:	20000408 	.word	0x20000408
 8005bc0:	20000470 	.word	0x20000470
 8005bc4:	200004d8 	.word	0x200004d8

08005bc8 <global_stdio_init.part.0>:
 8005bc8:	b510      	push	{r4, lr}
 8005bca:	4b0b      	ldr	r3, [pc, #44]	; (8005bf8 <global_stdio_init.part.0+0x30>)
 8005bcc:	4c0b      	ldr	r4, [pc, #44]	; (8005bfc <global_stdio_init.part.0+0x34>)
 8005bce:	4a0c      	ldr	r2, [pc, #48]	; (8005c00 <global_stdio_init.part.0+0x38>)
 8005bd0:	601a      	str	r2, [r3, #0]
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	2104      	movs	r1, #4
 8005bd8:	f7ff ffa6 	bl	8005b28 <std>
 8005bdc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005be0:	2201      	movs	r2, #1
 8005be2:	2109      	movs	r1, #9
 8005be4:	f7ff ffa0 	bl	8005b28 <std>
 8005be8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005bec:	2202      	movs	r2, #2
 8005bee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bf2:	2112      	movs	r1, #18
 8005bf4:	f7ff bf98 	b.w	8005b28 <std>
 8005bf8:	20000540 	.word	0x20000540
 8005bfc:	20000408 	.word	0x20000408
 8005c00:	08005b71 	.word	0x08005b71

08005c04 <__sfp_lock_acquire>:
 8005c04:	4801      	ldr	r0, [pc, #4]	; (8005c0c <__sfp_lock_acquire+0x8>)
 8005c06:	f000 b92f 	b.w	8005e68 <__retarget_lock_acquire_recursive>
 8005c0a:	bf00      	nop
 8005c0c:	20000549 	.word	0x20000549

08005c10 <__sfp_lock_release>:
 8005c10:	4801      	ldr	r0, [pc, #4]	; (8005c18 <__sfp_lock_release+0x8>)
 8005c12:	f000 b92a 	b.w	8005e6a <__retarget_lock_release_recursive>
 8005c16:	bf00      	nop
 8005c18:	20000549 	.word	0x20000549

08005c1c <__sinit>:
 8005c1c:	b510      	push	{r4, lr}
 8005c1e:	4604      	mov	r4, r0
 8005c20:	f7ff fff0 	bl	8005c04 <__sfp_lock_acquire>
 8005c24:	6a23      	ldr	r3, [r4, #32]
 8005c26:	b11b      	cbz	r3, 8005c30 <__sinit+0x14>
 8005c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c2c:	f7ff bff0 	b.w	8005c10 <__sfp_lock_release>
 8005c30:	4b04      	ldr	r3, [pc, #16]	; (8005c44 <__sinit+0x28>)
 8005c32:	6223      	str	r3, [r4, #32]
 8005c34:	4b04      	ldr	r3, [pc, #16]	; (8005c48 <__sinit+0x2c>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1f5      	bne.n	8005c28 <__sinit+0xc>
 8005c3c:	f7ff ffc4 	bl	8005bc8 <global_stdio_init.part.0>
 8005c40:	e7f2      	b.n	8005c28 <__sinit+0xc>
 8005c42:	bf00      	nop
 8005c44:	08005b89 	.word	0x08005b89
 8005c48:	20000540 	.word	0x20000540

08005c4c <_fwalk_sglue>:
 8005c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c50:	4607      	mov	r7, r0
 8005c52:	4688      	mov	r8, r1
 8005c54:	4614      	mov	r4, r2
 8005c56:	2600      	movs	r6, #0
 8005c58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c5c:	f1b9 0901 	subs.w	r9, r9, #1
 8005c60:	d505      	bpl.n	8005c6e <_fwalk_sglue+0x22>
 8005c62:	6824      	ldr	r4, [r4, #0]
 8005c64:	2c00      	cmp	r4, #0
 8005c66:	d1f7      	bne.n	8005c58 <_fwalk_sglue+0xc>
 8005c68:	4630      	mov	r0, r6
 8005c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c6e:	89ab      	ldrh	r3, [r5, #12]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d907      	bls.n	8005c84 <_fwalk_sglue+0x38>
 8005c74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	d003      	beq.n	8005c84 <_fwalk_sglue+0x38>
 8005c7c:	4629      	mov	r1, r5
 8005c7e:	4638      	mov	r0, r7
 8005c80:	47c0      	blx	r8
 8005c82:	4306      	orrs	r6, r0
 8005c84:	3568      	adds	r5, #104	; 0x68
 8005c86:	e7e9      	b.n	8005c5c <_fwalk_sglue+0x10>

08005c88 <siprintf>:
 8005c88:	b40e      	push	{r1, r2, r3}
 8005c8a:	b500      	push	{lr}
 8005c8c:	b09c      	sub	sp, #112	; 0x70
 8005c8e:	ab1d      	add	r3, sp, #116	; 0x74
 8005c90:	9002      	str	r0, [sp, #8]
 8005c92:	9006      	str	r0, [sp, #24]
 8005c94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c98:	4809      	ldr	r0, [pc, #36]	; (8005cc0 <siprintf+0x38>)
 8005c9a:	9107      	str	r1, [sp, #28]
 8005c9c:	9104      	str	r1, [sp, #16]
 8005c9e:	4909      	ldr	r1, [pc, #36]	; (8005cc4 <siprintf+0x3c>)
 8005ca0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ca4:	9105      	str	r1, [sp, #20]
 8005ca6:	6800      	ldr	r0, [r0, #0]
 8005ca8:	9301      	str	r3, [sp, #4]
 8005caa:	a902      	add	r1, sp, #8
 8005cac:	f001 fb7c 	bl	80073a8 <_svfiprintf_r>
 8005cb0:	9b02      	ldr	r3, [sp, #8]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	701a      	strb	r2, [r3, #0]
 8005cb6:	b01c      	add	sp, #112	; 0x70
 8005cb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cbc:	b003      	add	sp, #12
 8005cbe:	4770      	bx	lr
 8005cc0:	20000098 	.word	0x20000098
 8005cc4:	ffff0208 	.word	0xffff0208

08005cc8 <__sread>:
 8005cc8:	b510      	push	{r4, lr}
 8005cca:	460c      	mov	r4, r1
 8005ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cd0:	f000 f86c 	bl	8005dac <_read_r>
 8005cd4:	2800      	cmp	r0, #0
 8005cd6:	bfab      	itete	ge
 8005cd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005cda:	89a3      	ldrhlt	r3, [r4, #12]
 8005cdc:	181b      	addge	r3, r3, r0
 8005cde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005ce2:	bfac      	ite	ge
 8005ce4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005ce6:	81a3      	strhlt	r3, [r4, #12]
 8005ce8:	bd10      	pop	{r4, pc}

08005cea <__swrite>:
 8005cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cee:	461f      	mov	r7, r3
 8005cf0:	898b      	ldrh	r3, [r1, #12]
 8005cf2:	05db      	lsls	r3, r3, #23
 8005cf4:	4605      	mov	r5, r0
 8005cf6:	460c      	mov	r4, r1
 8005cf8:	4616      	mov	r6, r2
 8005cfa:	d505      	bpl.n	8005d08 <__swrite+0x1e>
 8005cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d00:	2302      	movs	r3, #2
 8005d02:	2200      	movs	r2, #0
 8005d04:	f000 f840 	bl	8005d88 <_lseek_r>
 8005d08:	89a3      	ldrh	r3, [r4, #12]
 8005d0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d12:	81a3      	strh	r3, [r4, #12]
 8005d14:	4632      	mov	r2, r6
 8005d16:	463b      	mov	r3, r7
 8005d18:	4628      	mov	r0, r5
 8005d1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d1e:	f000 b867 	b.w	8005df0 <_write_r>

08005d22 <__sseek>:
 8005d22:	b510      	push	{r4, lr}
 8005d24:	460c      	mov	r4, r1
 8005d26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d2a:	f000 f82d 	bl	8005d88 <_lseek_r>
 8005d2e:	1c43      	adds	r3, r0, #1
 8005d30:	89a3      	ldrh	r3, [r4, #12]
 8005d32:	bf15      	itete	ne
 8005d34:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d3e:	81a3      	strheq	r3, [r4, #12]
 8005d40:	bf18      	it	ne
 8005d42:	81a3      	strhne	r3, [r4, #12]
 8005d44:	bd10      	pop	{r4, pc}

08005d46 <__sclose>:
 8005d46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d4a:	f000 b80d 	b.w	8005d68 <_close_r>

08005d4e <memset>:
 8005d4e:	4402      	add	r2, r0
 8005d50:	4603      	mov	r3, r0
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d100      	bne.n	8005d58 <memset+0xa>
 8005d56:	4770      	bx	lr
 8005d58:	f803 1b01 	strb.w	r1, [r3], #1
 8005d5c:	e7f9      	b.n	8005d52 <memset+0x4>
	...

08005d60 <_localeconv_r>:
 8005d60:	4800      	ldr	r0, [pc, #0]	; (8005d64 <_localeconv_r+0x4>)
 8005d62:	4770      	bx	lr
 8005d64:	2000018c 	.word	0x2000018c

08005d68 <_close_r>:
 8005d68:	b538      	push	{r3, r4, r5, lr}
 8005d6a:	4d06      	ldr	r5, [pc, #24]	; (8005d84 <_close_r+0x1c>)
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	4604      	mov	r4, r0
 8005d70:	4608      	mov	r0, r1
 8005d72:	602b      	str	r3, [r5, #0]
 8005d74:	f7fb fcf3 	bl	800175e <_close>
 8005d78:	1c43      	adds	r3, r0, #1
 8005d7a:	d102      	bne.n	8005d82 <_close_r+0x1a>
 8005d7c:	682b      	ldr	r3, [r5, #0]
 8005d7e:	b103      	cbz	r3, 8005d82 <_close_r+0x1a>
 8005d80:	6023      	str	r3, [r4, #0]
 8005d82:	bd38      	pop	{r3, r4, r5, pc}
 8005d84:	20000544 	.word	0x20000544

08005d88 <_lseek_r>:
 8005d88:	b538      	push	{r3, r4, r5, lr}
 8005d8a:	4d07      	ldr	r5, [pc, #28]	; (8005da8 <_lseek_r+0x20>)
 8005d8c:	4604      	mov	r4, r0
 8005d8e:	4608      	mov	r0, r1
 8005d90:	4611      	mov	r1, r2
 8005d92:	2200      	movs	r2, #0
 8005d94:	602a      	str	r2, [r5, #0]
 8005d96:	461a      	mov	r2, r3
 8005d98:	f7fb fd08 	bl	80017ac <_lseek>
 8005d9c:	1c43      	adds	r3, r0, #1
 8005d9e:	d102      	bne.n	8005da6 <_lseek_r+0x1e>
 8005da0:	682b      	ldr	r3, [r5, #0]
 8005da2:	b103      	cbz	r3, 8005da6 <_lseek_r+0x1e>
 8005da4:	6023      	str	r3, [r4, #0]
 8005da6:	bd38      	pop	{r3, r4, r5, pc}
 8005da8:	20000544 	.word	0x20000544

08005dac <_read_r>:
 8005dac:	b538      	push	{r3, r4, r5, lr}
 8005dae:	4d07      	ldr	r5, [pc, #28]	; (8005dcc <_read_r+0x20>)
 8005db0:	4604      	mov	r4, r0
 8005db2:	4608      	mov	r0, r1
 8005db4:	4611      	mov	r1, r2
 8005db6:	2200      	movs	r2, #0
 8005db8:	602a      	str	r2, [r5, #0]
 8005dba:	461a      	mov	r2, r3
 8005dbc:	f7fb fc96 	bl	80016ec <_read>
 8005dc0:	1c43      	adds	r3, r0, #1
 8005dc2:	d102      	bne.n	8005dca <_read_r+0x1e>
 8005dc4:	682b      	ldr	r3, [r5, #0]
 8005dc6:	b103      	cbz	r3, 8005dca <_read_r+0x1e>
 8005dc8:	6023      	str	r3, [r4, #0]
 8005dca:	bd38      	pop	{r3, r4, r5, pc}
 8005dcc:	20000544 	.word	0x20000544

08005dd0 <_sbrk_r>:
 8005dd0:	b538      	push	{r3, r4, r5, lr}
 8005dd2:	4d06      	ldr	r5, [pc, #24]	; (8005dec <_sbrk_r+0x1c>)
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	4604      	mov	r4, r0
 8005dd8:	4608      	mov	r0, r1
 8005dda:	602b      	str	r3, [r5, #0]
 8005ddc:	f7fb fcf4 	bl	80017c8 <_sbrk>
 8005de0:	1c43      	adds	r3, r0, #1
 8005de2:	d102      	bne.n	8005dea <_sbrk_r+0x1a>
 8005de4:	682b      	ldr	r3, [r5, #0]
 8005de6:	b103      	cbz	r3, 8005dea <_sbrk_r+0x1a>
 8005de8:	6023      	str	r3, [r4, #0]
 8005dea:	bd38      	pop	{r3, r4, r5, pc}
 8005dec:	20000544 	.word	0x20000544

08005df0 <_write_r>:
 8005df0:	b538      	push	{r3, r4, r5, lr}
 8005df2:	4d07      	ldr	r5, [pc, #28]	; (8005e10 <_write_r+0x20>)
 8005df4:	4604      	mov	r4, r0
 8005df6:	4608      	mov	r0, r1
 8005df8:	4611      	mov	r1, r2
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	602a      	str	r2, [r5, #0]
 8005dfe:	461a      	mov	r2, r3
 8005e00:	f7fb fc91 	bl	8001726 <_write>
 8005e04:	1c43      	adds	r3, r0, #1
 8005e06:	d102      	bne.n	8005e0e <_write_r+0x1e>
 8005e08:	682b      	ldr	r3, [r5, #0]
 8005e0a:	b103      	cbz	r3, 8005e0e <_write_r+0x1e>
 8005e0c:	6023      	str	r3, [r4, #0]
 8005e0e:	bd38      	pop	{r3, r4, r5, pc}
 8005e10:	20000544 	.word	0x20000544

08005e14 <__errno>:
 8005e14:	4b01      	ldr	r3, [pc, #4]	; (8005e1c <__errno+0x8>)
 8005e16:	6818      	ldr	r0, [r3, #0]
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	20000098 	.word	0x20000098

08005e20 <__libc_init_array>:
 8005e20:	b570      	push	{r4, r5, r6, lr}
 8005e22:	4d0d      	ldr	r5, [pc, #52]	; (8005e58 <__libc_init_array+0x38>)
 8005e24:	4c0d      	ldr	r4, [pc, #52]	; (8005e5c <__libc_init_array+0x3c>)
 8005e26:	1b64      	subs	r4, r4, r5
 8005e28:	10a4      	asrs	r4, r4, #2
 8005e2a:	2600      	movs	r6, #0
 8005e2c:	42a6      	cmp	r6, r4
 8005e2e:	d109      	bne.n	8005e44 <__libc_init_array+0x24>
 8005e30:	4d0b      	ldr	r5, [pc, #44]	; (8005e60 <__libc_init_array+0x40>)
 8005e32:	4c0c      	ldr	r4, [pc, #48]	; (8005e64 <__libc_init_array+0x44>)
 8005e34:	f001 ffd0 	bl	8007dd8 <_init>
 8005e38:	1b64      	subs	r4, r4, r5
 8005e3a:	10a4      	asrs	r4, r4, #2
 8005e3c:	2600      	movs	r6, #0
 8005e3e:	42a6      	cmp	r6, r4
 8005e40:	d105      	bne.n	8005e4e <__libc_init_array+0x2e>
 8005e42:	bd70      	pop	{r4, r5, r6, pc}
 8005e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e48:	4798      	blx	r3
 8005e4a:	3601      	adds	r6, #1
 8005e4c:	e7ee      	b.n	8005e2c <__libc_init_array+0xc>
 8005e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e52:	4798      	blx	r3
 8005e54:	3601      	adds	r6, #1
 8005e56:	e7f2      	b.n	8005e3e <__libc_init_array+0x1e>
 8005e58:	08008204 	.word	0x08008204
 8005e5c:	08008204 	.word	0x08008204
 8005e60:	08008204 	.word	0x08008204
 8005e64:	08008208 	.word	0x08008208

08005e68 <__retarget_lock_acquire_recursive>:
 8005e68:	4770      	bx	lr

08005e6a <__retarget_lock_release_recursive>:
 8005e6a:	4770      	bx	lr

08005e6c <quorem>:
 8005e6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e70:	6903      	ldr	r3, [r0, #16]
 8005e72:	690c      	ldr	r4, [r1, #16]
 8005e74:	42a3      	cmp	r3, r4
 8005e76:	4607      	mov	r7, r0
 8005e78:	db7e      	blt.n	8005f78 <quorem+0x10c>
 8005e7a:	3c01      	subs	r4, #1
 8005e7c:	f101 0814 	add.w	r8, r1, #20
 8005e80:	f100 0514 	add.w	r5, r0, #20
 8005e84:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e88:	9301      	str	r3, [sp, #4]
 8005e8a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005e8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e92:	3301      	adds	r3, #1
 8005e94:	429a      	cmp	r2, r3
 8005e96:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005e9a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005e9e:	fbb2 f6f3 	udiv	r6, r2, r3
 8005ea2:	d331      	bcc.n	8005f08 <quorem+0x9c>
 8005ea4:	f04f 0e00 	mov.w	lr, #0
 8005ea8:	4640      	mov	r0, r8
 8005eaa:	46ac      	mov	ip, r5
 8005eac:	46f2      	mov	sl, lr
 8005eae:	f850 2b04 	ldr.w	r2, [r0], #4
 8005eb2:	b293      	uxth	r3, r2
 8005eb4:	fb06 e303 	mla	r3, r6, r3, lr
 8005eb8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005ebc:	0c1a      	lsrs	r2, r3, #16
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	ebaa 0303 	sub.w	r3, sl, r3
 8005ec4:	f8dc a000 	ldr.w	sl, [ip]
 8005ec8:	fa13 f38a 	uxtah	r3, r3, sl
 8005ecc:	fb06 220e 	mla	r2, r6, lr, r2
 8005ed0:	9300      	str	r3, [sp, #0]
 8005ed2:	9b00      	ldr	r3, [sp, #0]
 8005ed4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005ed8:	b292      	uxth	r2, r2
 8005eda:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005ede:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ee2:	f8bd 3000 	ldrh.w	r3, [sp]
 8005ee6:	4581      	cmp	r9, r0
 8005ee8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005eec:	f84c 3b04 	str.w	r3, [ip], #4
 8005ef0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005ef4:	d2db      	bcs.n	8005eae <quorem+0x42>
 8005ef6:	f855 300b 	ldr.w	r3, [r5, fp]
 8005efa:	b92b      	cbnz	r3, 8005f08 <quorem+0x9c>
 8005efc:	9b01      	ldr	r3, [sp, #4]
 8005efe:	3b04      	subs	r3, #4
 8005f00:	429d      	cmp	r5, r3
 8005f02:	461a      	mov	r2, r3
 8005f04:	d32c      	bcc.n	8005f60 <quorem+0xf4>
 8005f06:	613c      	str	r4, [r7, #16]
 8005f08:	4638      	mov	r0, r7
 8005f0a:	f001 f8f3 	bl	80070f4 <__mcmp>
 8005f0e:	2800      	cmp	r0, #0
 8005f10:	db22      	blt.n	8005f58 <quorem+0xec>
 8005f12:	3601      	adds	r6, #1
 8005f14:	4629      	mov	r1, r5
 8005f16:	2000      	movs	r0, #0
 8005f18:	f858 2b04 	ldr.w	r2, [r8], #4
 8005f1c:	f8d1 c000 	ldr.w	ip, [r1]
 8005f20:	b293      	uxth	r3, r2
 8005f22:	1ac3      	subs	r3, r0, r3
 8005f24:	0c12      	lsrs	r2, r2, #16
 8005f26:	fa13 f38c 	uxtah	r3, r3, ip
 8005f2a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005f2e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f38:	45c1      	cmp	r9, r8
 8005f3a:	f841 3b04 	str.w	r3, [r1], #4
 8005f3e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005f42:	d2e9      	bcs.n	8005f18 <quorem+0xac>
 8005f44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f48:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f4c:	b922      	cbnz	r2, 8005f58 <quorem+0xec>
 8005f4e:	3b04      	subs	r3, #4
 8005f50:	429d      	cmp	r5, r3
 8005f52:	461a      	mov	r2, r3
 8005f54:	d30a      	bcc.n	8005f6c <quorem+0x100>
 8005f56:	613c      	str	r4, [r7, #16]
 8005f58:	4630      	mov	r0, r6
 8005f5a:	b003      	add	sp, #12
 8005f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f60:	6812      	ldr	r2, [r2, #0]
 8005f62:	3b04      	subs	r3, #4
 8005f64:	2a00      	cmp	r2, #0
 8005f66:	d1ce      	bne.n	8005f06 <quorem+0x9a>
 8005f68:	3c01      	subs	r4, #1
 8005f6a:	e7c9      	b.n	8005f00 <quorem+0x94>
 8005f6c:	6812      	ldr	r2, [r2, #0]
 8005f6e:	3b04      	subs	r3, #4
 8005f70:	2a00      	cmp	r2, #0
 8005f72:	d1f0      	bne.n	8005f56 <quorem+0xea>
 8005f74:	3c01      	subs	r4, #1
 8005f76:	e7eb      	b.n	8005f50 <quorem+0xe4>
 8005f78:	2000      	movs	r0, #0
 8005f7a:	e7ee      	b.n	8005f5a <quorem+0xee>
 8005f7c:	0000      	movs	r0, r0
	...

08005f80 <_dtoa_r>:
 8005f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f84:	ed2d 8b04 	vpush	{d8-d9}
 8005f88:	69c5      	ldr	r5, [r0, #28]
 8005f8a:	b093      	sub	sp, #76	; 0x4c
 8005f8c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005f90:	ec57 6b10 	vmov	r6, r7, d0
 8005f94:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005f98:	9107      	str	r1, [sp, #28]
 8005f9a:	4604      	mov	r4, r0
 8005f9c:	920a      	str	r2, [sp, #40]	; 0x28
 8005f9e:	930d      	str	r3, [sp, #52]	; 0x34
 8005fa0:	b975      	cbnz	r5, 8005fc0 <_dtoa_r+0x40>
 8005fa2:	2010      	movs	r0, #16
 8005fa4:	f7ff f8a6 	bl	80050f4 <malloc>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	61e0      	str	r0, [r4, #28]
 8005fac:	b920      	cbnz	r0, 8005fb8 <_dtoa_r+0x38>
 8005fae:	4bae      	ldr	r3, [pc, #696]	; (8006268 <_dtoa_r+0x2e8>)
 8005fb0:	21ef      	movs	r1, #239	; 0xef
 8005fb2:	48ae      	ldr	r0, [pc, #696]	; (800626c <_dtoa_r+0x2ec>)
 8005fb4:	f001 fbcc 	bl	8007750 <__assert_func>
 8005fb8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005fbc:	6005      	str	r5, [r0, #0]
 8005fbe:	60c5      	str	r5, [r0, #12]
 8005fc0:	69e3      	ldr	r3, [r4, #28]
 8005fc2:	6819      	ldr	r1, [r3, #0]
 8005fc4:	b151      	cbz	r1, 8005fdc <_dtoa_r+0x5c>
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	604a      	str	r2, [r1, #4]
 8005fca:	2301      	movs	r3, #1
 8005fcc:	4093      	lsls	r3, r2
 8005fce:	608b      	str	r3, [r1, #8]
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	f000 fe53 	bl	8006c7c <_Bfree>
 8005fd6:	69e3      	ldr	r3, [r4, #28]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	601a      	str	r2, [r3, #0]
 8005fdc:	1e3b      	subs	r3, r7, #0
 8005fde:	bfbb      	ittet	lt
 8005fe0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005fe4:	9303      	strlt	r3, [sp, #12]
 8005fe6:	2300      	movge	r3, #0
 8005fe8:	2201      	movlt	r2, #1
 8005fea:	bfac      	ite	ge
 8005fec:	f8c8 3000 	strge.w	r3, [r8]
 8005ff0:	f8c8 2000 	strlt.w	r2, [r8]
 8005ff4:	4b9e      	ldr	r3, [pc, #632]	; (8006270 <_dtoa_r+0x2f0>)
 8005ff6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005ffa:	ea33 0308 	bics.w	r3, r3, r8
 8005ffe:	d11b      	bne.n	8006038 <_dtoa_r+0xb8>
 8006000:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006002:	f242 730f 	movw	r3, #9999	; 0x270f
 8006006:	6013      	str	r3, [r2, #0]
 8006008:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800600c:	4333      	orrs	r3, r6
 800600e:	f000 8593 	beq.w	8006b38 <_dtoa_r+0xbb8>
 8006012:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006014:	b963      	cbnz	r3, 8006030 <_dtoa_r+0xb0>
 8006016:	4b97      	ldr	r3, [pc, #604]	; (8006274 <_dtoa_r+0x2f4>)
 8006018:	e027      	b.n	800606a <_dtoa_r+0xea>
 800601a:	4b97      	ldr	r3, [pc, #604]	; (8006278 <_dtoa_r+0x2f8>)
 800601c:	9300      	str	r3, [sp, #0]
 800601e:	3308      	adds	r3, #8
 8006020:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006022:	6013      	str	r3, [r2, #0]
 8006024:	9800      	ldr	r0, [sp, #0]
 8006026:	b013      	add	sp, #76	; 0x4c
 8006028:	ecbd 8b04 	vpop	{d8-d9}
 800602c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006030:	4b90      	ldr	r3, [pc, #576]	; (8006274 <_dtoa_r+0x2f4>)
 8006032:	9300      	str	r3, [sp, #0]
 8006034:	3303      	adds	r3, #3
 8006036:	e7f3      	b.n	8006020 <_dtoa_r+0xa0>
 8006038:	ed9d 7b02 	vldr	d7, [sp, #8]
 800603c:	2200      	movs	r2, #0
 800603e:	ec51 0b17 	vmov	r0, r1, d7
 8006042:	eeb0 8a47 	vmov.f32	s16, s14
 8006046:	eef0 8a67 	vmov.f32	s17, s15
 800604a:	2300      	movs	r3, #0
 800604c:	f7fa fd3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006050:	4681      	mov	r9, r0
 8006052:	b160      	cbz	r0, 800606e <_dtoa_r+0xee>
 8006054:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006056:	2301      	movs	r3, #1
 8006058:	6013      	str	r3, [r2, #0]
 800605a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800605c:	2b00      	cmp	r3, #0
 800605e:	f000 8568 	beq.w	8006b32 <_dtoa_r+0xbb2>
 8006062:	4b86      	ldr	r3, [pc, #536]	; (800627c <_dtoa_r+0x2fc>)
 8006064:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006066:	6013      	str	r3, [r2, #0]
 8006068:	3b01      	subs	r3, #1
 800606a:	9300      	str	r3, [sp, #0]
 800606c:	e7da      	b.n	8006024 <_dtoa_r+0xa4>
 800606e:	aa10      	add	r2, sp, #64	; 0x40
 8006070:	a911      	add	r1, sp, #68	; 0x44
 8006072:	4620      	mov	r0, r4
 8006074:	eeb0 0a48 	vmov.f32	s0, s16
 8006078:	eef0 0a68 	vmov.f32	s1, s17
 800607c:	f001 f8e0 	bl	8007240 <__d2b>
 8006080:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006084:	4682      	mov	sl, r0
 8006086:	2d00      	cmp	r5, #0
 8006088:	d07f      	beq.n	800618a <_dtoa_r+0x20a>
 800608a:	ee18 3a90 	vmov	r3, s17
 800608e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006092:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006096:	ec51 0b18 	vmov	r0, r1, d8
 800609a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800609e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80060a2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80060a6:	4619      	mov	r1, r3
 80060a8:	2200      	movs	r2, #0
 80060aa:	4b75      	ldr	r3, [pc, #468]	; (8006280 <_dtoa_r+0x300>)
 80060ac:	f7fa f8ec 	bl	8000288 <__aeabi_dsub>
 80060b0:	a367      	add	r3, pc, #412	; (adr r3, 8006250 <_dtoa_r+0x2d0>)
 80060b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b6:	f7fa fa9f 	bl	80005f8 <__aeabi_dmul>
 80060ba:	a367      	add	r3, pc, #412	; (adr r3, 8006258 <_dtoa_r+0x2d8>)
 80060bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c0:	f7fa f8e4 	bl	800028c <__adddf3>
 80060c4:	4606      	mov	r6, r0
 80060c6:	4628      	mov	r0, r5
 80060c8:	460f      	mov	r7, r1
 80060ca:	f7fa fa2b 	bl	8000524 <__aeabi_i2d>
 80060ce:	a364      	add	r3, pc, #400	; (adr r3, 8006260 <_dtoa_r+0x2e0>)
 80060d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d4:	f7fa fa90 	bl	80005f8 <__aeabi_dmul>
 80060d8:	4602      	mov	r2, r0
 80060da:	460b      	mov	r3, r1
 80060dc:	4630      	mov	r0, r6
 80060de:	4639      	mov	r1, r7
 80060e0:	f7fa f8d4 	bl	800028c <__adddf3>
 80060e4:	4606      	mov	r6, r0
 80060e6:	460f      	mov	r7, r1
 80060e8:	f7fa fd36 	bl	8000b58 <__aeabi_d2iz>
 80060ec:	2200      	movs	r2, #0
 80060ee:	4683      	mov	fp, r0
 80060f0:	2300      	movs	r3, #0
 80060f2:	4630      	mov	r0, r6
 80060f4:	4639      	mov	r1, r7
 80060f6:	f7fa fcf1 	bl	8000adc <__aeabi_dcmplt>
 80060fa:	b148      	cbz	r0, 8006110 <_dtoa_r+0x190>
 80060fc:	4658      	mov	r0, fp
 80060fe:	f7fa fa11 	bl	8000524 <__aeabi_i2d>
 8006102:	4632      	mov	r2, r6
 8006104:	463b      	mov	r3, r7
 8006106:	f7fa fcdf 	bl	8000ac8 <__aeabi_dcmpeq>
 800610a:	b908      	cbnz	r0, 8006110 <_dtoa_r+0x190>
 800610c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006110:	f1bb 0f16 	cmp.w	fp, #22
 8006114:	d857      	bhi.n	80061c6 <_dtoa_r+0x246>
 8006116:	4b5b      	ldr	r3, [pc, #364]	; (8006284 <_dtoa_r+0x304>)
 8006118:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800611c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006120:	ec51 0b18 	vmov	r0, r1, d8
 8006124:	f7fa fcda 	bl	8000adc <__aeabi_dcmplt>
 8006128:	2800      	cmp	r0, #0
 800612a:	d04e      	beq.n	80061ca <_dtoa_r+0x24a>
 800612c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006130:	2300      	movs	r3, #0
 8006132:	930c      	str	r3, [sp, #48]	; 0x30
 8006134:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006136:	1b5b      	subs	r3, r3, r5
 8006138:	1e5a      	subs	r2, r3, #1
 800613a:	bf45      	ittet	mi
 800613c:	f1c3 0301 	rsbmi	r3, r3, #1
 8006140:	9305      	strmi	r3, [sp, #20]
 8006142:	2300      	movpl	r3, #0
 8006144:	2300      	movmi	r3, #0
 8006146:	9206      	str	r2, [sp, #24]
 8006148:	bf54      	ite	pl
 800614a:	9305      	strpl	r3, [sp, #20]
 800614c:	9306      	strmi	r3, [sp, #24]
 800614e:	f1bb 0f00 	cmp.w	fp, #0
 8006152:	db3c      	blt.n	80061ce <_dtoa_r+0x24e>
 8006154:	9b06      	ldr	r3, [sp, #24]
 8006156:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800615a:	445b      	add	r3, fp
 800615c:	9306      	str	r3, [sp, #24]
 800615e:	2300      	movs	r3, #0
 8006160:	9308      	str	r3, [sp, #32]
 8006162:	9b07      	ldr	r3, [sp, #28]
 8006164:	2b09      	cmp	r3, #9
 8006166:	d868      	bhi.n	800623a <_dtoa_r+0x2ba>
 8006168:	2b05      	cmp	r3, #5
 800616a:	bfc4      	itt	gt
 800616c:	3b04      	subgt	r3, #4
 800616e:	9307      	strgt	r3, [sp, #28]
 8006170:	9b07      	ldr	r3, [sp, #28]
 8006172:	f1a3 0302 	sub.w	r3, r3, #2
 8006176:	bfcc      	ite	gt
 8006178:	2500      	movgt	r5, #0
 800617a:	2501      	movle	r5, #1
 800617c:	2b03      	cmp	r3, #3
 800617e:	f200 8085 	bhi.w	800628c <_dtoa_r+0x30c>
 8006182:	e8df f003 	tbb	[pc, r3]
 8006186:	3b2e      	.short	0x3b2e
 8006188:	5839      	.short	0x5839
 800618a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800618e:	441d      	add	r5, r3
 8006190:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006194:	2b20      	cmp	r3, #32
 8006196:	bfc1      	itttt	gt
 8006198:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800619c:	fa08 f803 	lslgt.w	r8, r8, r3
 80061a0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80061a4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80061a8:	bfd6      	itet	le
 80061aa:	f1c3 0320 	rsble	r3, r3, #32
 80061ae:	ea48 0003 	orrgt.w	r0, r8, r3
 80061b2:	fa06 f003 	lslle.w	r0, r6, r3
 80061b6:	f7fa f9a5 	bl	8000504 <__aeabi_ui2d>
 80061ba:	2201      	movs	r2, #1
 80061bc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80061c0:	3d01      	subs	r5, #1
 80061c2:	920e      	str	r2, [sp, #56]	; 0x38
 80061c4:	e76f      	b.n	80060a6 <_dtoa_r+0x126>
 80061c6:	2301      	movs	r3, #1
 80061c8:	e7b3      	b.n	8006132 <_dtoa_r+0x1b2>
 80061ca:	900c      	str	r0, [sp, #48]	; 0x30
 80061cc:	e7b2      	b.n	8006134 <_dtoa_r+0x1b4>
 80061ce:	9b05      	ldr	r3, [sp, #20]
 80061d0:	eba3 030b 	sub.w	r3, r3, fp
 80061d4:	9305      	str	r3, [sp, #20]
 80061d6:	f1cb 0300 	rsb	r3, fp, #0
 80061da:	9308      	str	r3, [sp, #32]
 80061dc:	2300      	movs	r3, #0
 80061de:	930b      	str	r3, [sp, #44]	; 0x2c
 80061e0:	e7bf      	b.n	8006162 <_dtoa_r+0x1e2>
 80061e2:	2300      	movs	r3, #0
 80061e4:	9309      	str	r3, [sp, #36]	; 0x24
 80061e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	dc52      	bgt.n	8006292 <_dtoa_r+0x312>
 80061ec:	2301      	movs	r3, #1
 80061ee:	9301      	str	r3, [sp, #4]
 80061f0:	9304      	str	r3, [sp, #16]
 80061f2:	461a      	mov	r2, r3
 80061f4:	920a      	str	r2, [sp, #40]	; 0x28
 80061f6:	e00b      	b.n	8006210 <_dtoa_r+0x290>
 80061f8:	2301      	movs	r3, #1
 80061fa:	e7f3      	b.n	80061e4 <_dtoa_r+0x264>
 80061fc:	2300      	movs	r3, #0
 80061fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006202:	445b      	add	r3, fp
 8006204:	9301      	str	r3, [sp, #4]
 8006206:	3301      	adds	r3, #1
 8006208:	2b01      	cmp	r3, #1
 800620a:	9304      	str	r3, [sp, #16]
 800620c:	bfb8      	it	lt
 800620e:	2301      	movlt	r3, #1
 8006210:	69e0      	ldr	r0, [r4, #28]
 8006212:	2100      	movs	r1, #0
 8006214:	2204      	movs	r2, #4
 8006216:	f102 0614 	add.w	r6, r2, #20
 800621a:	429e      	cmp	r6, r3
 800621c:	d93d      	bls.n	800629a <_dtoa_r+0x31a>
 800621e:	6041      	str	r1, [r0, #4]
 8006220:	4620      	mov	r0, r4
 8006222:	f000 fceb 	bl	8006bfc <_Balloc>
 8006226:	9000      	str	r0, [sp, #0]
 8006228:	2800      	cmp	r0, #0
 800622a:	d139      	bne.n	80062a0 <_dtoa_r+0x320>
 800622c:	4b16      	ldr	r3, [pc, #88]	; (8006288 <_dtoa_r+0x308>)
 800622e:	4602      	mov	r2, r0
 8006230:	f240 11af 	movw	r1, #431	; 0x1af
 8006234:	e6bd      	b.n	8005fb2 <_dtoa_r+0x32>
 8006236:	2301      	movs	r3, #1
 8006238:	e7e1      	b.n	80061fe <_dtoa_r+0x27e>
 800623a:	2501      	movs	r5, #1
 800623c:	2300      	movs	r3, #0
 800623e:	9307      	str	r3, [sp, #28]
 8006240:	9509      	str	r5, [sp, #36]	; 0x24
 8006242:	f04f 33ff 	mov.w	r3, #4294967295
 8006246:	9301      	str	r3, [sp, #4]
 8006248:	9304      	str	r3, [sp, #16]
 800624a:	2200      	movs	r2, #0
 800624c:	2312      	movs	r3, #18
 800624e:	e7d1      	b.n	80061f4 <_dtoa_r+0x274>
 8006250:	636f4361 	.word	0x636f4361
 8006254:	3fd287a7 	.word	0x3fd287a7
 8006258:	8b60c8b3 	.word	0x8b60c8b3
 800625c:	3fc68a28 	.word	0x3fc68a28
 8006260:	509f79fb 	.word	0x509f79fb
 8006264:	3fd34413 	.word	0x3fd34413
 8006268:	08007ed1 	.word	0x08007ed1
 800626c:	08007ee8 	.word	0x08007ee8
 8006270:	7ff00000 	.word	0x7ff00000
 8006274:	08007ecd 	.word	0x08007ecd
 8006278:	08007ec4 	.word	0x08007ec4
 800627c:	08007ea1 	.word	0x08007ea1
 8006280:	3ff80000 	.word	0x3ff80000
 8006284:	08007fd8 	.word	0x08007fd8
 8006288:	08007f40 	.word	0x08007f40
 800628c:	2301      	movs	r3, #1
 800628e:	9309      	str	r3, [sp, #36]	; 0x24
 8006290:	e7d7      	b.n	8006242 <_dtoa_r+0x2c2>
 8006292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006294:	9301      	str	r3, [sp, #4]
 8006296:	9304      	str	r3, [sp, #16]
 8006298:	e7ba      	b.n	8006210 <_dtoa_r+0x290>
 800629a:	3101      	adds	r1, #1
 800629c:	0052      	lsls	r2, r2, #1
 800629e:	e7ba      	b.n	8006216 <_dtoa_r+0x296>
 80062a0:	69e3      	ldr	r3, [r4, #28]
 80062a2:	9a00      	ldr	r2, [sp, #0]
 80062a4:	601a      	str	r2, [r3, #0]
 80062a6:	9b04      	ldr	r3, [sp, #16]
 80062a8:	2b0e      	cmp	r3, #14
 80062aa:	f200 80a8 	bhi.w	80063fe <_dtoa_r+0x47e>
 80062ae:	2d00      	cmp	r5, #0
 80062b0:	f000 80a5 	beq.w	80063fe <_dtoa_r+0x47e>
 80062b4:	f1bb 0f00 	cmp.w	fp, #0
 80062b8:	dd38      	ble.n	800632c <_dtoa_r+0x3ac>
 80062ba:	4bc0      	ldr	r3, [pc, #768]	; (80065bc <_dtoa_r+0x63c>)
 80062bc:	f00b 020f 	and.w	r2, fp, #15
 80062c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062c4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80062c8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80062cc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80062d0:	d019      	beq.n	8006306 <_dtoa_r+0x386>
 80062d2:	4bbb      	ldr	r3, [pc, #748]	; (80065c0 <_dtoa_r+0x640>)
 80062d4:	ec51 0b18 	vmov	r0, r1, d8
 80062d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80062dc:	f7fa fab6 	bl	800084c <__aeabi_ddiv>
 80062e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062e4:	f008 080f 	and.w	r8, r8, #15
 80062e8:	2503      	movs	r5, #3
 80062ea:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80065c0 <_dtoa_r+0x640>
 80062ee:	f1b8 0f00 	cmp.w	r8, #0
 80062f2:	d10a      	bne.n	800630a <_dtoa_r+0x38a>
 80062f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062f8:	4632      	mov	r2, r6
 80062fa:	463b      	mov	r3, r7
 80062fc:	f7fa faa6 	bl	800084c <__aeabi_ddiv>
 8006300:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006304:	e02b      	b.n	800635e <_dtoa_r+0x3de>
 8006306:	2502      	movs	r5, #2
 8006308:	e7ef      	b.n	80062ea <_dtoa_r+0x36a>
 800630a:	f018 0f01 	tst.w	r8, #1
 800630e:	d008      	beq.n	8006322 <_dtoa_r+0x3a2>
 8006310:	4630      	mov	r0, r6
 8006312:	4639      	mov	r1, r7
 8006314:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006318:	f7fa f96e 	bl	80005f8 <__aeabi_dmul>
 800631c:	3501      	adds	r5, #1
 800631e:	4606      	mov	r6, r0
 8006320:	460f      	mov	r7, r1
 8006322:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006326:	f109 0908 	add.w	r9, r9, #8
 800632a:	e7e0      	b.n	80062ee <_dtoa_r+0x36e>
 800632c:	f000 809f 	beq.w	800646e <_dtoa_r+0x4ee>
 8006330:	f1cb 0600 	rsb	r6, fp, #0
 8006334:	4ba1      	ldr	r3, [pc, #644]	; (80065bc <_dtoa_r+0x63c>)
 8006336:	4fa2      	ldr	r7, [pc, #648]	; (80065c0 <_dtoa_r+0x640>)
 8006338:	f006 020f 	and.w	r2, r6, #15
 800633c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006344:	ec51 0b18 	vmov	r0, r1, d8
 8006348:	f7fa f956 	bl	80005f8 <__aeabi_dmul>
 800634c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006350:	1136      	asrs	r6, r6, #4
 8006352:	2300      	movs	r3, #0
 8006354:	2502      	movs	r5, #2
 8006356:	2e00      	cmp	r6, #0
 8006358:	d17e      	bne.n	8006458 <_dtoa_r+0x4d8>
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1d0      	bne.n	8006300 <_dtoa_r+0x380>
 800635e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006360:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006364:	2b00      	cmp	r3, #0
 8006366:	f000 8084 	beq.w	8006472 <_dtoa_r+0x4f2>
 800636a:	4b96      	ldr	r3, [pc, #600]	; (80065c4 <_dtoa_r+0x644>)
 800636c:	2200      	movs	r2, #0
 800636e:	4640      	mov	r0, r8
 8006370:	4649      	mov	r1, r9
 8006372:	f7fa fbb3 	bl	8000adc <__aeabi_dcmplt>
 8006376:	2800      	cmp	r0, #0
 8006378:	d07b      	beq.n	8006472 <_dtoa_r+0x4f2>
 800637a:	9b04      	ldr	r3, [sp, #16]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d078      	beq.n	8006472 <_dtoa_r+0x4f2>
 8006380:	9b01      	ldr	r3, [sp, #4]
 8006382:	2b00      	cmp	r3, #0
 8006384:	dd39      	ble.n	80063fa <_dtoa_r+0x47a>
 8006386:	4b90      	ldr	r3, [pc, #576]	; (80065c8 <_dtoa_r+0x648>)
 8006388:	2200      	movs	r2, #0
 800638a:	4640      	mov	r0, r8
 800638c:	4649      	mov	r1, r9
 800638e:	f7fa f933 	bl	80005f8 <__aeabi_dmul>
 8006392:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006396:	9e01      	ldr	r6, [sp, #4]
 8006398:	f10b 37ff 	add.w	r7, fp, #4294967295
 800639c:	3501      	adds	r5, #1
 800639e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80063a2:	4628      	mov	r0, r5
 80063a4:	f7fa f8be 	bl	8000524 <__aeabi_i2d>
 80063a8:	4642      	mov	r2, r8
 80063aa:	464b      	mov	r3, r9
 80063ac:	f7fa f924 	bl	80005f8 <__aeabi_dmul>
 80063b0:	4b86      	ldr	r3, [pc, #536]	; (80065cc <_dtoa_r+0x64c>)
 80063b2:	2200      	movs	r2, #0
 80063b4:	f7f9 ff6a 	bl	800028c <__adddf3>
 80063b8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80063bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063c0:	9303      	str	r3, [sp, #12]
 80063c2:	2e00      	cmp	r6, #0
 80063c4:	d158      	bne.n	8006478 <_dtoa_r+0x4f8>
 80063c6:	4b82      	ldr	r3, [pc, #520]	; (80065d0 <_dtoa_r+0x650>)
 80063c8:	2200      	movs	r2, #0
 80063ca:	4640      	mov	r0, r8
 80063cc:	4649      	mov	r1, r9
 80063ce:	f7f9 ff5b 	bl	8000288 <__aeabi_dsub>
 80063d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063d6:	4680      	mov	r8, r0
 80063d8:	4689      	mov	r9, r1
 80063da:	f7fa fb9d 	bl	8000b18 <__aeabi_dcmpgt>
 80063de:	2800      	cmp	r0, #0
 80063e0:	f040 8296 	bne.w	8006910 <_dtoa_r+0x990>
 80063e4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80063e8:	4640      	mov	r0, r8
 80063ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80063ee:	4649      	mov	r1, r9
 80063f0:	f7fa fb74 	bl	8000adc <__aeabi_dcmplt>
 80063f4:	2800      	cmp	r0, #0
 80063f6:	f040 8289 	bne.w	800690c <_dtoa_r+0x98c>
 80063fa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80063fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006400:	2b00      	cmp	r3, #0
 8006402:	f2c0 814e 	blt.w	80066a2 <_dtoa_r+0x722>
 8006406:	f1bb 0f0e 	cmp.w	fp, #14
 800640a:	f300 814a 	bgt.w	80066a2 <_dtoa_r+0x722>
 800640e:	4b6b      	ldr	r3, [pc, #428]	; (80065bc <_dtoa_r+0x63c>)
 8006410:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006414:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800641a:	2b00      	cmp	r3, #0
 800641c:	f280 80dc 	bge.w	80065d8 <_dtoa_r+0x658>
 8006420:	9b04      	ldr	r3, [sp, #16]
 8006422:	2b00      	cmp	r3, #0
 8006424:	f300 80d8 	bgt.w	80065d8 <_dtoa_r+0x658>
 8006428:	f040 826f 	bne.w	800690a <_dtoa_r+0x98a>
 800642c:	4b68      	ldr	r3, [pc, #416]	; (80065d0 <_dtoa_r+0x650>)
 800642e:	2200      	movs	r2, #0
 8006430:	4640      	mov	r0, r8
 8006432:	4649      	mov	r1, r9
 8006434:	f7fa f8e0 	bl	80005f8 <__aeabi_dmul>
 8006438:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800643c:	f7fa fb62 	bl	8000b04 <__aeabi_dcmpge>
 8006440:	9e04      	ldr	r6, [sp, #16]
 8006442:	4637      	mov	r7, r6
 8006444:	2800      	cmp	r0, #0
 8006446:	f040 8245 	bne.w	80068d4 <_dtoa_r+0x954>
 800644a:	9d00      	ldr	r5, [sp, #0]
 800644c:	2331      	movs	r3, #49	; 0x31
 800644e:	f805 3b01 	strb.w	r3, [r5], #1
 8006452:	f10b 0b01 	add.w	fp, fp, #1
 8006456:	e241      	b.n	80068dc <_dtoa_r+0x95c>
 8006458:	07f2      	lsls	r2, r6, #31
 800645a:	d505      	bpl.n	8006468 <_dtoa_r+0x4e8>
 800645c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006460:	f7fa f8ca 	bl	80005f8 <__aeabi_dmul>
 8006464:	3501      	adds	r5, #1
 8006466:	2301      	movs	r3, #1
 8006468:	1076      	asrs	r6, r6, #1
 800646a:	3708      	adds	r7, #8
 800646c:	e773      	b.n	8006356 <_dtoa_r+0x3d6>
 800646e:	2502      	movs	r5, #2
 8006470:	e775      	b.n	800635e <_dtoa_r+0x3de>
 8006472:	9e04      	ldr	r6, [sp, #16]
 8006474:	465f      	mov	r7, fp
 8006476:	e792      	b.n	800639e <_dtoa_r+0x41e>
 8006478:	9900      	ldr	r1, [sp, #0]
 800647a:	4b50      	ldr	r3, [pc, #320]	; (80065bc <_dtoa_r+0x63c>)
 800647c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006480:	4431      	add	r1, r6
 8006482:	9102      	str	r1, [sp, #8]
 8006484:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006486:	eeb0 9a47 	vmov.f32	s18, s14
 800648a:	eef0 9a67 	vmov.f32	s19, s15
 800648e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006492:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006496:	2900      	cmp	r1, #0
 8006498:	d044      	beq.n	8006524 <_dtoa_r+0x5a4>
 800649a:	494e      	ldr	r1, [pc, #312]	; (80065d4 <_dtoa_r+0x654>)
 800649c:	2000      	movs	r0, #0
 800649e:	f7fa f9d5 	bl	800084c <__aeabi_ddiv>
 80064a2:	ec53 2b19 	vmov	r2, r3, d9
 80064a6:	f7f9 feef 	bl	8000288 <__aeabi_dsub>
 80064aa:	9d00      	ldr	r5, [sp, #0]
 80064ac:	ec41 0b19 	vmov	d9, r0, r1
 80064b0:	4649      	mov	r1, r9
 80064b2:	4640      	mov	r0, r8
 80064b4:	f7fa fb50 	bl	8000b58 <__aeabi_d2iz>
 80064b8:	4606      	mov	r6, r0
 80064ba:	f7fa f833 	bl	8000524 <__aeabi_i2d>
 80064be:	4602      	mov	r2, r0
 80064c0:	460b      	mov	r3, r1
 80064c2:	4640      	mov	r0, r8
 80064c4:	4649      	mov	r1, r9
 80064c6:	f7f9 fedf 	bl	8000288 <__aeabi_dsub>
 80064ca:	3630      	adds	r6, #48	; 0x30
 80064cc:	f805 6b01 	strb.w	r6, [r5], #1
 80064d0:	ec53 2b19 	vmov	r2, r3, d9
 80064d4:	4680      	mov	r8, r0
 80064d6:	4689      	mov	r9, r1
 80064d8:	f7fa fb00 	bl	8000adc <__aeabi_dcmplt>
 80064dc:	2800      	cmp	r0, #0
 80064de:	d164      	bne.n	80065aa <_dtoa_r+0x62a>
 80064e0:	4642      	mov	r2, r8
 80064e2:	464b      	mov	r3, r9
 80064e4:	4937      	ldr	r1, [pc, #220]	; (80065c4 <_dtoa_r+0x644>)
 80064e6:	2000      	movs	r0, #0
 80064e8:	f7f9 fece 	bl	8000288 <__aeabi_dsub>
 80064ec:	ec53 2b19 	vmov	r2, r3, d9
 80064f0:	f7fa faf4 	bl	8000adc <__aeabi_dcmplt>
 80064f4:	2800      	cmp	r0, #0
 80064f6:	f040 80b6 	bne.w	8006666 <_dtoa_r+0x6e6>
 80064fa:	9b02      	ldr	r3, [sp, #8]
 80064fc:	429d      	cmp	r5, r3
 80064fe:	f43f af7c 	beq.w	80063fa <_dtoa_r+0x47a>
 8006502:	4b31      	ldr	r3, [pc, #196]	; (80065c8 <_dtoa_r+0x648>)
 8006504:	ec51 0b19 	vmov	r0, r1, d9
 8006508:	2200      	movs	r2, #0
 800650a:	f7fa f875 	bl	80005f8 <__aeabi_dmul>
 800650e:	4b2e      	ldr	r3, [pc, #184]	; (80065c8 <_dtoa_r+0x648>)
 8006510:	ec41 0b19 	vmov	d9, r0, r1
 8006514:	2200      	movs	r2, #0
 8006516:	4640      	mov	r0, r8
 8006518:	4649      	mov	r1, r9
 800651a:	f7fa f86d 	bl	80005f8 <__aeabi_dmul>
 800651e:	4680      	mov	r8, r0
 8006520:	4689      	mov	r9, r1
 8006522:	e7c5      	b.n	80064b0 <_dtoa_r+0x530>
 8006524:	ec51 0b17 	vmov	r0, r1, d7
 8006528:	f7fa f866 	bl	80005f8 <__aeabi_dmul>
 800652c:	9b02      	ldr	r3, [sp, #8]
 800652e:	9d00      	ldr	r5, [sp, #0]
 8006530:	930f      	str	r3, [sp, #60]	; 0x3c
 8006532:	ec41 0b19 	vmov	d9, r0, r1
 8006536:	4649      	mov	r1, r9
 8006538:	4640      	mov	r0, r8
 800653a:	f7fa fb0d 	bl	8000b58 <__aeabi_d2iz>
 800653e:	4606      	mov	r6, r0
 8006540:	f7f9 fff0 	bl	8000524 <__aeabi_i2d>
 8006544:	3630      	adds	r6, #48	; 0x30
 8006546:	4602      	mov	r2, r0
 8006548:	460b      	mov	r3, r1
 800654a:	4640      	mov	r0, r8
 800654c:	4649      	mov	r1, r9
 800654e:	f7f9 fe9b 	bl	8000288 <__aeabi_dsub>
 8006552:	f805 6b01 	strb.w	r6, [r5], #1
 8006556:	9b02      	ldr	r3, [sp, #8]
 8006558:	429d      	cmp	r5, r3
 800655a:	4680      	mov	r8, r0
 800655c:	4689      	mov	r9, r1
 800655e:	f04f 0200 	mov.w	r2, #0
 8006562:	d124      	bne.n	80065ae <_dtoa_r+0x62e>
 8006564:	4b1b      	ldr	r3, [pc, #108]	; (80065d4 <_dtoa_r+0x654>)
 8006566:	ec51 0b19 	vmov	r0, r1, d9
 800656a:	f7f9 fe8f 	bl	800028c <__adddf3>
 800656e:	4602      	mov	r2, r0
 8006570:	460b      	mov	r3, r1
 8006572:	4640      	mov	r0, r8
 8006574:	4649      	mov	r1, r9
 8006576:	f7fa facf 	bl	8000b18 <__aeabi_dcmpgt>
 800657a:	2800      	cmp	r0, #0
 800657c:	d173      	bne.n	8006666 <_dtoa_r+0x6e6>
 800657e:	ec53 2b19 	vmov	r2, r3, d9
 8006582:	4914      	ldr	r1, [pc, #80]	; (80065d4 <_dtoa_r+0x654>)
 8006584:	2000      	movs	r0, #0
 8006586:	f7f9 fe7f 	bl	8000288 <__aeabi_dsub>
 800658a:	4602      	mov	r2, r0
 800658c:	460b      	mov	r3, r1
 800658e:	4640      	mov	r0, r8
 8006590:	4649      	mov	r1, r9
 8006592:	f7fa faa3 	bl	8000adc <__aeabi_dcmplt>
 8006596:	2800      	cmp	r0, #0
 8006598:	f43f af2f 	beq.w	80063fa <_dtoa_r+0x47a>
 800659c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800659e:	1e6b      	subs	r3, r5, #1
 80065a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80065a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80065a6:	2b30      	cmp	r3, #48	; 0x30
 80065a8:	d0f8      	beq.n	800659c <_dtoa_r+0x61c>
 80065aa:	46bb      	mov	fp, r7
 80065ac:	e04a      	b.n	8006644 <_dtoa_r+0x6c4>
 80065ae:	4b06      	ldr	r3, [pc, #24]	; (80065c8 <_dtoa_r+0x648>)
 80065b0:	f7fa f822 	bl	80005f8 <__aeabi_dmul>
 80065b4:	4680      	mov	r8, r0
 80065b6:	4689      	mov	r9, r1
 80065b8:	e7bd      	b.n	8006536 <_dtoa_r+0x5b6>
 80065ba:	bf00      	nop
 80065bc:	08007fd8 	.word	0x08007fd8
 80065c0:	08007fb0 	.word	0x08007fb0
 80065c4:	3ff00000 	.word	0x3ff00000
 80065c8:	40240000 	.word	0x40240000
 80065cc:	401c0000 	.word	0x401c0000
 80065d0:	40140000 	.word	0x40140000
 80065d4:	3fe00000 	.word	0x3fe00000
 80065d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80065dc:	9d00      	ldr	r5, [sp, #0]
 80065de:	4642      	mov	r2, r8
 80065e0:	464b      	mov	r3, r9
 80065e2:	4630      	mov	r0, r6
 80065e4:	4639      	mov	r1, r7
 80065e6:	f7fa f931 	bl	800084c <__aeabi_ddiv>
 80065ea:	f7fa fab5 	bl	8000b58 <__aeabi_d2iz>
 80065ee:	9001      	str	r0, [sp, #4]
 80065f0:	f7f9 ff98 	bl	8000524 <__aeabi_i2d>
 80065f4:	4642      	mov	r2, r8
 80065f6:	464b      	mov	r3, r9
 80065f8:	f7f9 fffe 	bl	80005f8 <__aeabi_dmul>
 80065fc:	4602      	mov	r2, r0
 80065fe:	460b      	mov	r3, r1
 8006600:	4630      	mov	r0, r6
 8006602:	4639      	mov	r1, r7
 8006604:	f7f9 fe40 	bl	8000288 <__aeabi_dsub>
 8006608:	9e01      	ldr	r6, [sp, #4]
 800660a:	9f04      	ldr	r7, [sp, #16]
 800660c:	3630      	adds	r6, #48	; 0x30
 800660e:	f805 6b01 	strb.w	r6, [r5], #1
 8006612:	9e00      	ldr	r6, [sp, #0]
 8006614:	1bae      	subs	r6, r5, r6
 8006616:	42b7      	cmp	r7, r6
 8006618:	4602      	mov	r2, r0
 800661a:	460b      	mov	r3, r1
 800661c:	d134      	bne.n	8006688 <_dtoa_r+0x708>
 800661e:	f7f9 fe35 	bl	800028c <__adddf3>
 8006622:	4642      	mov	r2, r8
 8006624:	464b      	mov	r3, r9
 8006626:	4606      	mov	r6, r0
 8006628:	460f      	mov	r7, r1
 800662a:	f7fa fa75 	bl	8000b18 <__aeabi_dcmpgt>
 800662e:	b9c8      	cbnz	r0, 8006664 <_dtoa_r+0x6e4>
 8006630:	4642      	mov	r2, r8
 8006632:	464b      	mov	r3, r9
 8006634:	4630      	mov	r0, r6
 8006636:	4639      	mov	r1, r7
 8006638:	f7fa fa46 	bl	8000ac8 <__aeabi_dcmpeq>
 800663c:	b110      	cbz	r0, 8006644 <_dtoa_r+0x6c4>
 800663e:	9b01      	ldr	r3, [sp, #4]
 8006640:	07db      	lsls	r3, r3, #31
 8006642:	d40f      	bmi.n	8006664 <_dtoa_r+0x6e4>
 8006644:	4651      	mov	r1, sl
 8006646:	4620      	mov	r0, r4
 8006648:	f000 fb18 	bl	8006c7c <_Bfree>
 800664c:	2300      	movs	r3, #0
 800664e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006650:	702b      	strb	r3, [r5, #0]
 8006652:	f10b 0301 	add.w	r3, fp, #1
 8006656:	6013      	str	r3, [r2, #0]
 8006658:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800665a:	2b00      	cmp	r3, #0
 800665c:	f43f ace2 	beq.w	8006024 <_dtoa_r+0xa4>
 8006660:	601d      	str	r5, [r3, #0]
 8006662:	e4df      	b.n	8006024 <_dtoa_r+0xa4>
 8006664:	465f      	mov	r7, fp
 8006666:	462b      	mov	r3, r5
 8006668:	461d      	mov	r5, r3
 800666a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800666e:	2a39      	cmp	r2, #57	; 0x39
 8006670:	d106      	bne.n	8006680 <_dtoa_r+0x700>
 8006672:	9a00      	ldr	r2, [sp, #0]
 8006674:	429a      	cmp	r2, r3
 8006676:	d1f7      	bne.n	8006668 <_dtoa_r+0x6e8>
 8006678:	9900      	ldr	r1, [sp, #0]
 800667a:	2230      	movs	r2, #48	; 0x30
 800667c:	3701      	adds	r7, #1
 800667e:	700a      	strb	r2, [r1, #0]
 8006680:	781a      	ldrb	r2, [r3, #0]
 8006682:	3201      	adds	r2, #1
 8006684:	701a      	strb	r2, [r3, #0]
 8006686:	e790      	b.n	80065aa <_dtoa_r+0x62a>
 8006688:	4ba3      	ldr	r3, [pc, #652]	; (8006918 <_dtoa_r+0x998>)
 800668a:	2200      	movs	r2, #0
 800668c:	f7f9 ffb4 	bl	80005f8 <__aeabi_dmul>
 8006690:	2200      	movs	r2, #0
 8006692:	2300      	movs	r3, #0
 8006694:	4606      	mov	r6, r0
 8006696:	460f      	mov	r7, r1
 8006698:	f7fa fa16 	bl	8000ac8 <__aeabi_dcmpeq>
 800669c:	2800      	cmp	r0, #0
 800669e:	d09e      	beq.n	80065de <_dtoa_r+0x65e>
 80066a0:	e7d0      	b.n	8006644 <_dtoa_r+0x6c4>
 80066a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066a4:	2a00      	cmp	r2, #0
 80066a6:	f000 80ca 	beq.w	800683e <_dtoa_r+0x8be>
 80066aa:	9a07      	ldr	r2, [sp, #28]
 80066ac:	2a01      	cmp	r2, #1
 80066ae:	f300 80ad 	bgt.w	800680c <_dtoa_r+0x88c>
 80066b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066b4:	2a00      	cmp	r2, #0
 80066b6:	f000 80a5 	beq.w	8006804 <_dtoa_r+0x884>
 80066ba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80066be:	9e08      	ldr	r6, [sp, #32]
 80066c0:	9d05      	ldr	r5, [sp, #20]
 80066c2:	9a05      	ldr	r2, [sp, #20]
 80066c4:	441a      	add	r2, r3
 80066c6:	9205      	str	r2, [sp, #20]
 80066c8:	9a06      	ldr	r2, [sp, #24]
 80066ca:	2101      	movs	r1, #1
 80066cc:	441a      	add	r2, r3
 80066ce:	4620      	mov	r0, r4
 80066d0:	9206      	str	r2, [sp, #24]
 80066d2:	f000 fb89 	bl	8006de8 <__i2b>
 80066d6:	4607      	mov	r7, r0
 80066d8:	b165      	cbz	r5, 80066f4 <_dtoa_r+0x774>
 80066da:	9b06      	ldr	r3, [sp, #24]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	dd09      	ble.n	80066f4 <_dtoa_r+0x774>
 80066e0:	42ab      	cmp	r3, r5
 80066e2:	9a05      	ldr	r2, [sp, #20]
 80066e4:	bfa8      	it	ge
 80066e6:	462b      	movge	r3, r5
 80066e8:	1ad2      	subs	r2, r2, r3
 80066ea:	9205      	str	r2, [sp, #20]
 80066ec:	9a06      	ldr	r2, [sp, #24]
 80066ee:	1aed      	subs	r5, r5, r3
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	9306      	str	r3, [sp, #24]
 80066f4:	9b08      	ldr	r3, [sp, #32]
 80066f6:	b1f3      	cbz	r3, 8006736 <_dtoa_r+0x7b6>
 80066f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	f000 80a3 	beq.w	8006846 <_dtoa_r+0x8c6>
 8006700:	2e00      	cmp	r6, #0
 8006702:	dd10      	ble.n	8006726 <_dtoa_r+0x7a6>
 8006704:	4639      	mov	r1, r7
 8006706:	4632      	mov	r2, r6
 8006708:	4620      	mov	r0, r4
 800670a:	f000 fc2d 	bl	8006f68 <__pow5mult>
 800670e:	4652      	mov	r2, sl
 8006710:	4601      	mov	r1, r0
 8006712:	4607      	mov	r7, r0
 8006714:	4620      	mov	r0, r4
 8006716:	f000 fb7d 	bl	8006e14 <__multiply>
 800671a:	4651      	mov	r1, sl
 800671c:	4680      	mov	r8, r0
 800671e:	4620      	mov	r0, r4
 8006720:	f000 faac 	bl	8006c7c <_Bfree>
 8006724:	46c2      	mov	sl, r8
 8006726:	9b08      	ldr	r3, [sp, #32]
 8006728:	1b9a      	subs	r2, r3, r6
 800672a:	d004      	beq.n	8006736 <_dtoa_r+0x7b6>
 800672c:	4651      	mov	r1, sl
 800672e:	4620      	mov	r0, r4
 8006730:	f000 fc1a 	bl	8006f68 <__pow5mult>
 8006734:	4682      	mov	sl, r0
 8006736:	2101      	movs	r1, #1
 8006738:	4620      	mov	r0, r4
 800673a:	f000 fb55 	bl	8006de8 <__i2b>
 800673e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006740:	2b00      	cmp	r3, #0
 8006742:	4606      	mov	r6, r0
 8006744:	f340 8081 	ble.w	800684a <_dtoa_r+0x8ca>
 8006748:	461a      	mov	r2, r3
 800674a:	4601      	mov	r1, r0
 800674c:	4620      	mov	r0, r4
 800674e:	f000 fc0b 	bl	8006f68 <__pow5mult>
 8006752:	9b07      	ldr	r3, [sp, #28]
 8006754:	2b01      	cmp	r3, #1
 8006756:	4606      	mov	r6, r0
 8006758:	dd7a      	ble.n	8006850 <_dtoa_r+0x8d0>
 800675a:	f04f 0800 	mov.w	r8, #0
 800675e:	6933      	ldr	r3, [r6, #16]
 8006760:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006764:	6918      	ldr	r0, [r3, #16]
 8006766:	f000 faf1 	bl	8006d4c <__hi0bits>
 800676a:	f1c0 0020 	rsb	r0, r0, #32
 800676e:	9b06      	ldr	r3, [sp, #24]
 8006770:	4418      	add	r0, r3
 8006772:	f010 001f 	ands.w	r0, r0, #31
 8006776:	f000 8094 	beq.w	80068a2 <_dtoa_r+0x922>
 800677a:	f1c0 0320 	rsb	r3, r0, #32
 800677e:	2b04      	cmp	r3, #4
 8006780:	f340 8085 	ble.w	800688e <_dtoa_r+0x90e>
 8006784:	9b05      	ldr	r3, [sp, #20]
 8006786:	f1c0 001c 	rsb	r0, r0, #28
 800678a:	4403      	add	r3, r0
 800678c:	9305      	str	r3, [sp, #20]
 800678e:	9b06      	ldr	r3, [sp, #24]
 8006790:	4403      	add	r3, r0
 8006792:	4405      	add	r5, r0
 8006794:	9306      	str	r3, [sp, #24]
 8006796:	9b05      	ldr	r3, [sp, #20]
 8006798:	2b00      	cmp	r3, #0
 800679a:	dd05      	ble.n	80067a8 <_dtoa_r+0x828>
 800679c:	4651      	mov	r1, sl
 800679e:	461a      	mov	r2, r3
 80067a0:	4620      	mov	r0, r4
 80067a2:	f000 fc3b 	bl	800701c <__lshift>
 80067a6:	4682      	mov	sl, r0
 80067a8:	9b06      	ldr	r3, [sp, #24]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	dd05      	ble.n	80067ba <_dtoa_r+0x83a>
 80067ae:	4631      	mov	r1, r6
 80067b0:	461a      	mov	r2, r3
 80067b2:	4620      	mov	r0, r4
 80067b4:	f000 fc32 	bl	800701c <__lshift>
 80067b8:	4606      	mov	r6, r0
 80067ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d072      	beq.n	80068a6 <_dtoa_r+0x926>
 80067c0:	4631      	mov	r1, r6
 80067c2:	4650      	mov	r0, sl
 80067c4:	f000 fc96 	bl	80070f4 <__mcmp>
 80067c8:	2800      	cmp	r0, #0
 80067ca:	da6c      	bge.n	80068a6 <_dtoa_r+0x926>
 80067cc:	2300      	movs	r3, #0
 80067ce:	4651      	mov	r1, sl
 80067d0:	220a      	movs	r2, #10
 80067d2:	4620      	mov	r0, r4
 80067d4:	f000 fa74 	bl	8006cc0 <__multadd>
 80067d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80067de:	4682      	mov	sl, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	f000 81b0 	beq.w	8006b46 <_dtoa_r+0xbc6>
 80067e6:	2300      	movs	r3, #0
 80067e8:	4639      	mov	r1, r7
 80067ea:	220a      	movs	r2, #10
 80067ec:	4620      	mov	r0, r4
 80067ee:	f000 fa67 	bl	8006cc0 <__multadd>
 80067f2:	9b01      	ldr	r3, [sp, #4]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	4607      	mov	r7, r0
 80067f8:	f300 8096 	bgt.w	8006928 <_dtoa_r+0x9a8>
 80067fc:	9b07      	ldr	r3, [sp, #28]
 80067fe:	2b02      	cmp	r3, #2
 8006800:	dc59      	bgt.n	80068b6 <_dtoa_r+0x936>
 8006802:	e091      	b.n	8006928 <_dtoa_r+0x9a8>
 8006804:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006806:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800680a:	e758      	b.n	80066be <_dtoa_r+0x73e>
 800680c:	9b04      	ldr	r3, [sp, #16]
 800680e:	1e5e      	subs	r6, r3, #1
 8006810:	9b08      	ldr	r3, [sp, #32]
 8006812:	42b3      	cmp	r3, r6
 8006814:	bfbf      	itttt	lt
 8006816:	9b08      	ldrlt	r3, [sp, #32]
 8006818:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800681a:	9608      	strlt	r6, [sp, #32]
 800681c:	1af3      	sublt	r3, r6, r3
 800681e:	bfb4      	ite	lt
 8006820:	18d2      	addlt	r2, r2, r3
 8006822:	1b9e      	subge	r6, r3, r6
 8006824:	9b04      	ldr	r3, [sp, #16]
 8006826:	bfbc      	itt	lt
 8006828:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800682a:	2600      	movlt	r6, #0
 800682c:	2b00      	cmp	r3, #0
 800682e:	bfb7      	itett	lt
 8006830:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006834:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006838:	1a9d      	sublt	r5, r3, r2
 800683a:	2300      	movlt	r3, #0
 800683c:	e741      	b.n	80066c2 <_dtoa_r+0x742>
 800683e:	9e08      	ldr	r6, [sp, #32]
 8006840:	9d05      	ldr	r5, [sp, #20]
 8006842:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006844:	e748      	b.n	80066d8 <_dtoa_r+0x758>
 8006846:	9a08      	ldr	r2, [sp, #32]
 8006848:	e770      	b.n	800672c <_dtoa_r+0x7ac>
 800684a:	9b07      	ldr	r3, [sp, #28]
 800684c:	2b01      	cmp	r3, #1
 800684e:	dc19      	bgt.n	8006884 <_dtoa_r+0x904>
 8006850:	9b02      	ldr	r3, [sp, #8]
 8006852:	b9bb      	cbnz	r3, 8006884 <_dtoa_r+0x904>
 8006854:	9b03      	ldr	r3, [sp, #12]
 8006856:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800685a:	b99b      	cbnz	r3, 8006884 <_dtoa_r+0x904>
 800685c:	9b03      	ldr	r3, [sp, #12]
 800685e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006862:	0d1b      	lsrs	r3, r3, #20
 8006864:	051b      	lsls	r3, r3, #20
 8006866:	b183      	cbz	r3, 800688a <_dtoa_r+0x90a>
 8006868:	9b05      	ldr	r3, [sp, #20]
 800686a:	3301      	adds	r3, #1
 800686c:	9305      	str	r3, [sp, #20]
 800686e:	9b06      	ldr	r3, [sp, #24]
 8006870:	3301      	adds	r3, #1
 8006872:	9306      	str	r3, [sp, #24]
 8006874:	f04f 0801 	mov.w	r8, #1
 8006878:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800687a:	2b00      	cmp	r3, #0
 800687c:	f47f af6f 	bne.w	800675e <_dtoa_r+0x7de>
 8006880:	2001      	movs	r0, #1
 8006882:	e774      	b.n	800676e <_dtoa_r+0x7ee>
 8006884:	f04f 0800 	mov.w	r8, #0
 8006888:	e7f6      	b.n	8006878 <_dtoa_r+0x8f8>
 800688a:	4698      	mov	r8, r3
 800688c:	e7f4      	b.n	8006878 <_dtoa_r+0x8f8>
 800688e:	d082      	beq.n	8006796 <_dtoa_r+0x816>
 8006890:	9a05      	ldr	r2, [sp, #20]
 8006892:	331c      	adds	r3, #28
 8006894:	441a      	add	r2, r3
 8006896:	9205      	str	r2, [sp, #20]
 8006898:	9a06      	ldr	r2, [sp, #24]
 800689a:	441a      	add	r2, r3
 800689c:	441d      	add	r5, r3
 800689e:	9206      	str	r2, [sp, #24]
 80068a0:	e779      	b.n	8006796 <_dtoa_r+0x816>
 80068a2:	4603      	mov	r3, r0
 80068a4:	e7f4      	b.n	8006890 <_dtoa_r+0x910>
 80068a6:	9b04      	ldr	r3, [sp, #16]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	dc37      	bgt.n	800691c <_dtoa_r+0x99c>
 80068ac:	9b07      	ldr	r3, [sp, #28]
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	dd34      	ble.n	800691c <_dtoa_r+0x99c>
 80068b2:	9b04      	ldr	r3, [sp, #16]
 80068b4:	9301      	str	r3, [sp, #4]
 80068b6:	9b01      	ldr	r3, [sp, #4]
 80068b8:	b963      	cbnz	r3, 80068d4 <_dtoa_r+0x954>
 80068ba:	4631      	mov	r1, r6
 80068bc:	2205      	movs	r2, #5
 80068be:	4620      	mov	r0, r4
 80068c0:	f000 f9fe 	bl	8006cc0 <__multadd>
 80068c4:	4601      	mov	r1, r0
 80068c6:	4606      	mov	r6, r0
 80068c8:	4650      	mov	r0, sl
 80068ca:	f000 fc13 	bl	80070f4 <__mcmp>
 80068ce:	2800      	cmp	r0, #0
 80068d0:	f73f adbb 	bgt.w	800644a <_dtoa_r+0x4ca>
 80068d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068d6:	9d00      	ldr	r5, [sp, #0]
 80068d8:	ea6f 0b03 	mvn.w	fp, r3
 80068dc:	f04f 0800 	mov.w	r8, #0
 80068e0:	4631      	mov	r1, r6
 80068e2:	4620      	mov	r0, r4
 80068e4:	f000 f9ca 	bl	8006c7c <_Bfree>
 80068e8:	2f00      	cmp	r7, #0
 80068ea:	f43f aeab 	beq.w	8006644 <_dtoa_r+0x6c4>
 80068ee:	f1b8 0f00 	cmp.w	r8, #0
 80068f2:	d005      	beq.n	8006900 <_dtoa_r+0x980>
 80068f4:	45b8      	cmp	r8, r7
 80068f6:	d003      	beq.n	8006900 <_dtoa_r+0x980>
 80068f8:	4641      	mov	r1, r8
 80068fa:	4620      	mov	r0, r4
 80068fc:	f000 f9be 	bl	8006c7c <_Bfree>
 8006900:	4639      	mov	r1, r7
 8006902:	4620      	mov	r0, r4
 8006904:	f000 f9ba 	bl	8006c7c <_Bfree>
 8006908:	e69c      	b.n	8006644 <_dtoa_r+0x6c4>
 800690a:	2600      	movs	r6, #0
 800690c:	4637      	mov	r7, r6
 800690e:	e7e1      	b.n	80068d4 <_dtoa_r+0x954>
 8006910:	46bb      	mov	fp, r7
 8006912:	4637      	mov	r7, r6
 8006914:	e599      	b.n	800644a <_dtoa_r+0x4ca>
 8006916:	bf00      	nop
 8006918:	40240000 	.word	0x40240000
 800691c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800691e:	2b00      	cmp	r3, #0
 8006920:	f000 80c8 	beq.w	8006ab4 <_dtoa_r+0xb34>
 8006924:	9b04      	ldr	r3, [sp, #16]
 8006926:	9301      	str	r3, [sp, #4]
 8006928:	2d00      	cmp	r5, #0
 800692a:	dd05      	ble.n	8006938 <_dtoa_r+0x9b8>
 800692c:	4639      	mov	r1, r7
 800692e:	462a      	mov	r2, r5
 8006930:	4620      	mov	r0, r4
 8006932:	f000 fb73 	bl	800701c <__lshift>
 8006936:	4607      	mov	r7, r0
 8006938:	f1b8 0f00 	cmp.w	r8, #0
 800693c:	d05b      	beq.n	80069f6 <_dtoa_r+0xa76>
 800693e:	6879      	ldr	r1, [r7, #4]
 8006940:	4620      	mov	r0, r4
 8006942:	f000 f95b 	bl	8006bfc <_Balloc>
 8006946:	4605      	mov	r5, r0
 8006948:	b928      	cbnz	r0, 8006956 <_dtoa_r+0x9d6>
 800694a:	4b83      	ldr	r3, [pc, #524]	; (8006b58 <_dtoa_r+0xbd8>)
 800694c:	4602      	mov	r2, r0
 800694e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006952:	f7ff bb2e 	b.w	8005fb2 <_dtoa_r+0x32>
 8006956:	693a      	ldr	r2, [r7, #16]
 8006958:	3202      	adds	r2, #2
 800695a:	0092      	lsls	r2, r2, #2
 800695c:	f107 010c 	add.w	r1, r7, #12
 8006960:	300c      	adds	r0, #12
 8006962:	f000 fee7 	bl	8007734 <memcpy>
 8006966:	2201      	movs	r2, #1
 8006968:	4629      	mov	r1, r5
 800696a:	4620      	mov	r0, r4
 800696c:	f000 fb56 	bl	800701c <__lshift>
 8006970:	9b00      	ldr	r3, [sp, #0]
 8006972:	3301      	adds	r3, #1
 8006974:	9304      	str	r3, [sp, #16]
 8006976:	e9dd 2300 	ldrd	r2, r3, [sp]
 800697a:	4413      	add	r3, r2
 800697c:	9308      	str	r3, [sp, #32]
 800697e:	9b02      	ldr	r3, [sp, #8]
 8006980:	f003 0301 	and.w	r3, r3, #1
 8006984:	46b8      	mov	r8, r7
 8006986:	9306      	str	r3, [sp, #24]
 8006988:	4607      	mov	r7, r0
 800698a:	9b04      	ldr	r3, [sp, #16]
 800698c:	4631      	mov	r1, r6
 800698e:	3b01      	subs	r3, #1
 8006990:	4650      	mov	r0, sl
 8006992:	9301      	str	r3, [sp, #4]
 8006994:	f7ff fa6a 	bl	8005e6c <quorem>
 8006998:	4641      	mov	r1, r8
 800699a:	9002      	str	r0, [sp, #8]
 800699c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80069a0:	4650      	mov	r0, sl
 80069a2:	f000 fba7 	bl	80070f4 <__mcmp>
 80069a6:	463a      	mov	r2, r7
 80069a8:	9005      	str	r0, [sp, #20]
 80069aa:	4631      	mov	r1, r6
 80069ac:	4620      	mov	r0, r4
 80069ae:	f000 fbbd 	bl	800712c <__mdiff>
 80069b2:	68c2      	ldr	r2, [r0, #12]
 80069b4:	4605      	mov	r5, r0
 80069b6:	bb02      	cbnz	r2, 80069fa <_dtoa_r+0xa7a>
 80069b8:	4601      	mov	r1, r0
 80069ba:	4650      	mov	r0, sl
 80069bc:	f000 fb9a 	bl	80070f4 <__mcmp>
 80069c0:	4602      	mov	r2, r0
 80069c2:	4629      	mov	r1, r5
 80069c4:	4620      	mov	r0, r4
 80069c6:	9209      	str	r2, [sp, #36]	; 0x24
 80069c8:	f000 f958 	bl	8006c7c <_Bfree>
 80069cc:	9b07      	ldr	r3, [sp, #28]
 80069ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069d0:	9d04      	ldr	r5, [sp, #16]
 80069d2:	ea43 0102 	orr.w	r1, r3, r2
 80069d6:	9b06      	ldr	r3, [sp, #24]
 80069d8:	4319      	orrs	r1, r3
 80069da:	d110      	bne.n	80069fe <_dtoa_r+0xa7e>
 80069dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80069e0:	d029      	beq.n	8006a36 <_dtoa_r+0xab6>
 80069e2:	9b05      	ldr	r3, [sp, #20]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	dd02      	ble.n	80069ee <_dtoa_r+0xa6e>
 80069e8:	9b02      	ldr	r3, [sp, #8]
 80069ea:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80069ee:	9b01      	ldr	r3, [sp, #4]
 80069f0:	f883 9000 	strb.w	r9, [r3]
 80069f4:	e774      	b.n	80068e0 <_dtoa_r+0x960>
 80069f6:	4638      	mov	r0, r7
 80069f8:	e7ba      	b.n	8006970 <_dtoa_r+0x9f0>
 80069fa:	2201      	movs	r2, #1
 80069fc:	e7e1      	b.n	80069c2 <_dtoa_r+0xa42>
 80069fe:	9b05      	ldr	r3, [sp, #20]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	db04      	blt.n	8006a0e <_dtoa_r+0xa8e>
 8006a04:	9907      	ldr	r1, [sp, #28]
 8006a06:	430b      	orrs	r3, r1
 8006a08:	9906      	ldr	r1, [sp, #24]
 8006a0a:	430b      	orrs	r3, r1
 8006a0c:	d120      	bne.n	8006a50 <_dtoa_r+0xad0>
 8006a0e:	2a00      	cmp	r2, #0
 8006a10:	dded      	ble.n	80069ee <_dtoa_r+0xa6e>
 8006a12:	4651      	mov	r1, sl
 8006a14:	2201      	movs	r2, #1
 8006a16:	4620      	mov	r0, r4
 8006a18:	f000 fb00 	bl	800701c <__lshift>
 8006a1c:	4631      	mov	r1, r6
 8006a1e:	4682      	mov	sl, r0
 8006a20:	f000 fb68 	bl	80070f4 <__mcmp>
 8006a24:	2800      	cmp	r0, #0
 8006a26:	dc03      	bgt.n	8006a30 <_dtoa_r+0xab0>
 8006a28:	d1e1      	bne.n	80069ee <_dtoa_r+0xa6e>
 8006a2a:	f019 0f01 	tst.w	r9, #1
 8006a2e:	d0de      	beq.n	80069ee <_dtoa_r+0xa6e>
 8006a30:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006a34:	d1d8      	bne.n	80069e8 <_dtoa_r+0xa68>
 8006a36:	9a01      	ldr	r2, [sp, #4]
 8006a38:	2339      	movs	r3, #57	; 0x39
 8006a3a:	7013      	strb	r3, [r2, #0]
 8006a3c:	462b      	mov	r3, r5
 8006a3e:	461d      	mov	r5, r3
 8006a40:	3b01      	subs	r3, #1
 8006a42:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006a46:	2a39      	cmp	r2, #57	; 0x39
 8006a48:	d06c      	beq.n	8006b24 <_dtoa_r+0xba4>
 8006a4a:	3201      	adds	r2, #1
 8006a4c:	701a      	strb	r2, [r3, #0]
 8006a4e:	e747      	b.n	80068e0 <_dtoa_r+0x960>
 8006a50:	2a00      	cmp	r2, #0
 8006a52:	dd07      	ble.n	8006a64 <_dtoa_r+0xae4>
 8006a54:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006a58:	d0ed      	beq.n	8006a36 <_dtoa_r+0xab6>
 8006a5a:	9a01      	ldr	r2, [sp, #4]
 8006a5c:	f109 0301 	add.w	r3, r9, #1
 8006a60:	7013      	strb	r3, [r2, #0]
 8006a62:	e73d      	b.n	80068e0 <_dtoa_r+0x960>
 8006a64:	9b04      	ldr	r3, [sp, #16]
 8006a66:	9a08      	ldr	r2, [sp, #32]
 8006a68:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d043      	beq.n	8006af8 <_dtoa_r+0xb78>
 8006a70:	4651      	mov	r1, sl
 8006a72:	2300      	movs	r3, #0
 8006a74:	220a      	movs	r2, #10
 8006a76:	4620      	mov	r0, r4
 8006a78:	f000 f922 	bl	8006cc0 <__multadd>
 8006a7c:	45b8      	cmp	r8, r7
 8006a7e:	4682      	mov	sl, r0
 8006a80:	f04f 0300 	mov.w	r3, #0
 8006a84:	f04f 020a 	mov.w	r2, #10
 8006a88:	4641      	mov	r1, r8
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	d107      	bne.n	8006a9e <_dtoa_r+0xb1e>
 8006a8e:	f000 f917 	bl	8006cc0 <__multadd>
 8006a92:	4680      	mov	r8, r0
 8006a94:	4607      	mov	r7, r0
 8006a96:	9b04      	ldr	r3, [sp, #16]
 8006a98:	3301      	adds	r3, #1
 8006a9a:	9304      	str	r3, [sp, #16]
 8006a9c:	e775      	b.n	800698a <_dtoa_r+0xa0a>
 8006a9e:	f000 f90f 	bl	8006cc0 <__multadd>
 8006aa2:	4639      	mov	r1, r7
 8006aa4:	4680      	mov	r8, r0
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	220a      	movs	r2, #10
 8006aaa:	4620      	mov	r0, r4
 8006aac:	f000 f908 	bl	8006cc0 <__multadd>
 8006ab0:	4607      	mov	r7, r0
 8006ab2:	e7f0      	b.n	8006a96 <_dtoa_r+0xb16>
 8006ab4:	9b04      	ldr	r3, [sp, #16]
 8006ab6:	9301      	str	r3, [sp, #4]
 8006ab8:	9d00      	ldr	r5, [sp, #0]
 8006aba:	4631      	mov	r1, r6
 8006abc:	4650      	mov	r0, sl
 8006abe:	f7ff f9d5 	bl	8005e6c <quorem>
 8006ac2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006ac6:	9b00      	ldr	r3, [sp, #0]
 8006ac8:	f805 9b01 	strb.w	r9, [r5], #1
 8006acc:	1aea      	subs	r2, r5, r3
 8006ace:	9b01      	ldr	r3, [sp, #4]
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	dd07      	ble.n	8006ae4 <_dtoa_r+0xb64>
 8006ad4:	4651      	mov	r1, sl
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	220a      	movs	r2, #10
 8006ada:	4620      	mov	r0, r4
 8006adc:	f000 f8f0 	bl	8006cc0 <__multadd>
 8006ae0:	4682      	mov	sl, r0
 8006ae2:	e7ea      	b.n	8006aba <_dtoa_r+0xb3a>
 8006ae4:	9b01      	ldr	r3, [sp, #4]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	bfc8      	it	gt
 8006aea:	461d      	movgt	r5, r3
 8006aec:	9b00      	ldr	r3, [sp, #0]
 8006aee:	bfd8      	it	le
 8006af0:	2501      	movle	r5, #1
 8006af2:	441d      	add	r5, r3
 8006af4:	f04f 0800 	mov.w	r8, #0
 8006af8:	4651      	mov	r1, sl
 8006afa:	2201      	movs	r2, #1
 8006afc:	4620      	mov	r0, r4
 8006afe:	f000 fa8d 	bl	800701c <__lshift>
 8006b02:	4631      	mov	r1, r6
 8006b04:	4682      	mov	sl, r0
 8006b06:	f000 faf5 	bl	80070f4 <__mcmp>
 8006b0a:	2800      	cmp	r0, #0
 8006b0c:	dc96      	bgt.n	8006a3c <_dtoa_r+0xabc>
 8006b0e:	d102      	bne.n	8006b16 <_dtoa_r+0xb96>
 8006b10:	f019 0f01 	tst.w	r9, #1
 8006b14:	d192      	bne.n	8006a3c <_dtoa_r+0xabc>
 8006b16:	462b      	mov	r3, r5
 8006b18:	461d      	mov	r5, r3
 8006b1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b1e:	2a30      	cmp	r2, #48	; 0x30
 8006b20:	d0fa      	beq.n	8006b18 <_dtoa_r+0xb98>
 8006b22:	e6dd      	b.n	80068e0 <_dtoa_r+0x960>
 8006b24:	9a00      	ldr	r2, [sp, #0]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d189      	bne.n	8006a3e <_dtoa_r+0xabe>
 8006b2a:	f10b 0b01 	add.w	fp, fp, #1
 8006b2e:	2331      	movs	r3, #49	; 0x31
 8006b30:	e796      	b.n	8006a60 <_dtoa_r+0xae0>
 8006b32:	4b0a      	ldr	r3, [pc, #40]	; (8006b5c <_dtoa_r+0xbdc>)
 8006b34:	f7ff ba99 	b.w	800606a <_dtoa_r+0xea>
 8006b38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	f47f aa6d 	bne.w	800601a <_dtoa_r+0x9a>
 8006b40:	4b07      	ldr	r3, [pc, #28]	; (8006b60 <_dtoa_r+0xbe0>)
 8006b42:	f7ff ba92 	b.w	800606a <_dtoa_r+0xea>
 8006b46:	9b01      	ldr	r3, [sp, #4]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	dcb5      	bgt.n	8006ab8 <_dtoa_r+0xb38>
 8006b4c:	9b07      	ldr	r3, [sp, #28]
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	f73f aeb1 	bgt.w	80068b6 <_dtoa_r+0x936>
 8006b54:	e7b0      	b.n	8006ab8 <_dtoa_r+0xb38>
 8006b56:	bf00      	nop
 8006b58:	08007f40 	.word	0x08007f40
 8006b5c:	08007ea0 	.word	0x08007ea0
 8006b60:	08007ec4 	.word	0x08007ec4

08006b64 <_free_r>:
 8006b64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b66:	2900      	cmp	r1, #0
 8006b68:	d044      	beq.n	8006bf4 <_free_r+0x90>
 8006b6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b6e:	9001      	str	r0, [sp, #4]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f1a1 0404 	sub.w	r4, r1, #4
 8006b76:	bfb8      	it	lt
 8006b78:	18e4      	addlt	r4, r4, r3
 8006b7a:	f7fe fb63 	bl	8005244 <__malloc_lock>
 8006b7e:	4a1e      	ldr	r2, [pc, #120]	; (8006bf8 <_free_r+0x94>)
 8006b80:	9801      	ldr	r0, [sp, #4]
 8006b82:	6813      	ldr	r3, [r2, #0]
 8006b84:	b933      	cbnz	r3, 8006b94 <_free_r+0x30>
 8006b86:	6063      	str	r3, [r4, #4]
 8006b88:	6014      	str	r4, [r2, #0]
 8006b8a:	b003      	add	sp, #12
 8006b8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b90:	f7fe bb5e 	b.w	8005250 <__malloc_unlock>
 8006b94:	42a3      	cmp	r3, r4
 8006b96:	d908      	bls.n	8006baa <_free_r+0x46>
 8006b98:	6825      	ldr	r5, [r4, #0]
 8006b9a:	1961      	adds	r1, r4, r5
 8006b9c:	428b      	cmp	r3, r1
 8006b9e:	bf01      	itttt	eq
 8006ba0:	6819      	ldreq	r1, [r3, #0]
 8006ba2:	685b      	ldreq	r3, [r3, #4]
 8006ba4:	1949      	addeq	r1, r1, r5
 8006ba6:	6021      	streq	r1, [r4, #0]
 8006ba8:	e7ed      	b.n	8006b86 <_free_r+0x22>
 8006baa:	461a      	mov	r2, r3
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	b10b      	cbz	r3, 8006bb4 <_free_r+0x50>
 8006bb0:	42a3      	cmp	r3, r4
 8006bb2:	d9fa      	bls.n	8006baa <_free_r+0x46>
 8006bb4:	6811      	ldr	r1, [r2, #0]
 8006bb6:	1855      	adds	r5, r2, r1
 8006bb8:	42a5      	cmp	r5, r4
 8006bba:	d10b      	bne.n	8006bd4 <_free_r+0x70>
 8006bbc:	6824      	ldr	r4, [r4, #0]
 8006bbe:	4421      	add	r1, r4
 8006bc0:	1854      	adds	r4, r2, r1
 8006bc2:	42a3      	cmp	r3, r4
 8006bc4:	6011      	str	r1, [r2, #0]
 8006bc6:	d1e0      	bne.n	8006b8a <_free_r+0x26>
 8006bc8:	681c      	ldr	r4, [r3, #0]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	6053      	str	r3, [r2, #4]
 8006bce:	440c      	add	r4, r1
 8006bd0:	6014      	str	r4, [r2, #0]
 8006bd2:	e7da      	b.n	8006b8a <_free_r+0x26>
 8006bd4:	d902      	bls.n	8006bdc <_free_r+0x78>
 8006bd6:	230c      	movs	r3, #12
 8006bd8:	6003      	str	r3, [r0, #0]
 8006bda:	e7d6      	b.n	8006b8a <_free_r+0x26>
 8006bdc:	6825      	ldr	r5, [r4, #0]
 8006bde:	1961      	adds	r1, r4, r5
 8006be0:	428b      	cmp	r3, r1
 8006be2:	bf04      	itt	eq
 8006be4:	6819      	ldreq	r1, [r3, #0]
 8006be6:	685b      	ldreq	r3, [r3, #4]
 8006be8:	6063      	str	r3, [r4, #4]
 8006bea:	bf04      	itt	eq
 8006bec:	1949      	addeq	r1, r1, r5
 8006bee:	6021      	streq	r1, [r4, #0]
 8006bf0:	6054      	str	r4, [r2, #4]
 8006bf2:	e7ca      	b.n	8006b8a <_free_r+0x26>
 8006bf4:	b003      	add	sp, #12
 8006bf6:	bd30      	pop	{r4, r5, pc}
 8006bf8:	20000400 	.word	0x20000400

08006bfc <_Balloc>:
 8006bfc:	b570      	push	{r4, r5, r6, lr}
 8006bfe:	69c6      	ldr	r6, [r0, #28]
 8006c00:	4604      	mov	r4, r0
 8006c02:	460d      	mov	r5, r1
 8006c04:	b976      	cbnz	r6, 8006c24 <_Balloc+0x28>
 8006c06:	2010      	movs	r0, #16
 8006c08:	f7fe fa74 	bl	80050f4 <malloc>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	61e0      	str	r0, [r4, #28]
 8006c10:	b920      	cbnz	r0, 8006c1c <_Balloc+0x20>
 8006c12:	4b18      	ldr	r3, [pc, #96]	; (8006c74 <_Balloc+0x78>)
 8006c14:	4818      	ldr	r0, [pc, #96]	; (8006c78 <_Balloc+0x7c>)
 8006c16:	216b      	movs	r1, #107	; 0x6b
 8006c18:	f000 fd9a 	bl	8007750 <__assert_func>
 8006c1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c20:	6006      	str	r6, [r0, #0]
 8006c22:	60c6      	str	r6, [r0, #12]
 8006c24:	69e6      	ldr	r6, [r4, #28]
 8006c26:	68f3      	ldr	r3, [r6, #12]
 8006c28:	b183      	cbz	r3, 8006c4c <_Balloc+0x50>
 8006c2a:	69e3      	ldr	r3, [r4, #28]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006c32:	b9b8      	cbnz	r0, 8006c64 <_Balloc+0x68>
 8006c34:	2101      	movs	r1, #1
 8006c36:	fa01 f605 	lsl.w	r6, r1, r5
 8006c3a:	1d72      	adds	r2, r6, #5
 8006c3c:	0092      	lsls	r2, r2, #2
 8006c3e:	4620      	mov	r0, r4
 8006c40:	f000 fda4 	bl	800778c <_calloc_r>
 8006c44:	b160      	cbz	r0, 8006c60 <_Balloc+0x64>
 8006c46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006c4a:	e00e      	b.n	8006c6a <_Balloc+0x6e>
 8006c4c:	2221      	movs	r2, #33	; 0x21
 8006c4e:	2104      	movs	r1, #4
 8006c50:	4620      	mov	r0, r4
 8006c52:	f000 fd9b 	bl	800778c <_calloc_r>
 8006c56:	69e3      	ldr	r3, [r4, #28]
 8006c58:	60f0      	str	r0, [r6, #12]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d1e4      	bne.n	8006c2a <_Balloc+0x2e>
 8006c60:	2000      	movs	r0, #0
 8006c62:	bd70      	pop	{r4, r5, r6, pc}
 8006c64:	6802      	ldr	r2, [r0, #0]
 8006c66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006c70:	e7f7      	b.n	8006c62 <_Balloc+0x66>
 8006c72:	bf00      	nop
 8006c74:	08007ed1 	.word	0x08007ed1
 8006c78:	08007f51 	.word	0x08007f51

08006c7c <_Bfree>:
 8006c7c:	b570      	push	{r4, r5, r6, lr}
 8006c7e:	69c6      	ldr	r6, [r0, #28]
 8006c80:	4605      	mov	r5, r0
 8006c82:	460c      	mov	r4, r1
 8006c84:	b976      	cbnz	r6, 8006ca4 <_Bfree+0x28>
 8006c86:	2010      	movs	r0, #16
 8006c88:	f7fe fa34 	bl	80050f4 <malloc>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	61e8      	str	r0, [r5, #28]
 8006c90:	b920      	cbnz	r0, 8006c9c <_Bfree+0x20>
 8006c92:	4b09      	ldr	r3, [pc, #36]	; (8006cb8 <_Bfree+0x3c>)
 8006c94:	4809      	ldr	r0, [pc, #36]	; (8006cbc <_Bfree+0x40>)
 8006c96:	218f      	movs	r1, #143	; 0x8f
 8006c98:	f000 fd5a 	bl	8007750 <__assert_func>
 8006c9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ca0:	6006      	str	r6, [r0, #0]
 8006ca2:	60c6      	str	r6, [r0, #12]
 8006ca4:	b13c      	cbz	r4, 8006cb6 <_Bfree+0x3a>
 8006ca6:	69eb      	ldr	r3, [r5, #28]
 8006ca8:	6862      	ldr	r2, [r4, #4]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006cb0:	6021      	str	r1, [r4, #0]
 8006cb2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006cb6:	bd70      	pop	{r4, r5, r6, pc}
 8006cb8:	08007ed1 	.word	0x08007ed1
 8006cbc:	08007f51 	.word	0x08007f51

08006cc0 <__multadd>:
 8006cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cc4:	690d      	ldr	r5, [r1, #16]
 8006cc6:	4607      	mov	r7, r0
 8006cc8:	460c      	mov	r4, r1
 8006cca:	461e      	mov	r6, r3
 8006ccc:	f101 0c14 	add.w	ip, r1, #20
 8006cd0:	2000      	movs	r0, #0
 8006cd2:	f8dc 3000 	ldr.w	r3, [ip]
 8006cd6:	b299      	uxth	r1, r3
 8006cd8:	fb02 6101 	mla	r1, r2, r1, r6
 8006cdc:	0c1e      	lsrs	r6, r3, #16
 8006cde:	0c0b      	lsrs	r3, r1, #16
 8006ce0:	fb02 3306 	mla	r3, r2, r6, r3
 8006ce4:	b289      	uxth	r1, r1
 8006ce6:	3001      	adds	r0, #1
 8006ce8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006cec:	4285      	cmp	r5, r0
 8006cee:	f84c 1b04 	str.w	r1, [ip], #4
 8006cf2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006cf6:	dcec      	bgt.n	8006cd2 <__multadd+0x12>
 8006cf8:	b30e      	cbz	r6, 8006d3e <__multadd+0x7e>
 8006cfa:	68a3      	ldr	r3, [r4, #8]
 8006cfc:	42ab      	cmp	r3, r5
 8006cfe:	dc19      	bgt.n	8006d34 <__multadd+0x74>
 8006d00:	6861      	ldr	r1, [r4, #4]
 8006d02:	4638      	mov	r0, r7
 8006d04:	3101      	adds	r1, #1
 8006d06:	f7ff ff79 	bl	8006bfc <_Balloc>
 8006d0a:	4680      	mov	r8, r0
 8006d0c:	b928      	cbnz	r0, 8006d1a <__multadd+0x5a>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	4b0c      	ldr	r3, [pc, #48]	; (8006d44 <__multadd+0x84>)
 8006d12:	480d      	ldr	r0, [pc, #52]	; (8006d48 <__multadd+0x88>)
 8006d14:	21ba      	movs	r1, #186	; 0xba
 8006d16:	f000 fd1b 	bl	8007750 <__assert_func>
 8006d1a:	6922      	ldr	r2, [r4, #16]
 8006d1c:	3202      	adds	r2, #2
 8006d1e:	f104 010c 	add.w	r1, r4, #12
 8006d22:	0092      	lsls	r2, r2, #2
 8006d24:	300c      	adds	r0, #12
 8006d26:	f000 fd05 	bl	8007734 <memcpy>
 8006d2a:	4621      	mov	r1, r4
 8006d2c:	4638      	mov	r0, r7
 8006d2e:	f7ff ffa5 	bl	8006c7c <_Bfree>
 8006d32:	4644      	mov	r4, r8
 8006d34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006d38:	3501      	adds	r5, #1
 8006d3a:	615e      	str	r6, [r3, #20]
 8006d3c:	6125      	str	r5, [r4, #16]
 8006d3e:	4620      	mov	r0, r4
 8006d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d44:	08007f40 	.word	0x08007f40
 8006d48:	08007f51 	.word	0x08007f51

08006d4c <__hi0bits>:
 8006d4c:	0c03      	lsrs	r3, r0, #16
 8006d4e:	041b      	lsls	r3, r3, #16
 8006d50:	b9d3      	cbnz	r3, 8006d88 <__hi0bits+0x3c>
 8006d52:	0400      	lsls	r0, r0, #16
 8006d54:	2310      	movs	r3, #16
 8006d56:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006d5a:	bf04      	itt	eq
 8006d5c:	0200      	lsleq	r0, r0, #8
 8006d5e:	3308      	addeq	r3, #8
 8006d60:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006d64:	bf04      	itt	eq
 8006d66:	0100      	lsleq	r0, r0, #4
 8006d68:	3304      	addeq	r3, #4
 8006d6a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006d6e:	bf04      	itt	eq
 8006d70:	0080      	lsleq	r0, r0, #2
 8006d72:	3302      	addeq	r3, #2
 8006d74:	2800      	cmp	r0, #0
 8006d76:	db05      	blt.n	8006d84 <__hi0bits+0x38>
 8006d78:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006d7c:	f103 0301 	add.w	r3, r3, #1
 8006d80:	bf08      	it	eq
 8006d82:	2320      	moveq	r3, #32
 8006d84:	4618      	mov	r0, r3
 8006d86:	4770      	bx	lr
 8006d88:	2300      	movs	r3, #0
 8006d8a:	e7e4      	b.n	8006d56 <__hi0bits+0xa>

08006d8c <__lo0bits>:
 8006d8c:	6803      	ldr	r3, [r0, #0]
 8006d8e:	f013 0207 	ands.w	r2, r3, #7
 8006d92:	d00c      	beq.n	8006dae <__lo0bits+0x22>
 8006d94:	07d9      	lsls	r1, r3, #31
 8006d96:	d422      	bmi.n	8006dde <__lo0bits+0x52>
 8006d98:	079a      	lsls	r2, r3, #30
 8006d9a:	bf49      	itett	mi
 8006d9c:	085b      	lsrmi	r3, r3, #1
 8006d9e:	089b      	lsrpl	r3, r3, #2
 8006da0:	6003      	strmi	r3, [r0, #0]
 8006da2:	2201      	movmi	r2, #1
 8006da4:	bf5c      	itt	pl
 8006da6:	6003      	strpl	r3, [r0, #0]
 8006da8:	2202      	movpl	r2, #2
 8006daa:	4610      	mov	r0, r2
 8006dac:	4770      	bx	lr
 8006dae:	b299      	uxth	r1, r3
 8006db0:	b909      	cbnz	r1, 8006db6 <__lo0bits+0x2a>
 8006db2:	0c1b      	lsrs	r3, r3, #16
 8006db4:	2210      	movs	r2, #16
 8006db6:	b2d9      	uxtb	r1, r3
 8006db8:	b909      	cbnz	r1, 8006dbe <__lo0bits+0x32>
 8006dba:	3208      	adds	r2, #8
 8006dbc:	0a1b      	lsrs	r3, r3, #8
 8006dbe:	0719      	lsls	r1, r3, #28
 8006dc0:	bf04      	itt	eq
 8006dc2:	091b      	lsreq	r3, r3, #4
 8006dc4:	3204      	addeq	r2, #4
 8006dc6:	0799      	lsls	r1, r3, #30
 8006dc8:	bf04      	itt	eq
 8006dca:	089b      	lsreq	r3, r3, #2
 8006dcc:	3202      	addeq	r2, #2
 8006dce:	07d9      	lsls	r1, r3, #31
 8006dd0:	d403      	bmi.n	8006dda <__lo0bits+0x4e>
 8006dd2:	085b      	lsrs	r3, r3, #1
 8006dd4:	f102 0201 	add.w	r2, r2, #1
 8006dd8:	d003      	beq.n	8006de2 <__lo0bits+0x56>
 8006dda:	6003      	str	r3, [r0, #0]
 8006ddc:	e7e5      	b.n	8006daa <__lo0bits+0x1e>
 8006dde:	2200      	movs	r2, #0
 8006de0:	e7e3      	b.n	8006daa <__lo0bits+0x1e>
 8006de2:	2220      	movs	r2, #32
 8006de4:	e7e1      	b.n	8006daa <__lo0bits+0x1e>
	...

08006de8 <__i2b>:
 8006de8:	b510      	push	{r4, lr}
 8006dea:	460c      	mov	r4, r1
 8006dec:	2101      	movs	r1, #1
 8006dee:	f7ff ff05 	bl	8006bfc <_Balloc>
 8006df2:	4602      	mov	r2, r0
 8006df4:	b928      	cbnz	r0, 8006e02 <__i2b+0x1a>
 8006df6:	4b05      	ldr	r3, [pc, #20]	; (8006e0c <__i2b+0x24>)
 8006df8:	4805      	ldr	r0, [pc, #20]	; (8006e10 <__i2b+0x28>)
 8006dfa:	f240 1145 	movw	r1, #325	; 0x145
 8006dfe:	f000 fca7 	bl	8007750 <__assert_func>
 8006e02:	2301      	movs	r3, #1
 8006e04:	6144      	str	r4, [r0, #20]
 8006e06:	6103      	str	r3, [r0, #16]
 8006e08:	bd10      	pop	{r4, pc}
 8006e0a:	bf00      	nop
 8006e0c:	08007f40 	.word	0x08007f40
 8006e10:	08007f51 	.word	0x08007f51

08006e14 <__multiply>:
 8006e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e18:	4691      	mov	r9, r2
 8006e1a:	690a      	ldr	r2, [r1, #16]
 8006e1c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	bfb8      	it	lt
 8006e24:	460b      	movlt	r3, r1
 8006e26:	460c      	mov	r4, r1
 8006e28:	bfbc      	itt	lt
 8006e2a:	464c      	movlt	r4, r9
 8006e2c:	4699      	movlt	r9, r3
 8006e2e:	6927      	ldr	r7, [r4, #16]
 8006e30:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006e34:	68a3      	ldr	r3, [r4, #8]
 8006e36:	6861      	ldr	r1, [r4, #4]
 8006e38:	eb07 060a 	add.w	r6, r7, sl
 8006e3c:	42b3      	cmp	r3, r6
 8006e3e:	b085      	sub	sp, #20
 8006e40:	bfb8      	it	lt
 8006e42:	3101      	addlt	r1, #1
 8006e44:	f7ff feda 	bl	8006bfc <_Balloc>
 8006e48:	b930      	cbnz	r0, 8006e58 <__multiply+0x44>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	4b44      	ldr	r3, [pc, #272]	; (8006f60 <__multiply+0x14c>)
 8006e4e:	4845      	ldr	r0, [pc, #276]	; (8006f64 <__multiply+0x150>)
 8006e50:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006e54:	f000 fc7c 	bl	8007750 <__assert_func>
 8006e58:	f100 0514 	add.w	r5, r0, #20
 8006e5c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006e60:	462b      	mov	r3, r5
 8006e62:	2200      	movs	r2, #0
 8006e64:	4543      	cmp	r3, r8
 8006e66:	d321      	bcc.n	8006eac <__multiply+0x98>
 8006e68:	f104 0314 	add.w	r3, r4, #20
 8006e6c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006e70:	f109 0314 	add.w	r3, r9, #20
 8006e74:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006e78:	9202      	str	r2, [sp, #8]
 8006e7a:	1b3a      	subs	r2, r7, r4
 8006e7c:	3a15      	subs	r2, #21
 8006e7e:	f022 0203 	bic.w	r2, r2, #3
 8006e82:	3204      	adds	r2, #4
 8006e84:	f104 0115 	add.w	r1, r4, #21
 8006e88:	428f      	cmp	r7, r1
 8006e8a:	bf38      	it	cc
 8006e8c:	2204      	movcc	r2, #4
 8006e8e:	9201      	str	r2, [sp, #4]
 8006e90:	9a02      	ldr	r2, [sp, #8]
 8006e92:	9303      	str	r3, [sp, #12]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d80c      	bhi.n	8006eb2 <__multiply+0x9e>
 8006e98:	2e00      	cmp	r6, #0
 8006e9a:	dd03      	ble.n	8006ea4 <__multiply+0x90>
 8006e9c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d05b      	beq.n	8006f5c <__multiply+0x148>
 8006ea4:	6106      	str	r6, [r0, #16]
 8006ea6:	b005      	add	sp, #20
 8006ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eac:	f843 2b04 	str.w	r2, [r3], #4
 8006eb0:	e7d8      	b.n	8006e64 <__multiply+0x50>
 8006eb2:	f8b3 a000 	ldrh.w	sl, [r3]
 8006eb6:	f1ba 0f00 	cmp.w	sl, #0
 8006eba:	d024      	beq.n	8006f06 <__multiply+0xf2>
 8006ebc:	f104 0e14 	add.w	lr, r4, #20
 8006ec0:	46a9      	mov	r9, r5
 8006ec2:	f04f 0c00 	mov.w	ip, #0
 8006ec6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006eca:	f8d9 1000 	ldr.w	r1, [r9]
 8006ece:	fa1f fb82 	uxth.w	fp, r2
 8006ed2:	b289      	uxth	r1, r1
 8006ed4:	fb0a 110b 	mla	r1, sl, fp, r1
 8006ed8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006edc:	f8d9 2000 	ldr.w	r2, [r9]
 8006ee0:	4461      	add	r1, ip
 8006ee2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006ee6:	fb0a c20b 	mla	r2, sl, fp, ip
 8006eea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006eee:	b289      	uxth	r1, r1
 8006ef0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006ef4:	4577      	cmp	r7, lr
 8006ef6:	f849 1b04 	str.w	r1, [r9], #4
 8006efa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006efe:	d8e2      	bhi.n	8006ec6 <__multiply+0xb2>
 8006f00:	9a01      	ldr	r2, [sp, #4]
 8006f02:	f845 c002 	str.w	ip, [r5, r2]
 8006f06:	9a03      	ldr	r2, [sp, #12]
 8006f08:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006f0c:	3304      	adds	r3, #4
 8006f0e:	f1b9 0f00 	cmp.w	r9, #0
 8006f12:	d021      	beq.n	8006f58 <__multiply+0x144>
 8006f14:	6829      	ldr	r1, [r5, #0]
 8006f16:	f104 0c14 	add.w	ip, r4, #20
 8006f1a:	46ae      	mov	lr, r5
 8006f1c:	f04f 0a00 	mov.w	sl, #0
 8006f20:	f8bc b000 	ldrh.w	fp, [ip]
 8006f24:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006f28:	fb09 220b 	mla	r2, r9, fp, r2
 8006f2c:	4452      	add	r2, sl
 8006f2e:	b289      	uxth	r1, r1
 8006f30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006f34:	f84e 1b04 	str.w	r1, [lr], #4
 8006f38:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006f3c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006f40:	f8be 1000 	ldrh.w	r1, [lr]
 8006f44:	fb09 110a 	mla	r1, r9, sl, r1
 8006f48:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006f4c:	4567      	cmp	r7, ip
 8006f4e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006f52:	d8e5      	bhi.n	8006f20 <__multiply+0x10c>
 8006f54:	9a01      	ldr	r2, [sp, #4]
 8006f56:	50a9      	str	r1, [r5, r2]
 8006f58:	3504      	adds	r5, #4
 8006f5a:	e799      	b.n	8006e90 <__multiply+0x7c>
 8006f5c:	3e01      	subs	r6, #1
 8006f5e:	e79b      	b.n	8006e98 <__multiply+0x84>
 8006f60:	08007f40 	.word	0x08007f40
 8006f64:	08007f51 	.word	0x08007f51

08006f68 <__pow5mult>:
 8006f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f6c:	4615      	mov	r5, r2
 8006f6e:	f012 0203 	ands.w	r2, r2, #3
 8006f72:	4606      	mov	r6, r0
 8006f74:	460f      	mov	r7, r1
 8006f76:	d007      	beq.n	8006f88 <__pow5mult+0x20>
 8006f78:	4c25      	ldr	r4, [pc, #148]	; (8007010 <__pow5mult+0xa8>)
 8006f7a:	3a01      	subs	r2, #1
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006f82:	f7ff fe9d 	bl	8006cc0 <__multadd>
 8006f86:	4607      	mov	r7, r0
 8006f88:	10ad      	asrs	r5, r5, #2
 8006f8a:	d03d      	beq.n	8007008 <__pow5mult+0xa0>
 8006f8c:	69f4      	ldr	r4, [r6, #28]
 8006f8e:	b97c      	cbnz	r4, 8006fb0 <__pow5mult+0x48>
 8006f90:	2010      	movs	r0, #16
 8006f92:	f7fe f8af 	bl	80050f4 <malloc>
 8006f96:	4602      	mov	r2, r0
 8006f98:	61f0      	str	r0, [r6, #28]
 8006f9a:	b928      	cbnz	r0, 8006fa8 <__pow5mult+0x40>
 8006f9c:	4b1d      	ldr	r3, [pc, #116]	; (8007014 <__pow5mult+0xac>)
 8006f9e:	481e      	ldr	r0, [pc, #120]	; (8007018 <__pow5mult+0xb0>)
 8006fa0:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006fa4:	f000 fbd4 	bl	8007750 <__assert_func>
 8006fa8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006fac:	6004      	str	r4, [r0, #0]
 8006fae:	60c4      	str	r4, [r0, #12]
 8006fb0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006fb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006fb8:	b94c      	cbnz	r4, 8006fce <__pow5mult+0x66>
 8006fba:	f240 2171 	movw	r1, #625	; 0x271
 8006fbe:	4630      	mov	r0, r6
 8006fc0:	f7ff ff12 	bl	8006de8 <__i2b>
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	f8c8 0008 	str.w	r0, [r8, #8]
 8006fca:	4604      	mov	r4, r0
 8006fcc:	6003      	str	r3, [r0, #0]
 8006fce:	f04f 0900 	mov.w	r9, #0
 8006fd2:	07eb      	lsls	r3, r5, #31
 8006fd4:	d50a      	bpl.n	8006fec <__pow5mult+0x84>
 8006fd6:	4639      	mov	r1, r7
 8006fd8:	4622      	mov	r2, r4
 8006fda:	4630      	mov	r0, r6
 8006fdc:	f7ff ff1a 	bl	8006e14 <__multiply>
 8006fe0:	4639      	mov	r1, r7
 8006fe2:	4680      	mov	r8, r0
 8006fe4:	4630      	mov	r0, r6
 8006fe6:	f7ff fe49 	bl	8006c7c <_Bfree>
 8006fea:	4647      	mov	r7, r8
 8006fec:	106d      	asrs	r5, r5, #1
 8006fee:	d00b      	beq.n	8007008 <__pow5mult+0xa0>
 8006ff0:	6820      	ldr	r0, [r4, #0]
 8006ff2:	b938      	cbnz	r0, 8007004 <__pow5mult+0x9c>
 8006ff4:	4622      	mov	r2, r4
 8006ff6:	4621      	mov	r1, r4
 8006ff8:	4630      	mov	r0, r6
 8006ffa:	f7ff ff0b 	bl	8006e14 <__multiply>
 8006ffe:	6020      	str	r0, [r4, #0]
 8007000:	f8c0 9000 	str.w	r9, [r0]
 8007004:	4604      	mov	r4, r0
 8007006:	e7e4      	b.n	8006fd2 <__pow5mult+0x6a>
 8007008:	4638      	mov	r0, r7
 800700a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800700e:	bf00      	nop
 8007010:	080080a0 	.word	0x080080a0
 8007014:	08007ed1 	.word	0x08007ed1
 8007018:	08007f51 	.word	0x08007f51

0800701c <__lshift>:
 800701c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007020:	460c      	mov	r4, r1
 8007022:	6849      	ldr	r1, [r1, #4]
 8007024:	6923      	ldr	r3, [r4, #16]
 8007026:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800702a:	68a3      	ldr	r3, [r4, #8]
 800702c:	4607      	mov	r7, r0
 800702e:	4691      	mov	r9, r2
 8007030:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007034:	f108 0601 	add.w	r6, r8, #1
 8007038:	42b3      	cmp	r3, r6
 800703a:	db0b      	blt.n	8007054 <__lshift+0x38>
 800703c:	4638      	mov	r0, r7
 800703e:	f7ff fddd 	bl	8006bfc <_Balloc>
 8007042:	4605      	mov	r5, r0
 8007044:	b948      	cbnz	r0, 800705a <__lshift+0x3e>
 8007046:	4602      	mov	r2, r0
 8007048:	4b28      	ldr	r3, [pc, #160]	; (80070ec <__lshift+0xd0>)
 800704a:	4829      	ldr	r0, [pc, #164]	; (80070f0 <__lshift+0xd4>)
 800704c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007050:	f000 fb7e 	bl	8007750 <__assert_func>
 8007054:	3101      	adds	r1, #1
 8007056:	005b      	lsls	r3, r3, #1
 8007058:	e7ee      	b.n	8007038 <__lshift+0x1c>
 800705a:	2300      	movs	r3, #0
 800705c:	f100 0114 	add.w	r1, r0, #20
 8007060:	f100 0210 	add.w	r2, r0, #16
 8007064:	4618      	mov	r0, r3
 8007066:	4553      	cmp	r3, sl
 8007068:	db33      	blt.n	80070d2 <__lshift+0xb6>
 800706a:	6920      	ldr	r0, [r4, #16]
 800706c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007070:	f104 0314 	add.w	r3, r4, #20
 8007074:	f019 091f 	ands.w	r9, r9, #31
 8007078:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800707c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007080:	d02b      	beq.n	80070da <__lshift+0xbe>
 8007082:	f1c9 0e20 	rsb	lr, r9, #32
 8007086:	468a      	mov	sl, r1
 8007088:	2200      	movs	r2, #0
 800708a:	6818      	ldr	r0, [r3, #0]
 800708c:	fa00 f009 	lsl.w	r0, r0, r9
 8007090:	4310      	orrs	r0, r2
 8007092:	f84a 0b04 	str.w	r0, [sl], #4
 8007096:	f853 2b04 	ldr.w	r2, [r3], #4
 800709a:	459c      	cmp	ip, r3
 800709c:	fa22 f20e 	lsr.w	r2, r2, lr
 80070a0:	d8f3      	bhi.n	800708a <__lshift+0x6e>
 80070a2:	ebac 0304 	sub.w	r3, ip, r4
 80070a6:	3b15      	subs	r3, #21
 80070a8:	f023 0303 	bic.w	r3, r3, #3
 80070ac:	3304      	adds	r3, #4
 80070ae:	f104 0015 	add.w	r0, r4, #21
 80070b2:	4584      	cmp	ip, r0
 80070b4:	bf38      	it	cc
 80070b6:	2304      	movcc	r3, #4
 80070b8:	50ca      	str	r2, [r1, r3]
 80070ba:	b10a      	cbz	r2, 80070c0 <__lshift+0xa4>
 80070bc:	f108 0602 	add.w	r6, r8, #2
 80070c0:	3e01      	subs	r6, #1
 80070c2:	4638      	mov	r0, r7
 80070c4:	612e      	str	r6, [r5, #16]
 80070c6:	4621      	mov	r1, r4
 80070c8:	f7ff fdd8 	bl	8006c7c <_Bfree>
 80070cc:	4628      	mov	r0, r5
 80070ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80070d6:	3301      	adds	r3, #1
 80070d8:	e7c5      	b.n	8007066 <__lshift+0x4a>
 80070da:	3904      	subs	r1, #4
 80070dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80070e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80070e4:	459c      	cmp	ip, r3
 80070e6:	d8f9      	bhi.n	80070dc <__lshift+0xc0>
 80070e8:	e7ea      	b.n	80070c0 <__lshift+0xa4>
 80070ea:	bf00      	nop
 80070ec:	08007f40 	.word	0x08007f40
 80070f0:	08007f51 	.word	0x08007f51

080070f4 <__mcmp>:
 80070f4:	b530      	push	{r4, r5, lr}
 80070f6:	6902      	ldr	r2, [r0, #16]
 80070f8:	690c      	ldr	r4, [r1, #16]
 80070fa:	1b12      	subs	r2, r2, r4
 80070fc:	d10e      	bne.n	800711c <__mcmp+0x28>
 80070fe:	f100 0314 	add.w	r3, r0, #20
 8007102:	3114      	adds	r1, #20
 8007104:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007108:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800710c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007110:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007114:	42a5      	cmp	r5, r4
 8007116:	d003      	beq.n	8007120 <__mcmp+0x2c>
 8007118:	d305      	bcc.n	8007126 <__mcmp+0x32>
 800711a:	2201      	movs	r2, #1
 800711c:	4610      	mov	r0, r2
 800711e:	bd30      	pop	{r4, r5, pc}
 8007120:	4283      	cmp	r3, r0
 8007122:	d3f3      	bcc.n	800710c <__mcmp+0x18>
 8007124:	e7fa      	b.n	800711c <__mcmp+0x28>
 8007126:	f04f 32ff 	mov.w	r2, #4294967295
 800712a:	e7f7      	b.n	800711c <__mcmp+0x28>

0800712c <__mdiff>:
 800712c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007130:	460c      	mov	r4, r1
 8007132:	4606      	mov	r6, r0
 8007134:	4611      	mov	r1, r2
 8007136:	4620      	mov	r0, r4
 8007138:	4690      	mov	r8, r2
 800713a:	f7ff ffdb 	bl	80070f4 <__mcmp>
 800713e:	1e05      	subs	r5, r0, #0
 8007140:	d110      	bne.n	8007164 <__mdiff+0x38>
 8007142:	4629      	mov	r1, r5
 8007144:	4630      	mov	r0, r6
 8007146:	f7ff fd59 	bl	8006bfc <_Balloc>
 800714a:	b930      	cbnz	r0, 800715a <__mdiff+0x2e>
 800714c:	4b3a      	ldr	r3, [pc, #232]	; (8007238 <__mdiff+0x10c>)
 800714e:	4602      	mov	r2, r0
 8007150:	f240 2137 	movw	r1, #567	; 0x237
 8007154:	4839      	ldr	r0, [pc, #228]	; (800723c <__mdiff+0x110>)
 8007156:	f000 fafb 	bl	8007750 <__assert_func>
 800715a:	2301      	movs	r3, #1
 800715c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007160:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007164:	bfa4      	itt	ge
 8007166:	4643      	movge	r3, r8
 8007168:	46a0      	movge	r8, r4
 800716a:	4630      	mov	r0, r6
 800716c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007170:	bfa6      	itte	ge
 8007172:	461c      	movge	r4, r3
 8007174:	2500      	movge	r5, #0
 8007176:	2501      	movlt	r5, #1
 8007178:	f7ff fd40 	bl	8006bfc <_Balloc>
 800717c:	b920      	cbnz	r0, 8007188 <__mdiff+0x5c>
 800717e:	4b2e      	ldr	r3, [pc, #184]	; (8007238 <__mdiff+0x10c>)
 8007180:	4602      	mov	r2, r0
 8007182:	f240 2145 	movw	r1, #581	; 0x245
 8007186:	e7e5      	b.n	8007154 <__mdiff+0x28>
 8007188:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800718c:	6926      	ldr	r6, [r4, #16]
 800718e:	60c5      	str	r5, [r0, #12]
 8007190:	f104 0914 	add.w	r9, r4, #20
 8007194:	f108 0514 	add.w	r5, r8, #20
 8007198:	f100 0e14 	add.w	lr, r0, #20
 800719c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80071a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80071a4:	f108 0210 	add.w	r2, r8, #16
 80071a8:	46f2      	mov	sl, lr
 80071aa:	2100      	movs	r1, #0
 80071ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80071b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80071b4:	fa11 f88b 	uxtah	r8, r1, fp
 80071b8:	b299      	uxth	r1, r3
 80071ba:	0c1b      	lsrs	r3, r3, #16
 80071bc:	eba8 0801 	sub.w	r8, r8, r1
 80071c0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80071c4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80071c8:	fa1f f888 	uxth.w	r8, r8
 80071cc:	1419      	asrs	r1, r3, #16
 80071ce:	454e      	cmp	r6, r9
 80071d0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80071d4:	f84a 3b04 	str.w	r3, [sl], #4
 80071d8:	d8e8      	bhi.n	80071ac <__mdiff+0x80>
 80071da:	1b33      	subs	r3, r6, r4
 80071dc:	3b15      	subs	r3, #21
 80071de:	f023 0303 	bic.w	r3, r3, #3
 80071e2:	3304      	adds	r3, #4
 80071e4:	3415      	adds	r4, #21
 80071e6:	42a6      	cmp	r6, r4
 80071e8:	bf38      	it	cc
 80071ea:	2304      	movcc	r3, #4
 80071ec:	441d      	add	r5, r3
 80071ee:	4473      	add	r3, lr
 80071f0:	469e      	mov	lr, r3
 80071f2:	462e      	mov	r6, r5
 80071f4:	4566      	cmp	r6, ip
 80071f6:	d30e      	bcc.n	8007216 <__mdiff+0xea>
 80071f8:	f10c 0203 	add.w	r2, ip, #3
 80071fc:	1b52      	subs	r2, r2, r5
 80071fe:	f022 0203 	bic.w	r2, r2, #3
 8007202:	3d03      	subs	r5, #3
 8007204:	45ac      	cmp	ip, r5
 8007206:	bf38      	it	cc
 8007208:	2200      	movcc	r2, #0
 800720a:	4413      	add	r3, r2
 800720c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007210:	b17a      	cbz	r2, 8007232 <__mdiff+0x106>
 8007212:	6107      	str	r7, [r0, #16]
 8007214:	e7a4      	b.n	8007160 <__mdiff+0x34>
 8007216:	f856 8b04 	ldr.w	r8, [r6], #4
 800721a:	fa11 f288 	uxtah	r2, r1, r8
 800721e:	1414      	asrs	r4, r2, #16
 8007220:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007224:	b292      	uxth	r2, r2
 8007226:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800722a:	f84e 2b04 	str.w	r2, [lr], #4
 800722e:	1421      	asrs	r1, r4, #16
 8007230:	e7e0      	b.n	80071f4 <__mdiff+0xc8>
 8007232:	3f01      	subs	r7, #1
 8007234:	e7ea      	b.n	800720c <__mdiff+0xe0>
 8007236:	bf00      	nop
 8007238:	08007f40 	.word	0x08007f40
 800723c:	08007f51 	.word	0x08007f51

08007240 <__d2b>:
 8007240:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007244:	460f      	mov	r7, r1
 8007246:	2101      	movs	r1, #1
 8007248:	ec59 8b10 	vmov	r8, r9, d0
 800724c:	4616      	mov	r6, r2
 800724e:	f7ff fcd5 	bl	8006bfc <_Balloc>
 8007252:	4604      	mov	r4, r0
 8007254:	b930      	cbnz	r0, 8007264 <__d2b+0x24>
 8007256:	4602      	mov	r2, r0
 8007258:	4b24      	ldr	r3, [pc, #144]	; (80072ec <__d2b+0xac>)
 800725a:	4825      	ldr	r0, [pc, #148]	; (80072f0 <__d2b+0xb0>)
 800725c:	f240 310f 	movw	r1, #783	; 0x30f
 8007260:	f000 fa76 	bl	8007750 <__assert_func>
 8007264:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007268:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800726c:	bb2d      	cbnz	r5, 80072ba <__d2b+0x7a>
 800726e:	9301      	str	r3, [sp, #4]
 8007270:	f1b8 0300 	subs.w	r3, r8, #0
 8007274:	d026      	beq.n	80072c4 <__d2b+0x84>
 8007276:	4668      	mov	r0, sp
 8007278:	9300      	str	r3, [sp, #0]
 800727a:	f7ff fd87 	bl	8006d8c <__lo0bits>
 800727e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007282:	b1e8      	cbz	r0, 80072c0 <__d2b+0x80>
 8007284:	f1c0 0320 	rsb	r3, r0, #32
 8007288:	fa02 f303 	lsl.w	r3, r2, r3
 800728c:	430b      	orrs	r3, r1
 800728e:	40c2      	lsrs	r2, r0
 8007290:	6163      	str	r3, [r4, #20]
 8007292:	9201      	str	r2, [sp, #4]
 8007294:	9b01      	ldr	r3, [sp, #4]
 8007296:	61a3      	str	r3, [r4, #24]
 8007298:	2b00      	cmp	r3, #0
 800729a:	bf14      	ite	ne
 800729c:	2202      	movne	r2, #2
 800729e:	2201      	moveq	r2, #1
 80072a0:	6122      	str	r2, [r4, #16]
 80072a2:	b1bd      	cbz	r5, 80072d4 <__d2b+0x94>
 80072a4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80072a8:	4405      	add	r5, r0
 80072aa:	603d      	str	r5, [r7, #0]
 80072ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80072b0:	6030      	str	r0, [r6, #0]
 80072b2:	4620      	mov	r0, r4
 80072b4:	b003      	add	sp, #12
 80072b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072be:	e7d6      	b.n	800726e <__d2b+0x2e>
 80072c0:	6161      	str	r1, [r4, #20]
 80072c2:	e7e7      	b.n	8007294 <__d2b+0x54>
 80072c4:	a801      	add	r0, sp, #4
 80072c6:	f7ff fd61 	bl	8006d8c <__lo0bits>
 80072ca:	9b01      	ldr	r3, [sp, #4]
 80072cc:	6163      	str	r3, [r4, #20]
 80072ce:	3020      	adds	r0, #32
 80072d0:	2201      	movs	r2, #1
 80072d2:	e7e5      	b.n	80072a0 <__d2b+0x60>
 80072d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80072d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80072dc:	6038      	str	r0, [r7, #0]
 80072de:	6918      	ldr	r0, [r3, #16]
 80072e0:	f7ff fd34 	bl	8006d4c <__hi0bits>
 80072e4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80072e8:	e7e2      	b.n	80072b0 <__d2b+0x70>
 80072ea:	bf00      	nop
 80072ec:	08007f40 	.word	0x08007f40
 80072f0:	08007f51 	.word	0x08007f51

080072f4 <__ssputs_r>:
 80072f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072f8:	688e      	ldr	r6, [r1, #8]
 80072fa:	461f      	mov	r7, r3
 80072fc:	42be      	cmp	r6, r7
 80072fe:	680b      	ldr	r3, [r1, #0]
 8007300:	4682      	mov	sl, r0
 8007302:	460c      	mov	r4, r1
 8007304:	4690      	mov	r8, r2
 8007306:	d82c      	bhi.n	8007362 <__ssputs_r+0x6e>
 8007308:	898a      	ldrh	r2, [r1, #12]
 800730a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800730e:	d026      	beq.n	800735e <__ssputs_r+0x6a>
 8007310:	6965      	ldr	r5, [r4, #20]
 8007312:	6909      	ldr	r1, [r1, #16]
 8007314:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007318:	eba3 0901 	sub.w	r9, r3, r1
 800731c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007320:	1c7b      	adds	r3, r7, #1
 8007322:	444b      	add	r3, r9
 8007324:	106d      	asrs	r5, r5, #1
 8007326:	429d      	cmp	r5, r3
 8007328:	bf38      	it	cc
 800732a:	461d      	movcc	r5, r3
 800732c:	0553      	lsls	r3, r2, #21
 800732e:	d527      	bpl.n	8007380 <__ssputs_r+0x8c>
 8007330:	4629      	mov	r1, r5
 8007332:	f7fd ff07 	bl	8005144 <_malloc_r>
 8007336:	4606      	mov	r6, r0
 8007338:	b360      	cbz	r0, 8007394 <__ssputs_r+0xa0>
 800733a:	6921      	ldr	r1, [r4, #16]
 800733c:	464a      	mov	r2, r9
 800733e:	f000 f9f9 	bl	8007734 <memcpy>
 8007342:	89a3      	ldrh	r3, [r4, #12]
 8007344:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800734c:	81a3      	strh	r3, [r4, #12]
 800734e:	6126      	str	r6, [r4, #16]
 8007350:	6165      	str	r5, [r4, #20]
 8007352:	444e      	add	r6, r9
 8007354:	eba5 0509 	sub.w	r5, r5, r9
 8007358:	6026      	str	r6, [r4, #0]
 800735a:	60a5      	str	r5, [r4, #8]
 800735c:	463e      	mov	r6, r7
 800735e:	42be      	cmp	r6, r7
 8007360:	d900      	bls.n	8007364 <__ssputs_r+0x70>
 8007362:	463e      	mov	r6, r7
 8007364:	6820      	ldr	r0, [r4, #0]
 8007366:	4632      	mov	r2, r6
 8007368:	4641      	mov	r1, r8
 800736a:	f000 f9c9 	bl	8007700 <memmove>
 800736e:	68a3      	ldr	r3, [r4, #8]
 8007370:	1b9b      	subs	r3, r3, r6
 8007372:	60a3      	str	r3, [r4, #8]
 8007374:	6823      	ldr	r3, [r4, #0]
 8007376:	4433      	add	r3, r6
 8007378:	6023      	str	r3, [r4, #0]
 800737a:	2000      	movs	r0, #0
 800737c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007380:	462a      	mov	r2, r5
 8007382:	f000 fa2b 	bl	80077dc <_realloc_r>
 8007386:	4606      	mov	r6, r0
 8007388:	2800      	cmp	r0, #0
 800738a:	d1e0      	bne.n	800734e <__ssputs_r+0x5a>
 800738c:	6921      	ldr	r1, [r4, #16]
 800738e:	4650      	mov	r0, sl
 8007390:	f7ff fbe8 	bl	8006b64 <_free_r>
 8007394:	230c      	movs	r3, #12
 8007396:	f8ca 3000 	str.w	r3, [sl]
 800739a:	89a3      	ldrh	r3, [r4, #12]
 800739c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073a0:	81a3      	strh	r3, [r4, #12]
 80073a2:	f04f 30ff 	mov.w	r0, #4294967295
 80073a6:	e7e9      	b.n	800737c <__ssputs_r+0x88>

080073a8 <_svfiprintf_r>:
 80073a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ac:	4698      	mov	r8, r3
 80073ae:	898b      	ldrh	r3, [r1, #12]
 80073b0:	061b      	lsls	r3, r3, #24
 80073b2:	b09d      	sub	sp, #116	; 0x74
 80073b4:	4607      	mov	r7, r0
 80073b6:	460d      	mov	r5, r1
 80073b8:	4614      	mov	r4, r2
 80073ba:	d50e      	bpl.n	80073da <_svfiprintf_r+0x32>
 80073bc:	690b      	ldr	r3, [r1, #16]
 80073be:	b963      	cbnz	r3, 80073da <_svfiprintf_r+0x32>
 80073c0:	2140      	movs	r1, #64	; 0x40
 80073c2:	f7fd febf 	bl	8005144 <_malloc_r>
 80073c6:	6028      	str	r0, [r5, #0]
 80073c8:	6128      	str	r0, [r5, #16]
 80073ca:	b920      	cbnz	r0, 80073d6 <_svfiprintf_r+0x2e>
 80073cc:	230c      	movs	r3, #12
 80073ce:	603b      	str	r3, [r7, #0]
 80073d0:	f04f 30ff 	mov.w	r0, #4294967295
 80073d4:	e0d0      	b.n	8007578 <_svfiprintf_r+0x1d0>
 80073d6:	2340      	movs	r3, #64	; 0x40
 80073d8:	616b      	str	r3, [r5, #20]
 80073da:	2300      	movs	r3, #0
 80073dc:	9309      	str	r3, [sp, #36]	; 0x24
 80073de:	2320      	movs	r3, #32
 80073e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80073e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80073e8:	2330      	movs	r3, #48	; 0x30
 80073ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007590 <_svfiprintf_r+0x1e8>
 80073ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80073f2:	f04f 0901 	mov.w	r9, #1
 80073f6:	4623      	mov	r3, r4
 80073f8:	469a      	mov	sl, r3
 80073fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073fe:	b10a      	cbz	r2, 8007404 <_svfiprintf_r+0x5c>
 8007400:	2a25      	cmp	r2, #37	; 0x25
 8007402:	d1f9      	bne.n	80073f8 <_svfiprintf_r+0x50>
 8007404:	ebba 0b04 	subs.w	fp, sl, r4
 8007408:	d00b      	beq.n	8007422 <_svfiprintf_r+0x7a>
 800740a:	465b      	mov	r3, fp
 800740c:	4622      	mov	r2, r4
 800740e:	4629      	mov	r1, r5
 8007410:	4638      	mov	r0, r7
 8007412:	f7ff ff6f 	bl	80072f4 <__ssputs_r>
 8007416:	3001      	adds	r0, #1
 8007418:	f000 80a9 	beq.w	800756e <_svfiprintf_r+0x1c6>
 800741c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800741e:	445a      	add	r2, fp
 8007420:	9209      	str	r2, [sp, #36]	; 0x24
 8007422:	f89a 3000 	ldrb.w	r3, [sl]
 8007426:	2b00      	cmp	r3, #0
 8007428:	f000 80a1 	beq.w	800756e <_svfiprintf_r+0x1c6>
 800742c:	2300      	movs	r3, #0
 800742e:	f04f 32ff 	mov.w	r2, #4294967295
 8007432:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007436:	f10a 0a01 	add.w	sl, sl, #1
 800743a:	9304      	str	r3, [sp, #16]
 800743c:	9307      	str	r3, [sp, #28]
 800743e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007442:	931a      	str	r3, [sp, #104]	; 0x68
 8007444:	4654      	mov	r4, sl
 8007446:	2205      	movs	r2, #5
 8007448:	f814 1b01 	ldrb.w	r1, [r4], #1
 800744c:	4850      	ldr	r0, [pc, #320]	; (8007590 <_svfiprintf_r+0x1e8>)
 800744e:	f7f8 febf 	bl	80001d0 <memchr>
 8007452:	9a04      	ldr	r2, [sp, #16]
 8007454:	b9d8      	cbnz	r0, 800748e <_svfiprintf_r+0xe6>
 8007456:	06d0      	lsls	r0, r2, #27
 8007458:	bf44      	itt	mi
 800745a:	2320      	movmi	r3, #32
 800745c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007460:	0711      	lsls	r1, r2, #28
 8007462:	bf44      	itt	mi
 8007464:	232b      	movmi	r3, #43	; 0x2b
 8007466:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800746a:	f89a 3000 	ldrb.w	r3, [sl]
 800746e:	2b2a      	cmp	r3, #42	; 0x2a
 8007470:	d015      	beq.n	800749e <_svfiprintf_r+0xf6>
 8007472:	9a07      	ldr	r2, [sp, #28]
 8007474:	4654      	mov	r4, sl
 8007476:	2000      	movs	r0, #0
 8007478:	f04f 0c0a 	mov.w	ip, #10
 800747c:	4621      	mov	r1, r4
 800747e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007482:	3b30      	subs	r3, #48	; 0x30
 8007484:	2b09      	cmp	r3, #9
 8007486:	d94d      	bls.n	8007524 <_svfiprintf_r+0x17c>
 8007488:	b1b0      	cbz	r0, 80074b8 <_svfiprintf_r+0x110>
 800748a:	9207      	str	r2, [sp, #28]
 800748c:	e014      	b.n	80074b8 <_svfiprintf_r+0x110>
 800748e:	eba0 0308 	sub.w	r3, r0, r8
 8007492:	fa09 f303 	lsl.w	r3, r9, r3
 8007496:	4313      	orrs	r3, r2
 8007498:	9304      	str	r3, [sp, #16]
 800749a:	46a2      	mov	sl, r4
 800749c:	e7d2      	b.n	8007444 <_svfiprintf_r+0x9c>
 800749e:	9b03      	ldr	r3, [sp, #12]
 80074a0:	1d19      	adds	r1, r3, #4
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	9103      	str	r1, [sp, #12]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	bfbb      	ittet	lt
 80074aa:	425b      	neglt	r3, r3
 80074ac:	f042 0202 	orrlt.w	r2, r2, #2
 80074b0:	9307      	strge	r3, [sp, #28]
 80074b2:	9307      	strlt	r3, [sp, #28]
 80074b4:	bfb8      	it	lt
 80074b6:	9204      	strlt	r2, [sp, #16]
 80074b8:	7823      	ldrb	r3, [r4, #0]
 80074ba:	2b2e      	cmp	r3, #46	; 0x2e
 80074bc:	d10c      	bne.n	80074d8 <_svfiprintf_r+0x130>
 80074be:	7863      	ldrb	r3, [r4, #1]
 80074c0:	2b2a      	cmp	r3, #42	; 0x2a
 80074c2:	d134      	bne.n	800752e <_svfiprintf_r+0x186>
 80074c4:	9b03      	ldr	r3, [sp, #12]
 80074c6:	1d1a      	adds	r2, r3, #4
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	9203      	str	r2, [sp, #12]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	bfb8      	it	lt
 80074d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80074d4:	3402      	adds	r4, #2
 80074d6:	9305      	str	r3, [sp, #20]
 80074d8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80075a0 <_svfiprintf_r+0x1f8>
 80074dc:	7821      	ldrb	r1, [r4, #0]
 80074de:	2203      	movs	r2, #3
 80074e0:	4650      	mov	r0, sl
 80074e2:	f7f8 fe75 	bl	80001d0 <memchr>
 80074e6:	b138      	cbz	r0, 80074f8 <_svfiprintf_r+0x150>
 80074e8:	9b04      	ldr	r3, [sp, #16]
 80074ea:	eba0 000a 	sub.w	r0, r0, sl
 80074ee:	2240      	movs	r2, #64	; 0x40
 80074f0:	4082      	lsls	r2, r0
 80074f2:	4313      	orrs	r3, r2
 80074f4:	3401      	adds	r4, #1
 80074f6:	9304      	str	r3, [sp, #16]
 80074f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074fc:	4825      	ldr	r0, [pc, #148]	; (8007594 <_svfiprintf_r+0x1ec>)
 80074fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007502:	2206      	movs	r2, #6
 8007504:	f7f8 fe64 	bl	80001d0 <memchr>
 8007508:	2800      	cmp	r0, #0
 800750a:	d038      	beq.n	800757e <_svfiprintf_r+0x1d6>
 800750c:	4b22      	ldr	r3, [pc, #136]	; (8007598 <_svfiprintf_r+0x1f0>)
 800750e:	bb1b      	cbnz	r3, 8007558 <_svfiprintf_r+0x1b0>
 8007510:	9b03      	ldr	r3, [sp, #12]
 8007512:	3307      	adds	r3, #7
 8007514:	f023 0307 	bic.w	r3, r3, #7
 8007518:	3308      	adds	r3, #8
 800751a:	9303      	str	r3, [sp, #12]
 800751c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800751e:	4433      	add	r3, r6
 8007520:	9309      	str	r3, [sp, #36]	; 0x24
 8007522:	e768      	b.n	80073f6 <_svfiprintf_r+0x4e>
 8007524:	fb0c 3202 	mla	r2, ip, r2, r3
 8007528:	460c      	mov	r4, r1
 800752a:	2001      	movs	r0, #1
 800752c:	e7a6      	b.n	800747c <_svfiprintf_r+0xd4>
 800752e:	2300      	movs	r3, #0
 8007530:	3401      	adds	r4, #1
 8007532:	9305      	str	r3, [sp, #20]
 8007534:	4619      	mov	r1, r3
 8007536:	f04f 0c0a 	mov.w	ip, #10
 800753a:	4620      	mov	r0, r4
 800753c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007540:	3a30      	subs	r2, #48	; 0x30
 8007542:	2a09      	cmp	r2, #9
 8007544:	d903      	bls.n	800754e <_svfiprintf_r+0x1a6>
 8007546:	2b00      	cmp	r3, #0
 8007548:	d0c6      	beq.n	80074d8 <_svfiprintf_r+0x130>
 800754a:	9105      	str	r1, [sp, #20]
 800754c:	e7c4      	b.n	80074d8 <_svfiprintf_r+0x130>
 800754e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007552:	4604      	mov	r4, r0
 8007554:	2301      	movs	r3, #1
 8007556:	e7f0      	b.n	800753a <_svfiprintf_r+0x192>
 8007558:	ab03      	add	r3, sp, #12
 800755a:	9300      	str	r3, [sp, #0]
 800755c:	462a      	mov	r2, r5
 800755e:	4b0f      	ldr	r3, [pc, #60]	; (800759c <_svfiprintf_r+0x1f4>)
 8007560:	a904      	add	r1, sp, #16
 8007562:	4638      	mov	r0, r7
 8007564:	f7fd ff1a 	bl	800539c <_printf_float>
 8007568:	1c42      	adds	r2, r0, #1
 800756a:	4606      	mov	r6, r0
 800756c:	d1d6      	bne.n	800751c <_svfiprintf_r+0x174>
 800756e:	89ab      	ldrh	r3, [r5, #12]
 8007570:	065b      	lsls	r3, r3, #25
 8007572:	f53f af2d 	bmi.w	80073d0 <_svfiprintf_r+0x28>
 8007576:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007578:	b01d      	add	sp, #116	; 0x74
 800757a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800757e:	ab03      	add	r3, sp, #12
 8007580:	9300      	str	r3, [sp, #0]
 8007582:	462a      	mov	r2, r5
 8007584:	4b05      	ldr	r3, [pc, #20]	; (800759c <_svfiprintf_r+0x1f4>)
 8007586:	a904      	add	r1, sp, #16
 8007588:	4638      	mov	r0, r7
 800758a:	f7fe f9ab 	bl	80058e4 <_printf_i>
 800758e:	e7eb      	b.n	8007568 <_svfiprintf_r+0x1c0>
 8007590:	080080ac 	.word	0x080080ac
 8007594:	080080b6 	.word	0x080080b6
 8007598:	0800539d 	.word	0x0800539d
 800759c:	080072f5 	.word	0x080072f5
 80075a0:	080080b2 	.word	0x080080b2

080075a4 <__sflush_r>:
 80075a4:	898a      	ldrh	r2, [r1, #12]
 80075a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075aa:	4605      	mov	r5, r0
 80075ac:	0710      	lsls	r0, r2, #28
 80075ae:	460c      	mov	r4, r1
 80075b0:	d458      	bmi.n	8007664 <__sflush_r+0xc0>
 80075b2:	684b      	ldr	r3, [r1, #4]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	dc05      	bgt.n	80075c4 <__sflush_r+0x20>
 80075b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	dc02      	bgt.n	80075c4 <__sflush_r+0x20>
 80075be:	2000      	movs	r0, #0
 80075c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075c6:	2e00      	cmp	r6, #0
 80075c8:	d0f9      	beq.n	80075be <__sflush_r+0x1a>
 80075ca:	2300      	movs	r3, #0
 80075cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80075d0:	682f      	ldr	r7, [r5, #0]
 80075d2:	6a21      	ldr	r1, [r4, #32]
 80075d4:	602b      	str	r3, [r5, #0]
 80075d6:	d032      	beq.n	800763e <__sflush_r+0x9a>
 80075d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80075da:	89a3      	ldrh	r3, [r4, #12]
 80075dc:	075a      	lsls	r2, r3, #29
 80075de:	d505      	bpl.n	80075ec <__sflush_r+0x48>
 80075e0:	6863      	ldr	r3, [r4, #4]
 80075e2:	1ac0      	subs	r0, r0, r3
 80075e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80075e6:	b10b      	cbz	r3, 80075ec <__sflush_r+0x48>
 80075e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80075ea:	1ac0      	subs	r0, r0, r3
 80075ec:	2300      	movs	r3, #0
 80075ee:	4602      	mov	r2, r0
 80075f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075f2:	6a21      	ldr	r1, [r4, #32]
 80075f4:	4628      	mov	r0, r5
 80075f6:	47b0      	blx	r6
 80075f8:	1c43      	adds	r3, r0, #1
 80075fa:	89a3      	ldrh	r3, [r4, #12]
 80075fc:	d106      	bne.n	800760c <__sflush_r+0x68>
 80075fe:	6829      	ldr	r1, [r5, #0]
 8007600:	291d      	cmp	r1, #29
 8007602:	d82b      	bhi.n	800765c <__sflush_r+0xb8>
 8007604:	4a29      	ldr	r2, [pc, #164]	; (80076ac <__sflush_r+0x108>)
 8007606:	410a      	asrs	r2, r1
 8007608:	07d6      	lsls	r6, r2, #31
 800760a:	d427      	bmi.n	800765c <__sflush_r+0xb8>
 800760c:	2200      	movs	r2, #0
 800760e:	6062      	str	r2, [r4, #4]
 8007610:	04d9      	lsls	r1, r3, #19
 8007612:	6922      	ldr	r2, [r4, #16]
 8007614:	6022      	str	r2, [r4, #0]
 8007616:	d504      	bpl.n	8007622 <__sflush_r+0x7e>
 8007618:	1c42      	adds	r2, r0, #1
 800761a:	d101      	bne.n	8007620 <__sflush_r+0x7c>
 800761c:	682b      	ldr	r3, [r5, #0]
 800761e:	b903      	cbnz	r3, 8007622 <__sflush_r+0x7e>
 8007620:	6560      	str	r0, [r4, #84]	; 0x54
 8007622:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007624:	602f      	str	r7, [r5, #0]
 8007626:	2900      	cmp	r1, #0
 8007628:	d0c9      	beq.n	80075be <__sflush_r+0x1a>
 800762a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800762e:	4299      	cmp	r1, r3
 8007630:	d002      	beq.n	8007638 <__sflush_r+0x94>
 8007632:	4628      	mov	r0, r5
 8007634:	f7ff fa96 	bl	8006b64 <_free_r>
 8007638:	2000      	movs	r0, #0
 800763a:	6360      	str	r0, [r4, #52]	; 0x34
 800763c:	e7c0      	b.n	80075c0 <__sflush_r+0x1c>
 800763e:	2301      	movs	r3, #1
 8007640:	4628      	mov	r0, r5
 8007642:	47b0      	blx	r6
 8007644:	1c41      	adds	r1, r0, #1
 8007646:	d1c8      	bne.n	80075da <__sflush_r+0x36>
 8007648:	682b      	ldr	r3, [r5, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d0c5      	beq.n	80075da <__sflush_r+0x36>
 800764e:	2b1d      	cmp	r3, #29
 8007650:	d001      	beq.n	8007656 <__sflush_r+0xb2>
 8007652:	2b16      	cmp	r3, #22
 8007654:	d101      	bne.n	800765a <__sflush_r+0xb6>
 8007656:	602f      	str	r7, [r5, #0]
 8007658:	e7b1      	b.n	80075be <__sflush_r+0x1a>
 800765a:	89a3      	ldrh	r3, [r4, #12]
 800765c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007660:	81a3      	strh	r3, [r4, #12]
 8007662:	e7ad      	b.n	80075c0 <__sflush_r+0x1c>
 8007664:	690f      	ldr	r7, [r1, #16]
 8007666:	2f00      	cmp	r7, #0
 8007668:	d0a9      	beq.n	80075be <__sflush_r+0x1a>
 800766a:	0793      	lsls	r3, r2, #30
 800766c:	680e      	ldr	r6, [r1, #0]
 800766e:	bf08      	it	eq
 8007670:	694b      	ldreq	r3, [r1, #20]
 8007672:	600f      	str	r7, [r1, #0]
 8007674:	bf18      	it	ne
 8007676:	2300      	movne	r3, #0
 8007678:	eba6 0807 	sub.w	r8, r6, r7
 800767c:	608b      	str	r3, [r1, #8]
 800767e:	f1b8 0f00 	cmp.w	r8, #0
 8007682:	dd9c      	ble.n	80075be <__sflush_r+0x1a>
 8007684:	6a21      	ldr	r1, [r4, #32]
 8007686:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007688:	4643      	mov	r3, r8
 800768a:	463a      	mov	r2, r7
 800768c:	4628      	mov	r0, r5
 800768e:	47b0      	blx	r6
 8007690:	2800      	cmp	r0, #0
 8007692:	dc06      	bgt.n	80076a2 <__sflush_r+0xfe>
 8007694:	89a3      	ldrh	r3, [r4, #12]
 8007696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800769a:	81a3      	strh	r3, [r4, #12]
 800769c:	f04f 30ff 	mov.w	r0, #4294967295
 80076a0:	e78e      	b.n	80075c0 <__sflush_r+0x1c>
 80076a2:	4407      	add	r7, r0
 80076a4:	eba8 0800 	sub.w	r8, r8, r0
 80076a8:	e7e9      	b.n	800767e <__sflush_r+0xda>
 80076aa:	bf00      	nop
 80076ac:	dfbffffe 	.word	0xdfbffffe

080076b0 <_fflush_r>:
 80076b0:	b538      	push	{r3, r4, r5, lr}
 80076b2:	690b      	ldr	r3, [r1, #16]
 80076b4:	4605      	mov	r5, r0
 80076b6:	460c      	mov	r4, r1
 80076b8:	b913      	cbnz	r3, 80076c0 <_fflush_r+0x10>
 80076ba:	2500      	movs	r5, #0
 80076bc:	4628      	mov	r0, r5
 80076be:	bd38      	pop	{r3, r4, r5, pc}
 80076c0:	b118      	cbz	r0, 80076ca <_fflush_r+0x1a>
 80076c2:	6a03      	ldr	r3, [r0, #32]
 80076c4:	b90b      	cbnz	r3, 80076ca <_fflush_r+0x1a>
 80076c6:	f7fe faa9 	bl	8005c1c <__sinit>
 80076ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d0f3      	beq.n	80076ba <_fflush_r+0xa>
 80076d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80076d4:	07d0      	lsls	r0, r2, #31
 80076d6:	d404      	bmi.n	80076e2 <_fflush_r+0x32>
 80076d8:	0599      	lsls	r1, r3, #22
 80076da:	d402      	bmi.n	80076e2 <_fflush_r+0x32>
 80076dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076de:	f7fe fbc3 	bl	8005e68 <__retarget_lock_acquire_recursive>
 80076e2:	4628      	mov	r0, r5
 80076e4:	4621      	mov	r1, r4
 80076e6:	f7ff ff5d 	bl	80075a4 <__sflush_r>
 80076ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80076ec:	07da      	lsls	r2, r3, #31
 80076ee:	4605      	mov	r5, r0
 80076f0:	d4e4      	bmi.n	80076bc <_fflush_r+0xc>
 80076f2:	89a3      	ldrh	r3, [r4, #12]
 80076f4:	059b      	lsls	r3, r3, #22
 80076f6:	d4e1      	bmi.n	80076bc <_fflush_r+0xc>
 80076f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076fa:	f7fe fbb6 	bl	8005e6a <__retarget_lock_release_recursive>
 80076fe:	e7dd      	b.n	80076bc <_fflush_r+0xc>

08007700 <memmove>:
 8007700:	4288      	cmp	r0, r1
 8007702:	b510      	push	{r4, lr}
 8007704:	eb01 0402 	add.w	r4, r1, r2
 8007708:	d902      	bls.n	8007710 <memmove+0x10>
 800770a:	4284      	cmp	r4, r0
 800770c:	4623      	mov	r3, r4
 800770e:	d807      	bhi.n	8007720 <memmove+0x20>
 8007710:	1e43      	subs	r3, r0, #1
 8007712:	42a1      	cmp	r1, r4
 8007714:	d008      	beq.n	8007728 <memmove+0x28>
 8007716:	f811 2b01 	ldrb.w	r2, [r1], #1
 800771a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800771e:	e7f8      	b.n	8007712 <memmove+0x12>
 8007720:	4402      	add	r2, r0
 8007722:	4601      	mov	r1, r0
 8007724:	428a      	cmp	r2, r1
 8007726:	d100      	bne.n	800772a <memmove+0x2a>
 8007728:	bd10      	pop	{r4, pc}
 800772a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800772e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007732:	e7f7      	b.n	8007724 <memmove+0x24>

08007734 <memcpy>:
 8007734:	440a      	add	r2, r1
 8007736:	4291      	cmp	r1, r2
 8007738:	f100 33ff 	add.w	r3, r0, #4294967295
 800773c:	d100      	bne.n	8007740 <memcpy+0xc>
 800773e:	4770      	bx	lr
 8007740:	b510      	push	{r4, lr}
 8007742:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007746:	f803 4f01 	strb.w	r4, [r3, #1]!
 800774a:	4291      	cmp	r1, r2
 800774c:	d1f9      	bne.n	8007742 <memcpy+0xe>
 800774e:	bd10      	pop	{r4, pc}

08007750 <__assert_func>:
 8007750:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007752:	4614      	mov	r4, r2
 8007754:	461a      	mov	r2, r3
 8007756:	4b09      	ldr	r3, [pc, #36]	; (800777c <__assert_func+0x2c>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4605      	mov	r5, r0
 800775c:	68d8      	ldr	r0, [r3, #12]
 800775e:	b14c      	cbz	r4, 8007774 <__assert_func+0x24>
 8007760:	4b07      	ldr	r3, [pc, #28]	; (8007780 <__assert_func+0x30>)
 8007762:	9100      	str	r1, [sp, #0]
 8007764:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007768:	4906      	ldr	r1, [pc, #24]	; (8007784 <__assert_func+0x34>)
 800776a:	462b      	mov	r3, r5
 800776c:	f000 f872 	bl	8007854 <fiprintf>
 8007770:	f000 f882 	bl	8007878 <abort>
 8007774:	4b04      	ldr	r3, [pc, #16]	; (8007788 <__assert_func+0x38>)
 8007776:	461c      	mov	r4, r3
 8007778:	e7f3      	b.n	8007762 <__assert_func+0x12>
 800777a:	bf00      	nop
 800777c:	20000098 	.word	0x20000098
 8007780:	080080c7 	.word	0x080080c7
 8007784:	080080d4 	.word	0x080080d4
 8007788:	08008102 	.word	0x08008102

0800778c <_calloc_r>:
 800778c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800778e:	fba1 2402 	umull	r2, r4, r1, r2
 8007792:	b94c      	cbnz	r4, 80077a8 <_calloc_r+0x1c>
 8007794:	4611      	mov	r1, r2
 8007796:	9201      	str	r2, [sp, #4]
 8007798:	f7fd fcd4 	bl	8005144 <_malloc_r>
 800779c:	9a01      	ldr	r2, [sp, #4]
 800779e:	4605      	mov	r5, r0
 80077a0:	b930      	cbnz	r0, 80077b0 <_calloc_r+0x24>
 80077a2:	4628      	mov	r0, r5
 80077a4:	b003      	add	sp, #12
 80077a6:	bd30      	pop	{r4, r5, pc}
 80077a8:	220c      	movs	r2, #12
 80077aa:	6002      	str	r2, [r0, #0]
 80077ac:	2500      	movs	r5, #0
 80077ae:	e7f8      	b.n	80077a2 <_calloc_r+0x16>
 80077b0:	4621      	mov	r1, r4
 80077b2:	f7fe facc 	bl	8005d4e <memset>
 80077b6:	e7f4      	b.n	80077a2 <_calloc_r+0x16>

080077b8 <__ascii_mbtowc>:
 80077b8:	b082      	sub	sp, #8
 80077ba:	b901      	cbnz	r1, 80077be <__ascii_mbtowc+0x6>
 80077bc:	a901      	add	r1, sp, #4
 80077be:	b142      	cbz	r2, 80077d2 <__ascii_mbtowc+0x1a>
 80077c0:	b14b      	cbz	r3, 80077d6 <__ascii_mbtowc+0x1e>
 80077c2:	7813      	ldrb	r3, [r2, #0]
 80077c4:	600b      	str	r3, [r1, #0]
 80077c6:	7812      	ldrb	r2, [r2, #0]
 80077c8:	1e10      	subs	r0, r2, #0
 80077ca:	bf18      	it	ne
 80077cc:	2001      	movne	r0, #1
 80077ce:	b002      	add	sp, #8
 80077d0:	4770      	bx	lr
 80077d2:	4610      	mov	r0, r2
 80077d4:	e7fb      	b.n	80077ce <__ascii_mbtowc+0x16>
 80077d6:	f06f 0001 	mvn.w	r0, #1
 80077da:	e7f8      	b.n	80077ce <__ascii_mbtowc+0x16>

080077dc <_realloc_r>:
 80077dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077e0:	4680      	mov	r8, r0
 80077e2:	4614      	mov	r4, r2
 80077e4:	460e      	mov	r6, r1
 80077e6:	b921      	cbnz	r1, 80077f2 <_realloc_r+0x16>
 80077e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077ec:	4611      	mov	r1, r2
 80077ee:	f7fd bca9 	b.w	8005144 <_malloc_r>
 80077f2:	b92a      	cbnz	r2, 8007800 <_realloc_r+0x24>
 80077f4:	f7ff f9b6 	bl	8006b64 <_free_r>
 80077f8:	4625      	mov	r5, r4
 80077fa:	4628      	mov	r0, r5
 80077fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007800:	f000 f841 	bl	8007886 <_malloc_usable_size_r>
 8007804:	4284      	cmp	r4, r0
 8007806:	4607      	mov	r7, r0
 8007808:	d802      	bhi.n	8007810 <_realloc_r+0x34>
 800780a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800780e:	d812      	bhi.n	8007836 <_realloc_r+0x5a>
 8007810:	4621      	mov	r1, r4
 8007812:	4640      	mov	r0, r8
 8007814:	f7fd fc96 	bl	8005144 <_malloc_r>
 8007818:	4605      	mov	r5, r0
 800781a:	2800      	cmp	r0, #0
 800781c:	d0ed      	beq.n	80077fa <_realloc_r+0x1e>
 800781e:	42bc      	cmp	r4, r7
 8007820:	4622      	mov	r2, r4
 8007822:	4631      	mov	r1, r6
 8007824:	bf28      	it	cs
 8007826:	463a      	movcs	r2, r7
 8007828:	f7ff ff84 	bl	8007734 <memcpy>
 800782c:	4631      	mov	r1, r6
 800782e:	4640      	mov	r0, r8
 8007830:	f7ff f998 	bl	8006b64 <_free_r>
 8007834:	e7e1      	b.n	80077fa <_realloc_r+0x1e>
 8007836:	4635      	mov	r5, r6
 8007838:	e7df      	b.n	80077fa <_realloc_r+0x1e>

0800783a <__ascii_wctomb>:
 800783a:	b149      	cbz	r1, 8007850 <__ascii_wctomb+0x16>
 800783c:	2aff      	cmp	r2, #255	; 0xff
 800783e:	bf85      	ittet	hi
 8007840:	238a      	movhi	r3, #138	; 0x8a
 8007842:	6003      	strhi	r3, [r0, #0]
 8007844:	700a      	strbls	r2, [r1, #0]
 8007846:	f04f 30ff 	movhi.w	r0, #4294967295
 800784a:	bf98      	it	ls
 800784c:	2001      	movls	r0, #1
 800784e:	4770      	bx	lr
 8007850:	4608      	mov	r0, r1
 8007852:	4770      	bx	lr

08007854 <fiprintf>:
 8007854:	b40e      	push	{r1, r2, r3}
 8007856:	b503      	push	{r0, r1, lr}
 8007858:	4601      	mov	r1, r0
 800785a:	ab03      	add	r3, sp, #12
 800785c:	4805      	ldr	r0, [pc, #20]	; (8007874 <fiprintf+0x20>)
 800785e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007862:	6800      	ldr	r0, [r0, #0]
 8007864:	9301      	str	r3, [sp, #4]
 8007866:	f000 f83f 	bl	80078e8 <_vfiprintf_r>
 800786a:	b002      	add	sp, #8
 800786c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007870:	b003      	add	sp, #12
 8007872:	4770      	bx	lr
 8007874:	20000098 	.word	0x20000098

08007878 <abort>:
 8007878:	b508      	push	{r3, lr}
 800787a:	2006      	movs	r0, #6
 800787c:	f000 fa0c 	bl	8007c98 <raise>
 8007880:	2001      	movs	r0, #1
 8007882:	f7f9 ff29 	bl	80016d8 <_exit>

08007886 <_malloc_usable_size_r>:
 8007886:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800788a:	1f18      	subs	r0, r3, #4
 800788c:	2b00      	cmp	r3, #0
 800788e:	bfbc      	itt	lt
 8007890:	580b      	ldrlt	r3, [r1, r0]
 8007892:	18c0      	addlt	r0, r0, r3
 8007894:	4770      	bx	lr

08007896 <__sfputc_r>:
 8007896:	6893      	ldr	r3, [r2, #8]
 8007898:	3b01      	subs	r3, #1
 800789a:	2b00      	cmp	r3, #0
 800789c:	b410      	push	{r4}
 800789e:	6093      	str	r3, [r2, #8]
 80078a0:	da08      	bge.n	80078b4 <__sfputc_r+0x1e>
 80078a2:	6994      	ldr	r4, [r2, #24]
 80078a4:	42a3      	cmp	r3, r4
 80078a6:	db01      	blt.n	80078ac <__sfputc_r+0x16>
 80078a8:	290a      	cmp	r1, #10
 80078aa:	d103      	bne.n	80078b4 <__sfputc_r+0x1e>
 80078ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078b0:	f000 b934 	b.w	8007b1c <__swbuf_r>
 80078b4:	6813      	ldr	r3, [r2, #0]
 80078b6:	1c58      	adds	r0, r3, #1
 80078b8:	6010      	str	r0, [r2, #0]
 80078ba:	7019      	strb	r1, [r3, #0]
 80078bc:	4608      	mov	r0, r1
 80078be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <__sfputs_r>:
 80078c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078c6:	4606      	mov	r6, r0
 80078c8:	460f      	mov	r7, r1
 80078ca:	4614      	mov	r4, r2
 80078cc:	18d5      	adds	r5, r2, r3
 80078ce:	42ac      	cmp	r4, r5
 80078d0:	d101      	bne.n	80078d6 <__sfputs_r+0x12>
 80078d2:	2000      	movs	r0, #0
 80078d4:	e007      	b.n	80078e6 <__sfputs_r+0x22>
 80078d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078da:	463a      	mov	r2, r7
 80078dc:	4630      	mov	r0, r6
 80078de:	f7ff ffda 	bl	8007896 <__sfputc_r>
 80078e2:	1c43      	adds	r3, r0, #1
 80078e4:	d1f3      	bne.n	80078ce <__sfputs_r+0xa>
 80078e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080078e8 <_vfiprintf_r>:
 80078e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ec:	460d      	mov	r5, r1
 80078ee:	b09d      	sub	sp, #116	; 0x74
 80078f0:	4614      	mov	r4, r2
 80078f2:	4698      	mov	r8, r3
 80078f4:	4606      	mov	r6, r0
 80078f6:	b118      	cbz	r0, 8007900 <_vfiprintf_r+0x18>
 80078f8:	6a03      	ldr	r3, [r0, #32]
 80078fa:	b90b      	cbnz	r3, 8007900 <_vfiprintf_r+0x18>
 80078fc:	f7fe f98e 	bl	8005c1c <__sinit>
 8007900:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007902:	07d9      	lsls	r1, r3, #31
 8007904:	d405      	bmi.n	8007912 <_vfiprintf_r+0x2a>
 8007906:	89ab      	ldrh	r3, [r5, #12]
 8007908:	059a      	lsls	r2, r3, #22
 800790a:	d402      	bmi.n	8007912 <_vfiprintf_r+0x2a>
 800790c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800790e:	f7fe faab 	bl	8005e68 <__retarget_lock_acquire_recursive>
 8007912:	89ab      	ldrh	r3, [r5, #12]
 8007914:	071b      	lsls	r3, r3, #28
 8007916:	d501      	bpl.n	800791c <_vfiprintf_r+0x34>
 8007918:	692b      	ldr	r3, [r5, #16]
 800791a:	b99b      	cbnz	r3, 8007944 <_vfiprintf_r+0x5c>
 800791c:	4629      	mov	r1, r5
 800791e:	4630      	mov	r0, r6
 8007920:	f000 f93a 	bl	8007b98 <__swsetup_r>
 8007924:	b170      	cbz	r0, 8007944 <_vfiprintf_r+0x5c>
 8007926:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007928:	07dc      	lsls	r4, r3, #31
 800792a:	d504      	bpl.n	8007936 <_vfiprintf_r+0x4e>
 800792c:	f04f 30ff 	mov.w	r0, #4294967295
 8007930:	b01d      	add	sp, #116	; 0x74
 8007932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007936:	89ab      	ldrh	r3, [r5, #12]
 8007938:	0598      	lsls	r0, r3, #22
 800793a:	d4f7      	bmi.n	800792c <_vfiprintf_r+0x44>
 800793c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800793e:	f7fe fa94 	bl	8005e6a <__retarget_lock_release_recursive>
 8007942:	e7f3      	b.n	800792c <_vfiprintf_r+0x44>
 8007944:	2300      	movs	r3, #0
 8007946:	9309      	str	r3, [sp, #36]	; 0x24
 8007948:	2320      	movs	r3, #32
 800794a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800794e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007952:	2330      	movs	r3, #48	; 0x30
 8007954:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007b08 <_vfiprintf_r+0x220>
 8007958:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800795c:	f04f 0901 	mov.w	r9, #1
 8007960:	4623      	mov	r3, r4
 8007962:	469a      	mov	sl, r3
 8007964:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007968:	b10a      	cbz	r2, 800796e <_vfiprintf_r+0x86>
 800796a:	2a25      	cmp	r2, #37	; 0x25
 800796c:	d1f9      	bne.n	8007962 <_vfiprintf_r+0x7a>
 800796e:	ebba 0b04 	subs.w	fp, sl, r4
 8007972:	d00b      	beq.n	800798c <_vfiprintf_r+0xa4>
 8007974:	465b      	mov	r3, fp
 8007976:	4622      	mov	r2, r4
 8007978:	4629      	mov	r1, r5
 800797a:	4630      	mov	r0, r6
 800797c:	f7ff ffa2 	bl	80078c4 <__sfputs_r>
 8007980:	3001      	adds	r0, #1
 8007982:	f000 80a9 	beq.w	8007ad8 <_vfiprintf_r+0x1f0>
 8007986:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007988:	445a      	add	r2, fp
 800798a:	9209      	str	r2, [sp, #36]	; 0x24
 800798c:	f89a 3000 	ldrb.w	r3, [sl]
 8007990:	2b00      	cmp	r3, #0
 8007992:	f000 80a1 	beq.w	8007ad8 <_vfiprintf_r+0x1f0>
 8007996:	2300      	movs	r3, #0
 8007998:	f04f 32ff 	mov.w	r2, #4294967295
 800799c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079a0:	f10a 0a01 	add.w	sl, sl, #1
 80079a4:	9304      	str	r3, [sp, #16]
 80079a6:	9307      	str	r3, [sp, #28]
 80079a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079ac:	931a      	str	r3, [sp, #104]	; 0x68
 80079ae:	4654      	mov	r4, sl
 80079b0:	2205      	movs	r2, #5
 80079b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079b6:	4854      	ldr	r0, [pc, #336]	; (8007b08 <_vfiprintf_r+0x220>)
 80079b8:	f7f8 fc0a 	bl	80001d0 <memchr>
 80079bc:	9a04      	ldr	r2, [sp, #16]
 80079be:	b9d8      	cbnz	r0, 80079f8 <_vfiprintf_r+0x110>
 80079c0:	06d1      	lsls	r1, r2, #27
 80079c2:	bf44      	itt	mi
 80079c4:	2320      	movmi	r3, #32
 80079c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079ca:	0713      	lsls	r3, r2, #28
 80079cc:	bf44      	itt	mi
 80079ce:	232b      	movmi	r3, #43	; 0x2b
 80079d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079d4:	f89a 3000 	ldrb.w	r3, [sl]
 80079d8:	2b2a      	cmp	r3, #42	; 0x2a
 80079da:	d015      	beq.n	8007a08 <_vfiprintf_r+0x120>
 80079dc:	9a07      	ldr	r2, [sp, #28]
 80079de:	4654      	mov	r4, sl
 80079e0:	2000      	movs	r0, #0
 80079e2:	f04f 0c0a 	mov.w	ip, #10
 80079e6:	4621      	mov	r1, r4
 80079e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079ec:	3b30      	subs	r3, #48	; 0x30
 80079ee:	2b09      	cmp	r3, #9
 80079f0:	d94d      	bls.n	8007a8e <_vfiprintf_r+0x1a6>
 80079f2:	b1b0      	cbz	r0, 8007a22 <_vfiprintf_r+0x13a>
 80079f4:	9207      	str	r2, [sp, #28]
 80079f6:	e014      	b.n	8007a22 <_vfiprintf_r+0x13a>
 80079f8:	eba0 0308 	sub.w	r3, r0, r8
 80079fc:	fa09 f303 	lsl.w	r3, r9, r3
 8007a00:	4313      	orrs	r3, r2
 8007a02:	9304      	str	r3, [sp, #16]
 8007a04:	46a2      	mov	sl, r4
 8007a06:	e7d2      	b.n	80079ae <_vfiprintf_r+0xc6>
 8007a08:	9b03      	ldr	r3, [sp, #12]
 8007a0a:	1d19      	adds	r1, r3, #4
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	9103      	str	r1, [sp, #12]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	bfbb      	ittet	lt
 8007a14:	425b      	neglt	r3, r3
 8007a16:	f042 0202 	orrlt.w	r2, r2, #2
 8007a1a:	9307      	strge	r3, [sp, #28]
 8007a1c:	9307      	strlt	r3, [sp, #28]
 8007a1e:	bfb8      	it	lt
 8007a20:	9204      	strlt	r2, [sp, #16]
 8007a22:	7823      	ldrb	r3, [r4, #0]
 8007a24:	2b2e      	cmp	r3, #46	; 0x2e
 8007a26:	d10c      	bne.n	8007a42 <_vfiprintf_r+0x15a>
 8007a28:	7863      	ldrb	r3, [r4, #1]
 8007a2a:	2b2a      	cmp	r3, #42	; 0x2a
 8007a2c:	d134      	bne.n	8007a98 <_vfiprintf_r+0x1b0>
 8007a2e:	9b03      	ldr	r3, [sp, #12]
 8007a30:	1d1a      	adds	r2, r3, #4
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	9203      	str	r2, [sp, #12]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	bfb8      	it	lt
 8007a3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a3e:	3402      	adds	r4, #2
 8007a40:	9305      	str	r3, [sp, #20]
 8007a42:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007b18 <_vfiprintf_r+0x230>
 8007a46:	7821      	ldrb	r1, [r4, #0]
 8007a48:	2203      	movs	r2, #3
 8007a4a:	4650      	mov	r0, sl
 8007a4c:	f7f8 fbc0 	bl	80001d0 <memchr>
 8007a50:	b138      	cbz	r0, 8007a62 <_vfiprintf_r+0x17a>
 8007a52:	9b04      	ldr	r3, [sp, #16]
 8007a54:	eba0 000a 	sub.w	r0, r0, sl
 8007a58:	2240      	movs	r2, #64	; 0x40
 8007a5a:	4082      	lsls	r2, r0
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	3401      	adds	r4, #1
 8007a60:	9304      	str	r3, [sp, #16]
 8007a62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a66:	4829      	ldr	r0, [pc, #164]	; (8007b0c <_vfiprintf_r+0x224>)
 8007a68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a6c:	2206      	movs	r2, #6
 8007a6e:	f7f8 fbaf 	bl	80001d0 <memchr>
 8007a72:	2800      	cmp	r0, #0
 8007a74:	d03f      	beq.n	8007af6 <_vfiprintf_r+0x20e>
 8007a76:	4b26      	ldr	r3, [pc, #152]	; (8007b10 <_vfiprintf_r+0x228>)
 8007a78:	bb1b      	cbnz	r3, 8007ac2 <_vfiprintf_r+0x1da>
 8007a7a:	9b03      	ldr	r3, [sp, #12]
 8007a7c:	3307      	adds	r3, #7
 8007a7e:	f023 0307 	bic.w	r3, r3, #7
 8007a82:	3308      	adds	r3, #8
 8007a84:	9303      	str	r3, [sp, #12]
 8007a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a88:	443b      	add	r3, r7
 8007a8a:	9309      	str	r3, [sp, #36]	; 0x24
 8007a8c:	e768      	b.n	8007960 <_vfiprintf_r+0x78>
 8007a8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a92:	460c      	mov	r4, r1
 8007a94:	2001      	movs	r0, #1
 8007a96:	e7a6      	b.n	80079e6 <_vfiprintf_r+0xfe>
 8007a98:	2300      	movs	r3, #0
 8007a9a:	3401      	adds	r4, #1
 8007a9c:	9305      	str	r3, [sp, #20]
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	f04f 0c0a 	mov.w	ip, #10
 8007aa4:	4620      	mov	r0, r4
 8007aa6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007aaa:	3a30      	subs	r2, #48	; 0x30
 8007aac:	2a09      	cmp	r2, #9
 8007aae:	d903      	bls.n	8007ab8 <_vfiprintf_r+0x1d0>
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d0c6      	beq.n	8007a42 <_vfiprintf_r+0x15a>
 8007ab4:	9105      	str	r1, [sp, #20]
 8007ab6:	e7c4      	b.n	8007a42 <_vfiprintf_r+0x15a>
 8007ab8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007abc:	4604      	mov	r4, r0
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e7f0      	b.n	8007aa4 <_vfiprintf_r+0x1bc>
 8007ac2:	ab03      	add	r3, sp, #12
 8007ac4:	9300      	str	r3, [sp, #0]
 8007ac6:	462a      	mov	r2, r5
 8007ac8:	4b12      	ldr	r3, [pc, #72]	; (8007b14 <_vfiprintf_r+0x22c>)
 8007aca:	a904      	add	r1, sp, #16
 8007acc:	4630      	mov	r0, r6
 8007ace:	f7fd fc65 	bl	800539c <_printf_float>
 8007ad2:	4607      	mov	r7, r0
 8007ad4:	1c78      	adds	r0, r7, #1
 8007ad6:	d1d6      	bne.n	8007a86 <_vfiprintf_r+0x19e>
 8007ad8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ada:	07d9      	lsls	r1, r3, #31
 8007adc:	d405      	bmi.n	8007aea <_vfiprintf_r+0x202>
 8007ade:	89ab      	ldrh	r3, [r5, #12]
 8007ae0:	059a      	lsls	r2, r3, #22
 8007ae2:	d402      	bmi.n	8007aea <_vfiprintf_r+0x202>
 8007ae4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ae6:	f7fe f9c0 	bl	8005e6a <__retarget_lock_release_recursive>
 8007aea:	89ab      	ldrh	r3, [r5, #12]
 8007aec:	065b      	lsls	r3, r3, #25
 8007aee:	f53f af1d 	bmi.w	800792c <_vfiprintf_r+0x44>
 8007af2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007af4:	e71c      	b.n	8007930 <_vfiprintf_r+0x48>
 8007af6:	ab03      	add	r3, sp, #12
 8007af8:	9300      	str	r3, [sp, #0]
 8007afa:	462a      	mov	r2, r5
 8007afc:	4b05      	ldr	r3, [pc, #20]	; (8007b14 <_vfiprintf_r+0x22c>)
 8007afe:	a904      	add	r1, sp, #16
 8007b00:	4630      	mov	r0, r6
 8007b02:	f7fd feef 	bl	80058e4 <_printf_i>
 8007b06:	e7e4      	b.n	8007ad2 <_vfiprintf_r+0x1ea>
 8007b08:	080080ac 	.word	0x080080ac
 8007b0c:	080080b6 	.word	0x080080b6
 8007b10:	0800539d 	.word	0x0800539d
 8007b14:	080078c5 	.word	0x080078c5
 8007b18:	080080b2 	.word	0x080080b2

08007b1c <__swbuf_r>:
 8007b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b1e:	460e      	mov	r6, r1
 8007b20:	4614      	mov	r4, r2
 8007b22:	4605      	mov	r5, r0
 8007b24:	b118      	cbz	r0, 8007b2e <__swbuf_r+0x12>
 8007b26:	6a03      	ldr	r3, [r0, #32]
 8007b28:	b90b      	cbnz	r3, 8007b2e <__swbuf_r+0x12>
 8007b2a:	f7fe f877 	bl	8005c1c <__sinit>
 8007b2e:	69a3      	ldr	r3, [r4, #24]
 8007b30:	60a3      	str	r3, [r4, #8]
 8007b32:	89a3      	ldrh	r3, [r4, #12]
 8007b34:	071a      	lsls	r2, r3, #28
 8007b36:	d525      	bpl.n	8007b84 <__swbuf_r+0x68>
 8007b38:	6923      	ldr	r3, [r4, #16]
 8007b3a:	b31b      	cbz	r3, 8007b84 <__swbuf_r+0x68>
 8007b3c:	6823      	ldr	r3, [r4, #0]
 8007b3e:	6922      	ldr	r2, [r4, #16]
 8007b40:	1a98      	subs	r0, r3, r2
 8007b42:	6963      	ldr	r3, [r4, #20]
 8007b44:	b2f6      	uxtb	r6, r6
 8007b46:	4283      	cmp	r3, r0
 8007b48:	4637      	mov	r7, r6
 8007b4a:	dc04      	bgt.n	8007b56 <__swbuf_r+0x3a>
 8007b4c:	4621      	mov	r1, r4
 8007b4e:	4628      	mov	r0, r5
 8007b50:	f7ff fdae 	bl	80076b0 <_fflush_r>
 8007b54:	b9e0      	cbnz	r0, 8007b90 <__swbuf_r+0x74>
 8007b56:	68a3      	ldr	r3, [r4, #8]
 8007b58:	3b01      	subs	r3, #1
 8007b5a:	60a3      	str	r3, [r4, #8]
 8007b5c:	6823      	ldr	r3, [r4, #0]
 8007b5e:	1c5a      	adds	r2, r3, #1
 8007b60:	6022      	str	r2, [r4, #0]
 8007b62:	701e      	strb	r6, [r3, #0]
 8007b64:	6962      	ldr	r2, [r4, #20]
 8007b66:	1c43      	adds	r3, r0, #1
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d004      	beq.n	8007b76 <__swbuf_r+0x5a>
 8007b6c:	89a3      	ldrh	r3, [r4, #12]
 8007b6e:	07db      	lsls	r3, r3, #31
 8007b70:	d506      	bpl.n	8007b80 <__swbuf_r+0x64>
 8007b72:	2e0a      	cmp	r6, #10
 8007b74:	d104      	bne.n	8007b80 <__swbuf_r+0x64>
 8007b76:	4621      	mov	r1, r4
 8007b78:	4628      	mov	r0, r5
 8007b7a:	f7ff fd99 	bl	80076b0 <_fflush_r>
 8007b7e:	b938      	cbnz	r0, 8007b90 <__swbuf_r+0x74>
 8007b80:	4638      	mov	r0, r7
 8007b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b84:	4621      	mov	r1, r4
 8007b86:	4628      	mov	r0, r5
 8007b88:	f000 f806 	bl	8007b98 <__swsetup_r>
 8007b8c:	2800      	cmp	r0, #0
 8007b8e:	d0d5      	beq.n	8007b3c <__swbuf_r+0x20>
 8007b90:	f04f 37ff 	mov.w	r7, #4294967295
 8007b94:	e7f4      	b.n	8007b80 <__swbuf_r+0x64>
	...

08007b98 <__swsetup_r>:
 8007b98:	b538      	push	{r3, r4, r5, lr}
 8007b9a:	4b2a      	ldr	r3, [pc, #168]	; (8007c44 <__swsetup_r+0xac>)
 8007b9c:	4605      	mov	r5, r0
 8007b9e:	6818      	ldr	r0, [r3, #0]
 8007ba0:	460c      	mov	r4, r1
 8007ba2:	b118      	cbz	r0, 8007bac <__swsetup_r+0x14>
 8007ba4:	6a03      	ldr	r3, [r0, #32]
 8007ba6:	b90b      	cbnz	r3, 8007bac <__swsetup_r+0x14>
 8007ba8:	f7fe f838 	bl	8005c1c <__sinit>
 8007bac:	89a3      	ldrh	r3, [r4, #12]
 8007bae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007bb2:	0718      	lsls	r0, r3, #28
 8007bb4:	d422      	bmi.n	8007bfc <__swsetup_r+0x64>
 8007bb6:	06d9      	lsls	r1, r3, #27
 8007bb8:	d407      	bmi.n	8007bca <__swsetup_r+0x32>
 8007bba:	2309      	movs	r3, #9
 8007bbc:	602b      	str	r3, [r5, #0]
 8007bbe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007bc2:	81a3      	strh	r3, [r4, #12]
 8007bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bc8:	e034      	b.n	8007c34 <__swsetup_r+0x9c>
 8007bca:	0758      	lsls	r0, r3, #29
 8007bcc:	d512      	bpl.n	8007bf4 <__swsetup_r+0x5c>
 8007bce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bd0:	b141      	cbz	r1, 8007be4 <__swsetup_r+0x4c>
 8007bd2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bd6:	4299      	cmp	r1, r3
 8007bd8:	d002      	beq.n	8007be0 <__swsetup_r+0x48>
 8007bda:	4628      	mov	r0, r5
 8007bdc:	f7fe ffc2 	bl	8006b64 <_free_r>
 8007be0:	2300      	movs	r3, #0
 8007be2:	6363      	str	r3, [r4, #52]	; 0x34
 8007be4:	89a3      	ldrh	r3, [r4, #12]
 8007be6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007bea:	81a3      	strh	r3, [r4, #12]
 8007bec:	2300      	movs	r3, #0
 8007bee:	6063      	str	r3, [r4, #4]
 8007bf0:	6923      	ldr	r3, [r4, #16]
 8007bf2:	6023      	str	r3, [r4, #0]
 8007bf4:	89a3      	ldrh	r3, [r4, #12]
 8007bf6:	f043 0308 	orr.w	r3, r3, #8
 8007bfa:	81a3      	strh	r3, [r4, #12]
 8007bfc:	6923      	ldr	r3, [r4, #16]
 8007bfe:	b94b      	cbnz	r3, 8007c14 <__swsetup_r+0x7c>
 8007c00:	89a3      	ldrh	r3, [r4, #12]
 8007c02:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c0a:	d003      	beq.n	8007c14 <__swsetup_r+0x7c>
 8007c0c:	4621      	mov	r1, r4
 8007c0e:	4628      	mov	r0, r5
 8007c10:	f000 f884 	bl	8007d1c <__smakebuf_r>
 8007c14:	89a0      	ldrh	r0, [r4, #12]
 8007c16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c1a:	f010 0301 	ands.w	r3, r0, #1
 8007c1e:	d00a      	beq.n	8007c36 <__swsetup_r+0x9e>
 8007c20:	2300      	movs	r3, #0
 8007c22:	60a3      	str	r3, [r4, #8]
 8007c24:	6963      	ldr	r3, [r4, #20]
 8007c26:	425b      	negs	r3, r3
 8007c28:	61a3      	str	r3, [r4, #24]
 8007c2a:	6923      	ldr	r3, [r4, #16]
 8007c2c:	b943      	cbnz	r3, 8007c40 <__swsetup_r+0xa8>
 8007c2e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007c32:	d1c4      	bne.n	8007bbe <__swsetup_r+0x26>
 8007c34:	bd38      	pop	{r3, r4, r5, pc}
 8007c36:	0781      	lsls	r1, r0, #30
 8007c38:	bf58      	it	pl
 8007c3a:	6963      	ldrpl	r3, [r4, #20]
 8007c3c:	60a3      	str	r3, [r4, #8]
 8007c3e:	e7f4      	b.n	8007c2a <__swsetup_r+0x92>
 8007c40:	2000      	movs	r0, #0
 8007c42:	e7f7      	b.n	8007c34 <__swsetup_r+0x9c>
 8007c44:	20000098 	.word	0x20000098

08007c48 <_raise_r>:
 8007c48:	291f      	cmp	r1, #31
 8007c4a:	b538      	push	{r3, r4, r5, lr}
 8007c4c:	4604      	mov	r4, r0
 8007c4e:	460d      	mov	r5, r1
 8007c50:	d904      	bls.n	8007c5c <_raise_r+0x14>
 8007c52:	2316      	movs	r3, #22
 8007c54:	6003      	str	r3, [r0, #0]
 8007c56:	f04f 30ff 	mov.w	r0, #4294967295
 8007c5a:	bd38      	pop	{r3, r4, r5, pc}
 8007c5c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007c5e:	b112      	cbz	r2, 8007c66 <_raise_r+0x1e>
 8007c60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007c64:	b94b      	cbnz	r3, 8007c7a <_raise_r+0x32>
 8007c66:	4620      	mov	r0, r4
 8007c68:	f000 f830 	bl	8007ccc <_getpid_r>
 8007c6c:	462a      	mov	r2, r5
 8007c6e:	4601      	mov	r1, r0
 8007c70:	4620      	mov	r0, r4
 8007c72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c76:	f000 b817 	b.w	8007ca8 <_kill_r>
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d00a      	beq.n	8007c94 <_raise_r+0x4c>
 8007c7e:	1c59      	adds	r1, r3, #1
 8007c80:	d103      	bne.n	8007c8a <_raise_r+0x42>
 8007c82:	2316      	movs	r3, #22
 8007c84:	6003      	str	r3, [r0, #0]
 8007c86:	2001      	movs	r0, #1
 8007c88:	e7e7      	b.n	8007c5a <_raise_r+0x12>
 8007c8a:	2400      	movs	r4, #0
 8007c8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007c90:	4628      	mov	r0, r5
 8007c92:	4798      	blx	r3
 8007c94:	2000      	movs	r0, #0
 8007c96:	e7e0      	b.n	8007c5a <_raise_r+0x12>

08007c98 <raise>:
 8007c98:	4b02      	ldr	r3, [pc, #8]	; (8007ca4 <raise+0xc>)
 8007c9a:	4601      	mov	r1, r0
 8007c9c:	6818      	ldr	r0, [r3, #0]
 8007c9e:	f7ff bfd3 	b.w	8007c48 <_raise_r>
 8007ca2:	bf00      	nop
 8007ca4:	20000098 	.word	0x20000098

08007ca8 <_kill_r>:
 8007ca8:	b538      	push	{r3, r4, r5, lr}
 8007caa:	4d07      	ldr	r5, [pc, #28]	; (8007cc8 <_kill_r+0x20>)
 8007cac:	2300      	movs	r3, #0
 8007cae:	4604      	mov	r4, r0
 8007cb0:	4608      	mov	r0, r1
 8007cb2:	4611      	mov	r1, r2
 8007cb4:	602b      	str	r3, [r5, #0]
 8007cb6:	f7f9 fcff 	bl	80016b8 <_kill>
 8007cba:	1c43      	adds	r3, r0, #1
 8007cbc:	d102      	bne.n	8007cc4 <_kill_r+0x1c>
 8007cbe:	682b      	ldr	r3, [r5, #0]
 8007cc0:	b103      	cbz	r3, 8007cc4 <_kill_r+0x1c>
 8007cc2:	6023      	str	r3, [r4, #0]
 8007cc4:	bd38      	pop	{r3, r4, r5, pc}
 8007cc6:	bf00      	nop
 8007cc8:	20000544 	.word	0x20000544

08007ccc <_getpid_r>:
 8007ccc:	f7f9 bcec 	b.w	80016a8 <_getpid>

08007cd0 <__swhatbuf_r>:
 8007cd0:	b570      	push	{r4, r5, r6, lr}
 8007cd2:	460c      	mov	r4, r1
 8007cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cd8:	2900      	cmp	r1, #0
 8007cda:	b096      	sub	sp, #88	; 0x58
 8007cdc:	4615      	mov	r5, r2
 8007cde:	461e      	mov	r6, r3
 8007ce0:	da0d      	bge.n	8007cfe <__swhatbuf_r+0x2e>
 8007ce2:	89a3      	ldrh	r3, [r4, #12]
 8007ce4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007ce8:	f04f 0100 	mov.w	r1, #0
 8007cec:	bf0c      	ite	eq
 8007cee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007cf2:	2340      	movne	r3, #64	; 0x40
 8007cf4:	2000      	movs	r0, #0
 8007cf6:	6031      	str	r1, [r6, #0]
 8007cf8:	602b      	str	r3, [r5, #0]
 8007cfa:	b016      	add	sp, #88	; 0x58
 8007cfc:	bd70      	pop	{r4, r5, r6, pc}
 8007cfe:	466a      	mov	r2, sp
 8007d00:	f000 f848 	bl	8007d94 <_fstat_r>
 8007d04:	2800      	cmp	r0, #0
 8007d06:	dbec      	blt.n	8007ce2 <__swhatbuf_r+0x12>
 8007d08:	9901      	ldr	r1, [sp, #4]
 8007d0a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007d0e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007d12:	4259      	negs	r1, r3
 8007d14:	4159      	adcs	r1, r3
 8007d16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d1a:	e7eb      	b.n	8007cf4 <__swhatbuf_r+0x24>

08007d1c <__smakebuf_r>:
 8007d1c:	898b      	ldrh	r3, [r1, #12]
 8007d1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d20:	079d      	lsls	r5, r3, #30
 8007d22:	4606      	mov	r6, r0
 8007d24:	460c      	mov	r4, r1
 8007d26:	d507      	bpl.n	8007d38 <__smakebuf_r+0x1c>
 8007d28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d2c:	6023      	str	r3, [r4, #0]
 8007d2e:	6123      	str	r3, [r4, #16]
 8007d30:	2301      	movs	r3, #1
 8007d32:	6163      	str	r3, [r4, #20]
 8007d34:	b002      	add	sp, #8
 8007d36:	bd70      	pop	{r4, r5, r6, pc}
 8007d38:	ab01      	add	r3, sp, #4
 8007d3a:	466a      	mov	r2, sp
 8007d3c:	f7ff ffc8 	bl	8007cd0 <__swhatbuf_r>
 8007d40:	9900      	ldr	r1, [sp, #0]
 8007d42:	4605      	mov	r5, r0
 8007d44:	4630      	mov	r0, r6
 8007d46:	f7fd f9fd 	bl	8005144 <_malloc_r>
 8007d4a:	b948      	cbnz	r0, 8007d60 <__smakebuf_r+0x44>
 8007d4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d50:	059a      	lsls	r2, r3, #22
 8007d52:	d4ef      	bmi.n	8007d34 <__smakebuf_r+0x18>
 8007d54:	f023 0303 	bic.w	r3, r3, #3
 8007d58:	f043 0302 	orr.w	r3, r3, #2
 8007d5c:	81a3      	strh	r3, [r4, #12]
 8007d5e:	e7e3      	b.n	8007d28 <__smakebuf_r+0xc>
 8007d60:	89a3      	ldrh	r3, [r4, #12]
 8007d62:	6020      	str	r0, [r4, #0]
 8007d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d68:	81a3      	strh	r3, [r4, #12]
 8007d6a:	9b00      	ldr	r3, [sp, #0]
 8007d6c:	6163      	str	r3, [r4, #20]
 8007d6e:	9b01      	ldr	r3, [sp, #4]
 8007d70:	6120      	str	r0, [r4, #16]
 8007d72:	b15b      	cbz	r3, 8007d8c <__smakebuf_r+0x70>
 8007d74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d78:	4630      	mov	r0, r6
 8007d7a:	f000 f81d 	bl	8007db8 <_isatty_r>
 8007d7e:	b128      	cbz	r0, 8007d8c <__smakebuf_r+0x70>
 8007d80:	89a3      	ldrh	r3, [r4, #12]
 8007d82:	f023 0303 	bic.w	r3, r3, #3
 8007d86:	f043 0301 	orr.w	r3, r3, #1
 8007d8a:	81a3      	strh	r3, [r4, #12]
 8007d8c:	89a3      	ldrh	r3, [r4, #12]
 8007d8e:	431d      	orrs	r5, r3
 8007d90:	81a5      	strh	r5, [r4, #12]
 8007d92:	e7cf      	b.n	8007d34 <__smakebuf_r+0x18>

08007d94 <_fstat_r>:
 8007d94:	b538      	push	{r3, r4, r5, lr}
 8007d96:	4d07      	ldr	r5, [pc, #28]	; (8007db4 <_fstat_r+0x20>)
 8007d98:	2300      	movs	r3, #0
 8007d9a:	4604      	mov	r4, r0
 8007d9c:	4608      	mov	r0, r1
 8007d9e:	4611      	mov	r1, r2
 8007da0:	602b      	str	r3, [r5, #0]
 8007da2:	f7f9 fce8 	bl	8001776 <_fstat>
 8007da6:	1c43      	adds	r3, r0, #1
 8007da8:	d102      	bne.n	8007db0 <_fstat_r+0x1c>
 8007daa:	682b      	ldr	r3, [r5, #0]
 8007dac:	b103      	cbz	r3, 8007db0 <_fstat_r+0x1c>
 8007dae:	6023      	str	r3, [r4, #0]
 8007db0:	bd38      	pop	{r3, r4, r5, pc}
 8007db2:	bf00      	nop
 8007db4:	20000544 	.word	0x20000544

08007db8 <_isatty_r>:
 8007db8:	b538      	push	{r3, r4, r5, lr}
 8007dba:	4d06      	ldr	r5, [pc, #24]	; (8007dd4 <_isatty_r+0x1c>)
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	4604      	mov	r4, r0
 8007dc0:	4608      	mov	r0, r1
 8007dc2:	602b      	str	r3, [r5, #0]
 8007dc4:	f7f9 fce7 	bl	8001796 <_isatty>
 8007dc8:	1c43      	adds	r3, r0, #1
 8007dca:	d102      	bne.n	8007dd2 <_isatty_r+0x1a>
 8007dcc:	682b      	ldr	r3, [r5, #0]
 8007dce:	b103      	cbz	r3, 8007dd2 <_isatty_r+0x1a>
 8007dd0:	6023      	str	r3, [r4, #0]
 8007dd2:	bd38      	pop	{r3, r4, r5, pc}
 8007dd4:	20000544 	.word	0x20000544

08007dd8 <_init>:
 8007dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dda:	bf00      	nop
 8007ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dde:	bc08      	pop	{r3}
 8007de0:	469e      	mov	lr, r3
 8007de2:	4770      	bx	lr

08007de4 <_fini>:
 8007de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007de6:	bf00      	nop
 8007de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dea:	bc08      	pop	{r3}
 8007dec:	469e      	mov	lr, r3
 8007dee:	4770      	bx	lr
